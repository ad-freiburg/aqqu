[
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.girl_scouts_of_the_usa fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Juliette Gordon Low"
    ], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.girl_scouts_of_the_usa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01r3kd fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who founded gsusa", 
    "id": 1
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.doritos . FILTER (?x1 != fb:en.doritos) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Frito-Lay"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.doritos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0160jl . FILTER (?x1 != fb:m.0160jl) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who owned doritos", 
    "id": 2
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.kool-aid . FILTER (?x1 != fb:en.kool-aid) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.kool-aid))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01l566 . FILTER (?x1 != fb:m.01l566) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who invented koolaid", 
    "id": 3
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.omarion_grandberry fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1984-11-12"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.019g40 fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when was omarion born", 
    "id": 4
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.300_2007 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2006-12-09"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.300_2007)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07f_t4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was 300 released", 
    "id": 5
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.omarion_grandberry fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Inglewood"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019g40 fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was omarion born", 
    "id": 6
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.big_daddy fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "PG-13 (USA)"
    ], 
    "targetFormula": "(!fb:film.film.rating fb:en.big_daddy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02hxhz fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is big daddy rated", 
    "id": 7
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.capri_sun . FILTER (?x1 != fb:en.capri_sun) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Wild"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.capri_sun))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.03zqhj . FILTER (?x1 != fb:m.03zqhj) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who developed capri sun", 
    "id": 8
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.tutankhamun fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "-1322"
    ], 
    "targetFormula": "(!fb:people.deceased_person.date_of_death fb:en.tutankhamun)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07hcc fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did tutankhamun die", 
    "id": 9
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.barbie . FILTER (?x1 != fb:en.barbie) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [
      "1959"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.barbie))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.015w6q . FILTER (?x1 != fb:m.015w6q) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was barbie launched", 
    "id": 10
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.country_time . FILTER (?x1 != fb:en.country_time) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.country_time))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.04wg3q . FILTER (?x1 != fb:m.04wg3q) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who produced country time", 
    "id": 11
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.02r3cjp . FILTER (?x1 != fb:m.02r3cjp) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:m.02r3cjp))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.02r3cjp . FILTER (?x1 != fb:m.02r3cjp) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was scope introduced", 
    "id": 12
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.chips_ahoy . FILTER (?x1 != fb:en.chips_ahoy) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.chips_ahoy))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.08l5vh . FILTER (?x1 != fb:m.08l5vh) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when did chips ahoy debut", 
    "id": 13
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.doritos . FILTER (?x1 != fb:en.doritos) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.doritos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0160jl . FILTER (?x1 != fb:m.0160jl) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was doritos produced", 
    "id": 14
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.kool-aid . FILTER (?x1 != fb:en.kool-aid) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.kool-aid))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01l566 . FILTER (?x1 != fb:m.01l566) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was koolaid invented", 
    "id": 15
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.target_corporation fb:business.business_operation.industry ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Variety Stores", 
      "Retail"
    ], 
    "targetFormula": "(!fb:business.business_operation.industry fb:en.target_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01b39j fb:business.business_operation.industry ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is target 's industry", 
    "id": 16
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.nathan_smith_1770 fb:people.deceased_person.place_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Washington, D.C."
    ], 
    "targetFormula": "(!fb:people.deceased_person.place_of_death fb:en.nathan_smith_1770)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0bf9j1 fb:people.deceased_person.place_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did nathan smith die", 
    "id": 17
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.jerry_seinfeld fb:people.person.height_meters ?x1 } LIMIT 9999", 
    "result": [
      "1.803"
    ], 
    "targetFormula": "(!fb:people.person.height_meters fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0q5hw fb:people.person.height_meters ?x1 } LIMIT 9999", 
    "utterance": "how tall is jerry seinfeld", 
    "id": 18
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.henry_iii_of_england fb:people.deceased_person.place_of_burial ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Westminster Abbey"
    ], 
    "targetFormula": "(!fb:people.deceased_person.place_of_burial fb:en.henry_iii_of_england)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cl53 fb:people.deceased_person.place_of_burial ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was henry iii buried", 
    "id": 19
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.samuel_beckett fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Emphysema"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.samuel_beckett)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06whf fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "how did samuel beckett die", 
    "id": 20
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.8_mile fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Curtis Hanson"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.8_mile)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.017d93 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was 8 mile directed by", 
    "id": 21
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.13_going_on_30 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gary Winick"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vzpb fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed 13 going on 30", 
    "id": 22
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mark_mckinney fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1959-06-26"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.mark_mckinney)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.04bt9q fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when was mark mckinney born", 
    "id": 23
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.jack_albertson fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "1981-11-25"
    ], 
    "targetFormula": "(!fb:people.deceased_person.date_of_death fb:en.jack_albertson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0hw6_ fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did jack albertson die", 
    "id": 24
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.titanic_special_edition_dvd fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Cameron", 
      "Jon Landau"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dr_4 fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was titanic produced by", 
    "id": 25
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.john_f_kennedy fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "1963-11-22"
    ], 
    "targetFormula": "(!fb:people.deceased_person.date_of_death fb:en.john_f_kennedy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0d3k14 fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did john f kennedy die", 
    "id": 26
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.titanic_special_edition_dvd fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Cameron"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dr_4 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was titanic directed by", 
    "id": 27
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.tostitos . FILTER (?x1 != fb:en.tostitos) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.tostitos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.050s87 . FILTER (?x1 != fb:m.050s87) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was tostitos introduced", 
    "id": 28
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.capri_sun . FILTER (?x1 != fb:en.capri_sun) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.capri_sun))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.03zqhj . FILTER (?x1 != fb:m.03zqhj) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was capri sun developed", 
    "id": 29
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_almighty fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "PG-13 (USA)"
    ], 
    "targetFormula": "(!fb:film.film.rating fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jft4 fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is bruce almighty rated", 
    "id": 30
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jerry_seinfeld fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brooklyn"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0q5hw fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was jerry seinfeld born", 
    "id": 31
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jay Roach"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed meet the parents", 
    "id": 32
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ron_glass fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Buddhism"
    ], 
    "targetFormula": "(!fb:people.person.religion fb:en.ron_glass)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03h82p fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is ron glass 's religion", 
    "id": 33
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.2_fast_2_furious fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John Singleton"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.2_fast_2_furious)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.024lff fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed 2 fast 2 furious", 
    "id": 34
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlies_angels fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Joseph McGinty Nichol"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01y9jr fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed charlie_s angels", 
    "id": 35
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.liam_gallagher fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Burnage"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.liam_gallagher)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0188n0 fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was liam gallagher born", 
    "id": 36
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.wells_fargo fb:business.customer.supplier ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "CompuCom"
    ], 
    "targetFormula": "(!fb:business.customer.supplier fb:en.wells_fargo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01kdws fb:business.customer.supplier ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is wells fargo 's supplier", 
    "id": 37
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.country_time . FILTER (?x1 != fb:en.country_time) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.country_time))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.04wg3q . FILTER (?x1 != fb:m.04wg3q) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was country time produced", 
    "id": 38
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:en.titanic_special_edition_dvd . FILTER (?x1 != fb:en.titanic_special_edition_dvd) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "result": [
      "194", 
      "195"
    ], 
    "targetFormula": "(!fb:film.film_cut.runtime ((lambda x (fb:film.film_cut.film (var x))) fb:en.titanic_special_edition_dvd))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:m.0dr_4 . FILTER (?x1 != fb:m.0dr_4) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "utterance": "how long is titanic 's runtime", 
    "id": 39
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.titanic_special_edition_dvd fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Horner"
    ], 
    "targetFormula": "(!fb:film.film.music fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dr_4 fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the music by in titanic", 
    "id": 40
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pablo_picasso fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atheism"
    ], 
    "targetFormula": "(!fb:people.person.religion fb:en.pablo_picasso)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.060_7 fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what religion was pablo picasso", 
    "id": 41
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.danny_devito fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1944-11-17"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.danny_devito)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0q9kd fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "what year was danny devito born", 
    "id": 42
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.easy_cheese . FILTER (?x1 != fb:en.easy_cheese) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.easy_cheese))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.07kf0v . FILTER (?x1 != fb:m.07kf0v) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the owner of easy cheese", 
    "id": 43
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.nutter_butter . FILTER (?x1 != fb:en.nutter_butter) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.nutter_butter))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.08dws0 . FILTER (?x1 != fb:m.08dws0) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what company owns nutter butter", 
    "id": 44
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jerry_seinfeld fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:people.person.religion fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0q5hw fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is jerry seinfeld religion", 
    "id": 45
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.danny_devito fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Judaism", 
      "Catholicism"
    ], 
    "targetFormula": "(!fb:people.person.religion fb:en.danny_devito)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0q9kd fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is danny devito 's religion", 
    "id": 46
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.bruce_almighty fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2003-05-23"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01jft4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was bruce almighty released", 
    "id": 47
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bertrand_russell fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Influenza"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.bertrand_russell)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01bpn fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what did bertrand russell die of", 
    "id": 48
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.13_going_on_30 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2004-04-14"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02vzpb fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was 13 going on 30 released", 
    "id": 49
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.capn_crunch . FILTER (?x1 != fb:en.capn_crunch) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.capn_crunch))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0l71b . FILTER (?x1 != fb:m.0l71b) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was cap'n crunch introduced", 
    "id": 50
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:business.company_brand_relationship.company fb:en.sara_lee . FILTER (?x2 != fb:en.sara_lee) . ?x2 fb:business.company_brand_relationship.brand ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:business.company_brand_relationship.brand ((lambda x (fb:business.company_brand_relationship.company (var x))) fb:en.sara_lee)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:business.company_brand_relationship.company fb:m.04pfks . FILTER (?x2 != fb:m.04pfks) . ?x2 fb:business.company_brand_relationship.brand ?x1 } } } LIMIT 9999", 
    "utterance": "how many brands does sara lee own", 
    "id": 51
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.employment_tenure.company fb:en.gap_inc . FILTER (?x1 != fb:en.gap_inc) . ?x1 fb:business.employment_tenure.title fb:en.president . FILTER (?x1 != fb:en.president) . ?x1 fb:business.employment_tenure.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Millard Drexler", 
      "Marka Hansen", 
      "Paul Pressler", 
      "Robert J. Fisher", 
      "Dawn Robertson"
    ], 
    "targetFormula": "(!fb:business.employment_tenure.person (and ((lambda x (fb:business.employment_tenure.company (var x))) fb:en.gap_inc) ((lambda x (fb:business.employment_tenure.title (var x))) fb:en.president)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.employment_tenure.company fb:m.01yfp7 . FILTER (?x1 != fb:m.01yfp7) . ?x1 fb:business.employment_tenure.title fb:m.060c4 . FILTER (?x1 != fb:m.060c4) . ?x1 fb:business.employment_tenure.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the president of gap, inc.", 
    "id": 52
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.8_mile fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Drama", 
      "Coming of age", 
      "Musical Drama", 
      "Musical", 
      "Hip hop film"
    ], 
    "targetFormula": "(!fb:film.film.genre fb:en.8_mile)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.017d93 fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genres did 8 mile consist of", 
    "id": 53
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "PG-13 (USA)"
    ], 
    "targetFormula": "(!fb:film.film.rating fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the nutty professor rated", 
    "id": 54
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.gatorade . FILTER (?x1 != fb:en.gatorade) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.gatorade))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01ghgx . FILTER (?x1 != fb:m.01ghgx) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when gatorade was first developed", 
    "id": 55
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.the_nutty_professor_1996 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "1996-06-27"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0d87hc fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was nutty professor released", 
    "id": 56
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.william_shakespeare fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Stratford-upon-Avon"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.william_shakespeare)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.081k8 fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was william shakespeare born", 
    "id": 57
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.ritz_cracker . FILTER (?x1 != fb:en.ritz_cracker) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.ritz_cracker))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01kkd6 . FILTER (?x1 != fb:m.01kkd6) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when were ritz crackers introduced", 
    "id": 58
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.jerry_seinfeld fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1954-04-29"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0q5hw fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when is jerry seinfeld 's birthday", 
    "id": 59
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.charlies_angels fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2000-10-22"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01y9jr fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when did charlie_s angels come out", 
    "id": 60
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.competitive_space_mediator.space fb:en.smartphone . FILTER (?x1 != fb:en.smartphone) . ?x1 fb:business.competitive_space_mediator.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Motorola", 
      "Nokia", 
      "Apple Inc.", 
      "BlackBerry Limited", 
      "Palm", 
      "Sony Mobile Communications"
    ], 
    "targetFormula": "(!fb:business.competitive_space_mediator.company ((lambda x (fb:business.competitive_space_mediator.space (var x))) fb:en.smartphone))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.competitive_space_mediator.space fb:m.0169zh . FILTER (?x1 != fb:m.0169zh) . ?x1 fb:business.competitive_space_mediator.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what companies produce smartphones", 
    "id": 61
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.sponsorship.sponsored_by fb:en.gatorade . FILTER (?x1 != fb:en.gatorade) . ?x1 fb:business.sponsorship.sponsored_recipient ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Coco Ho", 
      "Michael Jordan"
    ], 
    "targetFormula": "(!fb:business.sponsorship.sponsored_recipient ((lambda x (fb:business.sponsorship.sponsored_by (var x))) fb:en.gatorade))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.sponsorship.sponsored_by fb:m.01ghgx . FILTER (?x1 != fb:m.01ghgx) . ?x1 fb:business.sponsorship.sponsored_recipient ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are gatorade 's major sponsors", 
    "id": 62
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.mountain_dew . FILTER (?x1 != fb:en.mountain_dew) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.mountain_dew))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0dp88 . FILTER (?x1 != fb:m.0dp88) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was diet mountain dew created", 
    "id": 63
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2009\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2010\"^^xsd:datetime)) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 . FILTER (?x1 != \"2009\"^^xsd:datetime) . fb:en.viacom fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:en.viacom) . ?x1 fb:measurement_unit.dated_money_value.amount ?x3 } LIMIT 9999", 
    "result": [
      "14625000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (and ((lambda x (fb:measurement_unit.dated_money_value.valid_date (var x))) (date 2009 -1 -1)) ((lambda x (!fb:business.business_operation.revenue (var x))) fb:en.viacom)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2009\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2010\"^^xsd:datetime)) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 . FILTER (?x1 != \"2009\"^^xsd:datetime) . fb:m.018_q8 fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:m.018_q8) . ?x1 fb:measurement_unit.dated_money_value.amount ?x3 } LIMIT 9999", 
    "utterance": "what was viacom 's revenue in 2009", 
    "id": 64
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.borders_group fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:business.employment_tenure.person (!fb:business.employer.employees fb:en.borders_group)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.0mdv8 fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "utterance": "how many people does borders employ", 
    "id": 65
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ron_glass fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Evansville"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.ron_glass)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03h82p fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is ron glass 's place of birth", 
    "id": 66
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.oreo . FILTER (?x1 != fb:en.oreo) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.oreo))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01k18d . FILTER (?x1 != fb:m.01k18d) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was the oreo cookie introduced", 
    "id": 67
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.nittany_mall fb:business.shopping_center.store ?x1 } } } LIMIT 9999", 
    "result": [
      "25"
    ], 
    "targetFormula": "(count (!fb:business.shopping_center.store fb:en.nittany_mall))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0g68bn fb:business.shopping_center.store ?x1 } } } LIMIT 9999", 
    "utterance": "how many stores are in nittany mall", 
    "id": 68
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.performance.character fb:m.0clpml . FILTER (?x1 != fb:m.0clpml) . ?x1 fb:film.performance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Barry Nelson", 
      "Bob Simmons", 
      "Pierce Brosnan", 
      "Roger Moore", 
      "Timothy Dalton", 
      "Daniel Craig", 
      "Sean Connery", 
      "George Lazenby", 
      "David Niven"
    ], 
    "targetFormula": "(!fb:film.performance.actor ((lambda x (fb:film.performance.character (var x))) fb:m.0clpml))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.performance.character fb:m.0clpml . FILTER (?x1 != fb:m.0clpml) . ?x1 fb:film.performance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who has portrayed james bond in film", 
    "id": 69
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ferdinand_ii_holy_roman_emperor fb:people.person.parents ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Charles II, Archduke of Austria", 
      "Maria Anna of Bavaria"
    ], 
    "targetFormula": "(!fb:people.person.parents fb:en.ferdinand_ii_holy_roman_emperor)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.013lkn fb:people.person.parents ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who were the parents of ferdinand ii", 
    "id": 70
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.j_c_penney fb:business.business_operation.operating_income ?x1 . FILTER (?x1 != fb:en.j_c_penney) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "2277000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:business.business_operation.operating_income (var x))) fb:en.j_c_penney))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.026h1w fb:business.business_operation.operating_income ?x1 . FILTER (?x1 != fb:m.026h1w) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what is jcpenney 's operating income", 
    "id": 71
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlies_angels fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Drew Barrymore", 
      "Leonard Goldberg", 
      "Nancy Juvonen"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01y9jr fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was charlie_s angels produced by", 
    "id": 72
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ipod fb:business.product_line.includes_product_lines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "iPod touch", 
      "iPod classic", 
      "iPod shuffle", 
      "iPod nano", 
      "iPod mini"
    ], 
    "targetFormula": "(!fb:business.product_line.includes_product_lines fb:en.ipod)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0mcx2 fb:business.product_line.includes_product_lines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what product lines does ipod include", 
    "id": 73
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_almighty fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John Debney"
    ], 
    "targetFormula": "(!fb:film.film.music fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jft4 fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the music by in bruce almighty", 
    "id": 74
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.big_daddy fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "1999-06-25"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.big_daddy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02hxhz fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was the movie big daddy released", 
    "id": 75
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.mattel fb:business.consumer_company.products ?x2 . ?x2 fb:business.company_product_relationship.consumer_product ?x1 } } } LIMIT 9999", 
    "result": [
      "1051"
    ], 
    "targetFormula": "(count (!fb:business.company_product_relationship.consumer_product (!fb:business.consumer_company.products fb:en.mattel)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.055z7 fb:business.consumer_company.products ?x2 . ?x2 fb:business.company_product_relationship.consumer_product ?x1 } } } LIMIT 9999", 
    "utterance": "how many products has mattel produced", 
    "id": 76
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.13_going_on_30 fb:film.film.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Time travel", 
      "Body swap"
    ], 
    "targetFormula": "(!fb:film.film.subjects fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vzpb fb:film.film.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the subject of 13 going on 30", 
    "id": 77
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.nintendo fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:business.employment_tenure.person (!fb:business.employer.employees fb:en.nintendo)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.059wk fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "utterance": "how many employees does nintendo have", 
    "id": 78
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.titanic_special_edition_dvd fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "1997-11-01"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dr_4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was the release date for titanic", 
    "id": 79
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.subjects fb:en.antarctica } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (fb:film.film.subjects fb:en.antarctica))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.subjects fb:m.0jfx } } } LIMIT 9999", 
    "utterance": "how many films are there on antarctica", 
    "id": 80
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.stove_top_stuffing . FILTER (?x1 != fb:en.stove_top_stuffing) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.stove_top_stuffing))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0526nk . FILTER (?x1 != fb:m.0526nk) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was stove top stuffing introduced", 
    "id": 81
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.13_going_on_30 fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Donna Roth", 
      "Gina Matthews", 
      "Susan Arnold"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vzpb fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the producer for 13 going on 30", 
    "id": 82
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.produced_by fb:en.tim_burton } } } LIMIT 9999", 
    "result": [
      "15"
    ], 
    "targetFormula": "(count (fb:film.film.produced_by fb:en.tim_burton))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.produced_by fb:m.07rd7 } } } LIMIT 9999", 
    "utterance": "how many films has tim burton produced", 
    "id": 83
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brian Grazer", 
      "Russell Simmons", 
      "Mark Lipsky"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the nutty professor produced by", 
    "id": 84
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.girl_scouts_of_the_usa fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1912"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.girl_scouts_of_the_usa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01r3kd fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was girl scouts of the usa founded", 
    "id": 85
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:en.lung_cancer . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Altamiro Carrilho", 
      "Adam C. Sambora", 
      "Jim Bacon", 
      "Jorge Bontemps", 
      "Paul Mills", 
      "Traudl Junge", 
      "Frank Worsley", 
      "Janet Alcoriza", 
      "Ellis Haizlip", 
      "Ruth Jessen", 
      "Wolf Szmuness", 
      "Tony Scornavacca", 
      "Alan Jay Lerner", 
      "Donna Summer", 
      "Sarah Vaughan", 
      "Eddie Rabbitt", 
      "Ike Quebec", 
      "James Tenney", 
      "Andreas Katsulas", 
      "Dmitri Shostakovich", 
      "Alan Rubin", 
      "Constantine Papadakis", 
      "Floyd Cramer", 
      "Jacob Druckman", 
      "Paul Newman", 
      "Dick Katz", 
      "Camacho Costa", 
      "Jean Simmons", 
      "Robert Taylor", 
      "Silvana Mangano", 
      "Enrico Maria Salerno", 
      "Mallory Horne", 
      "George Harrison", 
      "Harry Carey", 
      "Victor Argo", 
      "Don Heck", 
      "Feroz Khan", 
      "Gary Cooper", 
      "John G. Fuller", 
      "Andrei Tarkovsky", 
      "Charlie Ventura", 
      "Gilbert \"Bibi\" Rov\u00e8re", 
      "Sammy Barr", 
      "John Archer", 
      "Nacho Mart\u00ednez", 
      "Monica Bleibtreu", 
      "Peter Orlovsky", 
      "Eleanor Keaton", 
      "Lautaro Mur\u00faa", 
      "Billy McCaughey", 
      "Vicki Hearne", 
      "Mike Pratt", 
      "Niall Andrews", 
      "Carlos Lucena", 
      "Edward K\u0142osi\u0144ski", 
      "Edwin \"Bud\" Shrake", 
      "Eiji Go", 
      "Antoinette Lupino", 
      "Paul Fox", 
      "Hideji Otaki", 
      "Joan Bartlett", 
      "Dave Martin", 
      "Pierre Galante", 
      "Roger Treat", 
      "Trudy Marshall", 
      "Leah Rabin", 
      "Halvar Bj\u00f6rk", 
      "Dawn Evelyn Paris", 
      "Patricia Haines", 
      "Angelo Ruggiero", 
      "Mike Todd, Jr.", 
      "Joe Paterno", 
      "Kim Perrot", 
      "Roy Conrad", 
      "Jessica Mitford", 
      "Savenaca Siwatibau", 
      "David Ackles", 
      "Bill Raisch", 
      "Refaat Al-Gammal", 
      "Ted Noose", 
      "John Louis Mansi", 
      "Jack Griffin", 
      "Andrea Heinemann Simon", 
      "Ron Carey", 
      "Ra\u00fal Alfons\u00edn", 
      "Percy Joseph Carrey", 
      "Twila Shively", 
      "Ibrahim Rugova", 
      "Piera Aulagnier", 
      "Tad Szulc", 
      "Robert W. Peterson", 
      "Garry Shider", 
      "Hugo Batalla", 
      "Fritz Richmond", 
      "Jacques Sternberg", 
      "Eugen Jan Boissevain", 
      "Dan Iosif", 
      "Sanji Hase", 
      "Leslie Irvin", 
      "William B. Harrison", 
      "Elaine de Kooning", 
      "Alastair Sim", 
      "Cantinflas", 
      "Lynn Solotaroff", 
      "Masahiko Kimura", 
      "William A. Egan", 
      "Duncan Renaldo", 
      "Sol Kaplan", 
      "Silvia Monfort", 
      "Clifford Johnson", 
      "Fred Trueman", 
      "Henry Hampton", 
      "Harmonica Frank Floyd", 
      "Stanley G. Weinbaum", 
      "Sylvia Kristel", 
      "Gregory Isaacs", 
      "Sharon Mae Disney", 
      "Tony Young", 
      "Paul F. Harron Jr.", 
      "Brianne Murphy", 
      "Bruno Lawrence", 
      "David Shepherd", 
      "Jean Dean", 
      "Thomas Chastain", 
      "Roger Johnson", 
      "Carmen Silvera", 
      "Jim Ameche", 
      "Mikhail Kozakov", 
      "Ann Rork", 
      "Eugene Landy", 
      "W. D. Snodgrass", 
      "Leonard Schneider", 
      "Mike Francis", 
      "Dana Reeve", 
      "Jean-Paul Roussillon", 
      "Nazia Hassan", 
      "Joel White", 
      "Susan Cullen-Ward", 
      "Richard Joseph", 
      "Arthur Schiff", 
      "Frank Buck", 
      "Masato Yamanouchi", 
      "Stanley Sandler", 
      "Nancy Everett", 
      "David Craig", 
      "Harlan Holleman", 
      "Bob Murphy", 
      "Robert T. Smith", 
      "H\u00e9ctor Garza", 
      "Tony Mammarella", 
      "Christoph Schlingensief", 
      "Edgar Small", 
      "Helvio Soto", 
      "Donna Freberg", 
      "William Driskill", 
      "Barbara Holland", 
      "Edward Brandt, Jr.", 
      "Claude Monet", 
      "Robert Addie", 
      "Edmund Sylvers", 
      "Eddie Kendricks", 
      "Klaus Wennemann", 
      "Ustad Vilayat Khan", 
      "Gene McFadden", 
      "Glenn Hughes", 
      "Suddha Dibyaratana", 
      "Bobby Byrd", 
      "Ral Donner", 
      "Ray Milland", 
      "Robert Mitchum", 
      "Edward R. Murrow", 
      "Lorenzo Music", 
      "Porter Wagoner", 
      "Pete Bardens", 
      "Lisa Richette", 
      "Sherman Hemsley", 
      "Moe Howard", 
      "Desi Arnaz", 
      "John S. Detlie", 
      "Charlotte Zwerin", 
      "Harry Thompson", 
      "E. Maurice Adler", 
      "Elizabeth Rogers", 
      "Mary McCarthy", 
      "Fritz Von Erich", 
      "Kathleen Freeman", 
      "Clarence \"Gatemouth\" Brown", 
      "K. T. Stevens", 
      "William Travilla", 
      "Ed Gilbert", 
      "Leah Goldberg", 
      "Bernard Rapp", 
      "Rosemary Clooney", 
      "Oriana Fallaci", 
      "E. Nesbit", 
      "Vincent Schiavelli", 
      "Alistair Cooke", 
      "Betty Grable", 
      "Lisa Kirk", 
      "Adam Ulam", 
      "Glenn Strange", 
      "Denver Pyle", 
      "Hirotaka Suzuoki", 
      "Glenn Corbett", 
      "John Heath-Stubbs", 
      "Guy Davenport", 
      "Ronnie Briggs", 
      "Doug McClure", 
      "David Wayne", 
      "Jennifer Paterson", 
      "David McLean", 
      "Kathryn Joosten", 
      "Walt Disney", 
      "Stanley Ralph Ross", 
      "Buster Keaton", 
      "Ed Brinkman", 
      "Edmund Lowe", 
      "Yul Brynner", 
      "Juan Rulfo", 
      "Dilys Laye", 
      "Mark Bernes", 
      "Jonathan Latimer", 
      "Mike Kellin", 
      "James Whitmore", 
      "Luis Alberto Spinetta", 
      "Sigrid Valdis", 
      "Edgar Dearing", 
      "Marjorie Main", 
      "Chuck Connors", 
      "Pepper Adams", 
      "Kyoka Izumi", 
      "Tom Drake", 
      "Paul A. Rothchild", 
      "Lloyd Nolan", 
      "Stephen Jay Gould", 
      "John Hoyt", 
      "George Grizzard", 
      "Duke Ellington", 
      "Olan Soule", 
      "General Norman Johnson", 
      "Don Byas", 
      "Scatman John", 
      "June Pointer", 
      "Nat King Cole", 
      "E. G. Marshall", 
      "Irvin Kershner", 
      "James Brown", 
      "Russell Hunter", 
      "Harry Guardino", 
      "Maidie Norman", 
      "John J. Yeosock", 
      "Georg Ludwig Ritter von Trapp", 
      "Sophie Tucker", 
      "Richard Wawro", 
      "Bill Cullen", 
      "George Melly", 
      "Frank Gorshin", 
      "Robert Ryan", 
      "Millard Mitchell", 
      "Harvey James", 
      "Albert Collins", 
      "Alan North", 
      "Carrie Hamilton", 
      "Kathleen Ankers", 
      "Harald Heide-Steen Jr.", 
      "Frank Yaconelli", 
      "Sandra Br\u00e9a", 
      "Eric Gale", 
      "Pat Hare", 
      "Gale Gordon", 
      "Thea King", 
      "Wild Bill Elliott", 
      "Pedro Armend\u00e1riz, Jr.", 
      "Lionel Stander", 
      "Rudy Pompilli", 
      "Charlie Rouse", 
      "Lou Peraino", 
      "Vassar Clements", 
      "Hank Thompson", 
      "Camu Tao", 
      "Topi Sorsakoski", 
      "Shaike Ophir", 
      "Bill Drake", 
      "Lee Cheong-jun", 
      "Peter Donaldson", 
      "Arno\u0161t Lustig", 
      "Arthur S. Link", 
      "Michael Gibson", 
      "Haydain Neale", 
      "Leon Niemczyk", 
      "Joan Banks", 
      "Nicholas C. Forstmann", 
      "Hughie Green", 
      "Jay Berwanger", 
      "Luke Askew", 
      "Ann Miller", 
      "Gary Morton", 
      "Lee Patterson", 
      "Philip Carey", 
      "Raul Hilberg", 
      "Bonita Granville", 
      "Ross Thomas", 
      "Signe Hasso", 
      "Siobh\u00e1n McKenna", 
      "Le\u00f3n Febres Cordero", 
      "Fernandel", 
      "Warner Troyer", 
      "Morihiro Higashikuni", 
      "Kiel Martin", 
      "Larry Keith", 
      "Bob Chandler", 
      "Doris Silverton", 
      "Francis Chichester", 
      "Allen Carr", 
      "Edward A. Carter, Jr.", 
      "Skip Spence", 
      "Morton Downey, Jr.", 
      "Arnold Moss", 
      "Nachi Nozawa", 
      "Joel Roux-Neville", 
      "Emilie Reizes", 
      "Jorge Mart\u00ednez de Hoyos", 
      "Ivory Joe Hunter", 
      "Bruce Hart", 
      "Frederick Coffin", 
      "Thomas Williams", 
      "Felice Orlandi", 
      "Roger Grimsby", 
      "Fran\u00e7oise Dior", 
      "Ernst Happel", 
      "Heather Hughes", 
      "Joey Rourke", 
      "William F. Roemer, Jr.", 
      "Motosuke Takahashi", 
      "Steve Parker", 
      "Nicholas Civella", 
      "Szeto Wah", 
      "Stick McGhee", 
      "Evelyn Knight", 
      "Priscilla Bowman", 
      "Ruby Starr", 
      "Bob Gaddy", 
      "Willie Denson", 
      "Vincent Price", 
      "Roddy McDowall", 
      "Raymond Carver", 
      "Irving Kristol", 
      "Pat Nixon", 
      "Robert Preston", 
      "Kim Manners", 
      "Leo Penn", 
      "Macdonald Carey", 
      "Franklin J. Schaffner", 
      "Pinto Colvig", 
      "John Updike", 
      "Gary Merrill", 
      "Noam Pitlik", 
      "Merrill Connally", 
      "Robert Lewin", 
      "Edward Albert", 
      "Virginia Gregg", 
      "Cameron Mitchell", 
      "Raymond F. Lederer", 
      "Vito Scotti", 
      "Johnny Seven", 
      "Anthony Burgess", 
      "Paul Carr", 
      "John Junkin", 
      "Jason Robards", 
      "Freddy Fender", 
      "Nancy Walker", 
      "Dennis Main Wilson", 
      "Brian Piccolo", 
      "Osamu Dezaki", 
      "Tris Coffin", 
      "Terence Rigby", 
      "Gene O'Donnell", 
      "Franchot Tone", 
      "Sandy West", 
      "Alan King", 
      "Jimmy Carl Black", 
      "Forrest Tucker", 
      "Otto Hoffman", 
      "Bruce Cabot", 
      "Gale Robbins", 
      "Lew Burdette", 
      "Susan Oliver", 
      "Carlo Little", 
      "Lois Nettleton", 
      "Lloyd Haynes", 
      "Peter Blythe", 
      "Jo Ramos", 
      "Adora Dupree", 
      "Dean Martin", 
      "Frank Loesser", 
      "Melina Mercouri", 
      "Patricia Neal", 
      "Jimmy Dorsey", 
      "Andrew Hill", 
      "Don Knotts", 
      "Cyril Delevanti", 
      "Georg Danzer", 
      "Lou Rawls", 
      "Richard Van Allan", 
      "Barney Martin", 
      "Michael Greer", 
      "Mac Mohan", 
      "Otto Frank", 
      "Muhammad Ali Jinnah", 
      "William Haines", 
      "\u0130smail Cem \u0130pek\u00e7i", 
      "Roscoe Ates", 
      "Paul Outerbridge", 
      "Carlo Mazzarella", 
      "Herbert Rawlinson", 
      "William Reibert Mapother, Sr.", 
      "Sylvia Ruzga", 
      "W\u0142adys\u0142aw Gomu\u0142ka", 
      "Stubby Kaye", 
      "Paulo Autran", 
      "Frederick Kerr", 
      "Robert Calhoun", 
      "Catherine Seipp", 
      "Lamar Williams", 
      "Hideko Takamine", 
      "Frank Tarloff", 
      "Kenny Rankin", 
      "Camar\u00f3n de la Isla", 
      "Doris Betts", 
      "Relus ter Beek", 
      "Paul Zindel", 
      "Frank Chirkinian", 
      "Ahmed Zaki", 
      "Selma Diamond", 
      "Peter Fernandez", 
      "Turgut \u00d6zatay", 
      "Penne Hackforth-Jones", 
      "Charles Hayes", 
      "Samuel Ray Delany", 
      "Edward Mulhare", 
      "Thomas F Gilbert", 
      "Nolan Miller", 
      "William Talman", 
      "Carl Oglesby", 
      "James Nabrit", 
      "Pearl S. Buck", 
      "Roger Miller", 
      "Erskine Caldwell", 
      "Herbert Muschamp", 
      "William Mulloy", 
      "Gloria Shayne Baker", 
      "Albert Band", 
      "Harry Hay", 
      "Gypsy Rose Lee", 
      "Louis L'Amour", 
      "Reg Presley", 
      "Herb Caen", 
      "Thomas Hoving", 
      "Graciliano Ramos", 
      "Nancy Marchand", 
      "Johnny Warren", 
      "Jean-Roger Caussimon", 
      "Gary Crosby", 
      "John McIntire", 
      "Norman Shumway", 
      "David Martin", 
      "Michael Long", 
      "Carrie Nye", 
      "Reuben lasker", 
      "Ray Harford", 
      "Justin Hinds", 
      "Hideo Murota", 
      "Howard Martin Temin", 
      "Barry Unsworth", 
      "Louis Quinn", 
      "Woody Strode", 
      "Eileen Heckart", 
      "Don Stewart", 
      "Jacques Vilfrid", 
      "Mike Marshall", 
      "Stephen Ambrose", 
      "Bj\u00f6rn Afzelius", 
      "Roger Wendt", 
      "Jim Green", 
      "Marvin Worth", 
      "Eva Sophia M Gervais", 
      "Hal March", 
      "Walt Grealis", 
      "Bobby Astyr", 
      "Lois Andrews", 
      "Jesse Owens", 
      "Vida Jerman", 
      "Harry Tenbrook", 
      "Aleksandr Abdulov", 
      "Nanami Katsuno", 
      "Ted Manson", 
      "Robert Devoti", 
      "R. Edward Lopez", 
      "Leo Villa", 
      "Joe Pyne", 
      "Bobby Scott", 
      "George Deem", 
      "Tran Thien Thanh", 
      "Zeppo Marx", 
      "Jim Finks", 
      "Neil Aspinall", 
      "Clinton Howard Swindle", 
      "Phillip Coolidge", 
      "Kazuko Imai", 
      "Herbert Gunn", 
      "Harald Leipnitz", 
      "Tommy Makem", 
      "Julius Wechter", 
      "Phil Dusenberry", 
      "John Walton Curley", 
      "Walter Giller", 
      "Julian Soshnick", 
      "John N. Dalton", 
      "Millard Lampell", 
      "William E. McAnulty, Jr.", 
      "Jesse J. McCrary, Jr.", 
      "Jacobo Majluta Azar", 
      "Alfred Sandor", 
      "Anna Langford", 
      "Robert Mardian", 
      "Tim Curry", 
      "John Grenier", 
      "John Daido Loori", 
      "Paul Rogers", 
      "Alex Grass", 
      "Corneliu Coposu", 
      "Chen Ding-nan", 
      "Addison T. Smith", 
      "Vincent J. Fuller", 
      "John K. Eggers", 
      "Hugo Stenbeck Jr.", 
      "Ron Lancaster", 
      "Alix Talton", 
      "Nicholas Saunders", 
      "Jerry Mays", 
      "Sabri Godo", 
      "Mary Louise Smith", 
      "John Marshall", 
      "Franklin Delano Roosevelt, Jr.", 
      "Benay Venuta", 
      "Roy Rosenzweig", 
      "Claudia Tate", 
      "John Leonard", 
      "Ron Leavitt", 
      "Richard Kleindienst", 
      "David Brudnoy", 
      "Harold Cardinal", 
      "Thomas Samuel Kuhn", 
      "Endang Rahayu Sedyaningsih", 
      "George A. Economou", 
      "Jim Clench", 
      "Cirio H. Santiago", 
      "Earl Hindman", 
      "Sue Randall", 
      "Jean Bouise", 
      "Lincoln Kilpatrick", 
      "Kam Fong Chun", 
      "Dale Robertson", 
      "Phyllis Hill", 
      "Chad Everett", 
      "Carl Betz", 
      "Dorothy Hansine Andersen", 
      "Wilfy Rebimbus", 
      "Bull Moose Jackson", 
      "Chrisye", 
      "Leroy Jenkins", 
      "Warren Vanders", 
      "Ch\u00f4ko Iida", 
      "Scatman Crothers", 
      "H. Emory Widener, Jr.", 
      "Michael Hart", 
      "Richard Rougier", 
      "John Boylan", 
      "Franco Castellano", 
      "Frances Goodrich", 
      "Wee Chong Jin", 
      "Henry L. Yelverton", 
      "Keith Charles", 
      "Gertrude Baniszewski", 
      "Jimmie F. Skaggs", 
      "Austin Hayes", 
      "Claire Lee Chennault", 
      "Angus Calder", 
      "Carole Cole", 
      "Timothy S. Mayer", 
      "Fritz Houtermans", 
      "Horst Jankowski", 
      "Dick Glasser", 
      "Anthony Boucher", 
      "Richard Dimbleby", 
      "Pat Phoenix", 
      "Charlie Byrd", 
      "Y\u014d Inoue", 
      "Billie Lou Watt", 
      "Peter Matz", 
      "Bobby Robson", 
      "James Blish", 
      "Phil Goldstone", 
      "Jennifer Howard", 
      "Sheila Ryan", 
      "Gerard Smith", 
      "Steven Pimlott", 
      "Charles Matton", 
      "Elizabeth Murray", 
      "Cammie King", 
      "Robert Shayne", 
      "James Craig", 
      "Andr\u00e9 Marty", 
      "Winston H. Bostick", 
      "Ramsay Ames", 
      "Nicolae Dobrin", 
      "Barbara Luddy", 
      "Sa\u00fal Ubaldini", 
      "Peter Collinson", 
      "Cazuza", 
      "Corrado Mantoni", 
      "Edward George, Baron George", 
      "Djibril Diop Mamb\u00e9ty", 
      "Mary Antonia Wayne LaCava", 
      "Frank Attardi", 
      "Viktor Paskov", 
      "Chong-jun Yi", 
      "Khalid Ahmad", 
      "Anders Paulrud", 
      "C\u00e9cile Aubry", 
      "Bobby Hachey", 
      "Beko Ransome-Kuti", 
      "Robert W. Morgan", 
      "Johnny Walker", 
      "Charles Hyatt", 
      "Boris Pasternak", 
      "Neil Postman", 
      "Angela Carter", 
      "Joanna Moore", 
      "Bea Benaderet", 
      "Larry Linville", 
      "Jean Vander Pyl", 
      "Victor French", 
      "Audrey Meadows", 
      "Denys Rhodes", 
      "J\u00f3zef Glemp", 
      "Florence Halop", 
      "Charles Walters", 
      "Eddie Rodriguez", 
      "Jack Newfield", 
      "Bob McAllister", 
      "Princess Jos\u00e9phine Charlotte of Belgium", 
      "Dennis O'Keefe", 
      "Gene Austin", 
      "Stanley Baker", 
      "Darry Cowl", 
      "Frederick Thurston", 
      "Michael Shurtleff", 
      "Gregor Piatigorsky", 
      "Tomio Aoki", 
      "George Eckstein", 
      "Nigel Patrick", 
      "Mas Oyama", 
      "Beverly Sills", 
      "Ron Penfound", 
      "Delphine Seyrig", 
      "Giulietta Masina", 
      "Lei Clijsters", 
      "Alekos Alexandrakis", 
      "Al Wasserman", 
      "Rosaura Revueltas", 
      "Billy De Wolfe", 
      "Henry Morgan", 
      "Paul von Hindenburg", 
      "Jim Varney", 
      "Lenny McLean", 
      "Subir Raha", 
      "Beppo Brem", 
      "Guy Doleman", 
      "Erik Bruhn", 
      "Georges Cziffra", 
      "Paul Mares", 
      "Alejandro Rey", 
      "Adriana Caselotti", 
      "Bernard Barrow", 
      "Ticky Holgado", 
      "Jacques Pr\u00e9vert", 
      "Brion Gysin", 
      "Juan Piquer Sim\u00f3n", 
      "Woody Kling", 
      "Cheryl Holdridge", 
      "Louis Hayward", 
      "Luther Green", 
      "Christopher Connelly", 
      "Glenda Farrell", 
      "Parker Zane Allen", 
      "Billy Bang", 
      "Akiji Kobayashi", 
      "Hilly Kristal", 
      "Ralph Feigin", 
      "Ellen Willis", 
      "Sol Yurick", 
      "Gage Clarke", 
      "Lucy Pacquet", 
      "Jeremy Sinden", 
      "Robert Lansing", 
      "Juli\u00e1n Mateos", 
      "Slim Keith", 
      "Jaroslav Velinsk\u00fd", 
      "John Street", 
      "Crockett Johnson", 
      "Patricia Goedicke", 
      "Wheelock Whitney, Jr.", 
      "Teruo Ishii", 
      "Alberto Closas", 
      "Tang Junyi", 
      "George P. Cosmatos", 
      "Mary Doyle", 
      "Morgan Conway", 
      "Pilar Seurat", 
      "Harry Kerwin", 
      "Salil Dutta", 
      "Walter Hayes", 
      "Julian C. Boyd", 
      "Max Mellinger", 
      "Marvin Griffin", 
      "Paul Leder", 
      "Budhi Kunderan", 
      "Betty Lou Keim", 
      "Leonard Greene", 
      "Ram\u00f3n Vald\u00e9s", 
      "Gary Sperling", 
      "Nuala O'Faolain", 
      "Eugene David Glynn", 
      "Leon Bogues", 
      "Pacita Abad", 
      "Julio Alem\u00e1n", 
      "James Carr", 
      "Max Choboian", 
      "Witold Woyda", 
      "Billy Raymond", 
      "Mary Cox", 
      "Shinsuke Mikimoto", 
      "Prince Takamatsu", 
      "Victor Cowie", 
      "Duncan Hines", 
      "Ricardo Cruz", 
      "Joe Moretti", 
      "Diane Fawcett Walls", 
      "Iztok Puc", 
      "Richard Gilman", 
      "Ida G. Stephens", 
      "Sven O. H\u00f8iby", 
      "\u017dan Marolt", 
      "Roy Castle", 
      "Tony Jay", 
      "Rafael Azcona", 
      "Romulus Linney", 
      "Jeanne Cagney", 
      "Jacques Brel", 
      "Giles Gilbert Scott", 
      "Andy Kaufman", 
      "Dashiell Hammett", 
      "Pee Wee Reese", 
      "Bobby Bonds", 
      "Mark Belanger", 
      "Dave Roberts", 
      "Buddy Blattner", 
      "Morrie Martin", 
      "Zara Cully", 
      "Gene Mauch", 
      "Ken Boyer", 
      "John Milner", 
      "Dave McNally", 
      "Hank Bauer", 
      "Fred Hutchinson", 
      "Lionel Atwill", 
      "Daniel Melnick", 
      "Bob Swift", 
      "Joe DiMaggio", 
      "Doug Fieger", 
      "Peter Jennings", 
      "Gene Wood", 
      "Thomas Babe", 
      "Akihiko Hirata", 
      "Hal Roth", 
      "Priscilla Lane", 
      "Anthony Steel", 
      "L. J. K. Setright", 
      "George VI", 
      "Henry Denker", 
      "Yumiko Hasegawa", 
      "Allen Jenkins", 
      "Mary Castle", 
      "Rupert Crosse", 
      "Maurice Rabb, Jr.", 
      "Sid Davis", 
      "Pete Drake", 
      "Troy Hoskins", 
      "Adrian Scott", 
      "Johnny Sekka", 
      "Vanja Drach", 
      "Gabriel Elorde", 
      "Ben Westlund", 
      "Dwight Armstrong", 
      "Penny Edwards", 
      "Bert Rumsey", 
      "Jacques Royal", 
      "Paul Quarrington", 
      "Helen Gahagan Douglas", 
      "Joseph Schillinger", 
      "Gordon Wharmby", 
      "Dennis James", 
      "Les Brown", 
      "Denne Bart Petitclerc", 
      "Tinus de Jongh", 
      "Nicholas Ray", 
      "Malcolm Perry", 
      "Scotty Robertson", 
      "Reuven Ben-Yosef", 
      "Ray Richards", 
      "John Cazale", 
      "Al Sanders", 
      "Frank McCarthy", 
      "Danny Williams", 
      "Donald Madden", 
      "Jean-Marie Cardinal Lustiger", 
      "Ichijir\u00f4 Oya", 
      "Charles Kelman", 
      "Robert Montgomery Jr.", 
      "Lyn Thomas", 
      "Marvin Edmonds", 
      "Jacques H\u00e9tu", 
      "Caroline Knapp", 
      "Danny Sugerman", 
      "Esther Wong", 
      "Brian Haw", 
      "Herschel Danielovitch", 
      "Andrej Kva\u0161\u0148\u00e1k", 
      "David Hackney", 
      "Michael Williams", 
      "Carl Wilson", 
      "Norton Buffalo", 
      "Sigge F\u00fcrst", 
      "Charles Pitts", 
      "Ross Tompkins", 
      "Chris Whitley", 
      "Joseph Von Stroheim", 
      "James Nolan", 
      "Kenneth Parsons", 
      "Sidney Bechet", 
      "Lobby Loyde", 
      "Everett Dirksen", 
      "Abdul Aziz al-Hakim", 
      "David Marshall", 
      "Khoo Teck Puat", 
      "Barbara Bel Geddes", 
      "Mark Shivas", 
      "Rex Shelley", 
      "Otto Preminger", 
      "Rex Everhart", 
      "Cecily Adams", 
      "Perry Lopez", 
      "Jay Wilsey", 
      "Brian Pendleton", 
      "Mary Lee Settle", 
      "Anthony Poon", 
      "Pasquale Africano", 
      "Tim Flock", 
      "Tom Walkinshaw", 
      "Benny Parsons", 
      "Coo Coo Marlin", 
      "Larry Rice", 
      "Tassos Papadopoulos", 
      "Douglas Jardine", 
      "Gene L. Coon", 
      "Jack Deveau", 
      "Tim Kiley", 
      "Don Steele", 
      "Sancho Gracia", 
      "Dorothy Squires", 
      "Chiyonoyama Masanobu", 
      "Nicomedes Santa Cruz", 
      "Judith Montgomery", 
      "Aniello Dellacroce", 
      "Frank Whittle", 
      "Willis Conover", 
      "Grass Green", 
      "Pat Marsden", 
      "Jack Buck", 
      "Nicholas Nuttall", 
      "Zola Levitt", 
      "Tony Croatto", 
      "Hannah Nydahl", 
      "Abraham Bueno de Mesquita", 
      "Gerry E. Hinton", 
      "Lou Salvador, Jr.", 
      "Chris Rogers", 
      "SM Nasimuddin SM Amin", 
      "Tommy Ridgley", 
      "Gery Scott", 
      "Lillian Briggs", 
      "Patty Donahue", 
      "Sally Moffet", 
      "Steve Gravers", 
      "Alexander Young", 
      "Ron Smith", 
      "Anna Haycraft", 
      "U Thant", 
      "Gary Robichaud", 
      "Robert Frederick Bennett", 
      "Jackie Moran", 
      "Jean-Claude Vrinat", 
      "Rudolf Dassler", 
      "M\u00fc\u015ffik Kenter", 
      "Todd Wilson", 
      "Chet Huntley", 
      "Elena Nathanael", 
      "Gideon Ezra", 
      "Metin Serezli", 
      "Cornelius Ryan", 
      "Allan Jones", 
      "Eric Rijkaert", 
      "Louis Nye", 
      "Florence Rice", 
      "Dick Haymes", 
      "Grayson Hall", 
      "Buck Buchanan", 
      "Joe Yamanaka", 
      "Shinji S\u014dmai", 
      "Sachiko Hidari", 
      "Byrne Piven", 
      "Isao Tomita", 
      "Lee Rich", 
      "Alexis Korner", 
      "Nick Sanderson", 
      "Preston Tucker", 
      "Thomas Schippers", 
      "Tim Hart", 
      "Christine Jorgensen", 
      "Louie Welch", 
      "H\u00fcseyin Peyda", 
      "Suze Rotolo", 
      "Tammy Faye", 
      "Alexander Baldwin", 
      "Seiji Miyaguchi", 
      "Hac\u0131 Sabanc\u0131", 
      "Jack Shutta", 
      "Vernon Duke", 
      "Harmon Caldwell Drew", 
      "Arthur H. Vandenberg", 
      "Bert Parks", 
      "Gani Fawehinmi", 
      "Hisashi Inoue", 
      "William Drohan", 
      "Greg Palmer", 
      "Joan H. Parker", 
      "George Millay", 
      "Mike Woodin", 
      "Vic Ziegel", 
      "James Wainwright", 
      "Brenda Leipsic", 
      "Jimmy Walker", 
      "Peter Daniels", 
      "Phyllis Gates", 
      "Heinz Reincke", 
      "Heddle Nash", 
      "Leslie Klein", 
      "Pedro Plascencia", 
      "Gennady Yanayev", 
      "Milet Andrejevic", 
      "Charlie Hodge", 
      "Toni D'Alto", 
      "Walter E. Foran", 
      "Ron Soble", 
      "Aviva Wachs", 
      "George M. Sullivan", 
      "Frederic B. Vogel", 
      "Jimmy Lyons", 
      "Babe Paley", 
      "Dave McKenna", 
      "Krystyna Feldman", 
      "Roy Nutt", 
      "Prescott Bush", 
      "Luther Allison", 
      "Bobby Willis", 
      "Russell Ellington", 
      "Earl Blair", 
      "Feng Zikai", 
      "Steven Springer", 
      "Shan Kwan", 
      "Buddy Knox", 
      "Louis R. Rocco", 
      "David H. McNerney", 
      "Charlotte Delbo", 
      "Steve Mason", 
      "Rodney Taylor", 
      "Paul M. Naghdi", 
      "Paul Greco", 
      "Mary of Teck", 
      "Robert Hodgins", 
      "Nicholas Ridley, Baron Ridley of Liddesdale", 
      "Marie Jos\u00e9 of Belgium", 
      "Szeto Kam-Yuen", 
      "Lung Fong", 
      "Wong Jim", 
      "Eugene Gordon Lee", 
      "Bobby Hebb", 
      "Davy Graham", 
      "Renzo Ricci", 
      "Dorothy Ford", 
      "Freddie Fields", 
      "Phyllis Potter", 
      "H.A.L. Craig", 
      "Roy Drusky", 
      "David Schnaufer", 
      "Jack Hardy", 
      "Dave ''Snaker'' Ray", 
      "Kevin MacMichael", 
      "David Mervyn Blow", 
      "Renaldo \"Obie\" Benson", 
      "Dutch Tilders", 
      "Leandro", 
      "Dorothy Dwan", 
      "H. V. F. Winstone", 
      "Alec Wilder", 
      "Cotton Fitzsimmons", 
      "Sally Gracie", 
      "Jos\u00e9 Moreno", 
      "Harold McNair", 
      "Jun Ishikawa", 
      "Kyffin Williams", 
      "Ryan Larkin", 
      "David Nightingale Hicks", 
      "Thomas C. Slater", 
      "Ruth Cavin", 
      "Laurie Z.", 
      "Gordon Merrick", 
      "Leopoldo Torres R\u00edos", 
      "Billy Smart, Jr.", 
      "Barbara Seaman", 
      "Etheridge Knight", 
      "Bruce Garvey", 
      "Charles Leigh", 
      "Camilla Wedgwood", 
      "Yevgeny Matveyev", 
      "Wieland Wagner", 
      "George Knudson", 
      "Gay Brewer", 
      "Jim Turnesa", 
      "Larry Gilbert", 
      "Aarre Merikanto", 
      "Alberto Mariscal", 
      "Reizo Koike", 
      "Elbert E. Stephens", 
      "Alec Clunes", 
      "Ria Brieffies", 
      "Raveendran", 
      "Mike Osborne", 
      "Anna Keaveney", 
      "Dennis Letts", 
      "Wanda G\u00e1g", 
      "Frankie Burke", 
      "Ruth Stephan", 
      "Frank Phillip Merlo", 
      "Frank Fitzsimmons", 
      "Zoia Ceau\u0219escu", 
      "Thomas Fitzpatrick", 
      "Marion Montgomery", 
      "Willem Breuker", 
      "Art Hoppe", 
      "Iain Macmillan", 
      "Lucille Roberts", 
      "John Dair", 
      "Henrique Rosa", 
      "Syahrir", 
      "Miguel \u00c1ngel Burelli Rivas", 
      "Ladipo Solanke", 
      "Isidoro Malmierca Peoli", 
      "Fuad Hassan", 
      "Celia S\u00e1nchez", 
      "Jean O'Leary", 
      "Jan Wilson", 
      "John R.", 
      "Pete Franklin", 
      "Michael Fu Tieshan", 
      "Stephen Fumio Hamao", 
      "Amy Robinson", 
      "Pierre Mauroy", 
      "Umanosuke Iida", 
      "A. F. Golam Osmani", 
      "Edie Huggins", 
      "Eileen Rodgers", 
      "Bob Humphrys", 
      "Sue Rihr", 
      "Jack Ruby", 
      "Mary C. Wright", 
      "Rev. Cecil Franklin", 
      "Fred Hibbard", 
      "Albie Tedham", 
      "Richard Ben Cramer", 
      "Suzanne Langlois", 
      "Richard Jeffrey", 
      "Alfried Krupp von Bohlen und Halbach", 
      "Dan Rostenkowski", 
      "Evarts Ambrose Graham", 
      "Carl Hovde", 
      "Martin Moynihan", 
      "Donald Turnupseed", 
      "Andrew John Bevolo", 
      "Donald Hiss", 
      "Carla Lupi", 
      "Fred Ford", 
      "Shin'ichi Ichikawa", 
      "Robert Rental", 
      "Patrick Clancy", 
      "Hank Medress", 
      "Nico Garrone", 
      "Reg Smythe", 
      "Meral Okay", 
      "Bob Guccione", 
      "Re\u015fat Nuri G\u00fcntekin", 
      "Raleigh Rhodes", 
      "Paek Nam-sun", 
      "Helen Mason", 
      "John Good", 
      "Sadamasa Arikawa", 
      "Jack Wiebe", 
      "Hanns-Joachim Friedrichs", 
      "Barbara Epstein", 
      "Paul Shepard", 
      "Manfred Korfmann", 
      "Harry Aleman", 
      "Jack Austin", 
      "Stephan Weiss", 
      "Nelson Prud\u00eancio", 
      "Roy Carrier", 
      "Joseph N\u00e9rette", 
      "Robert W. Bussard", 
      "Chih Ree Sun", 
      "Consuelo Leandro", 
      "Barbara Pfeffer", 
      "El Fary", 
      "Gavin Long", 
      "Yasuo Iwata", 
      "Cal Ripken, Sr.", 
      "Robin Davies", 
      "Gerry Ehman", 
      "James Thomas Lawler", 
      "Rudi Carrell", 
      "Dan Lee", 
      "Werly Fairburn", 
      "James Burke", 
      "Laud Humphreys", 
      "Daniel Lev", 
      "Kazuo Dan", 
      "Terry Fields", 
      "Kjell Kristian Rike", 
      "Bruce Podewell", 
      "Peter Alfred Gorer", 
      "Jaroslav Pelikan", 
      "Helen J. Farabee", 
      "Adolfo Castelo", 
      "Ron Cyrus", 
      "Sam Houston Johnson", 
      "Alice Mary Franklin", 
      "Charles Rome Smith", 
      "Joseph Paruta", 
      "Harrison C. Summers", 
      "Richard Joseph", 
      "Naoyuki Suzuki", 
      "Yasui Kazumi", 
      "Meyer Lansky", 
      "Bugs Moran", 
      "Duke Mitchell", 
      "Frances Heflin", 
      "Thomas G. Labrecque", 
      "Marianne Winkelstern", 
      "Selwyn John Jenkins", 
      "Benjamin Mendes da Costa", 
      "Frank Polizzi", 
      "Fred Ascani", 
      "Nancy Gore", 
      "Edward Chester Plow", 
      "Harry Boykoff", 
      "Tommy Thomas", 
      "Edith K\u00f6rner", 
      "Lai Sun Cheung", 
      "J. B. Handelsman", 
      "Sean Bonniwell", 
      "Trudy McCaffery", 
      "Richard Cloward", 
      "Bernard Barker", 
      "Dorothy Potter", 
      "Andrea Stretton", 
      "Apidej Sit-Hirun", 
      "Frederick McKinley Jones", 
      "Danilo Lagbas", 
      "Kenojuak Ashevak", 
      "Mu Qing", 
      "Tahir Mirza", 
      "Mary Rotolo", 
      "Connie Kreski", 
      "Diosdado Sim\u00f3n", 
      "St. Clair Balfour", 
      "Cheryl Barrymore", 
      "Patricia Dunn", 
      "Shane Acton", 
      "Maurice Binder", 
      "F. William Free", 
      "William Ward Stephens", 
      "Dai Woodham", 
      "Carole Dekeijser", 
      "Han Dingxiang", 
      "Fernando Abril Martorell", 
      "Abdullah Saleh al-Ashtal", 
      "Ola Hudson", 
      "Catherine Leroy", 
      "Dean Turner", 
      "Richard Hobbs", 
      "Steve Patterson", 
      "Michael Deacon", 
      "Laurel Hester", 
      "Froilano de Mello", 
      "Patricia Pyle", 
      "Spencer Eastman", 
      "Charles Christian Hammer", 
      "Clay Shaw", 
      "Don H. Barden", 
      "Murray Klein", 
      "Robert Vesco", 
      "Donald Breckenridge", 
      "Jack Laughery", 
      "Tommy Gallagher", 
      "Robert Abplanalp", 
      "Peter Tinniswood", 
      "Liu Kang", 
      "Frank Cook", 
      "Walter H. Ebert", 
      "Beatrice Colen", 
      "Elaine Warner", 
      "Kenneth McLennan", 
      "Cavernario Galindo", 
      "Lee Tressel", 
      "Ronald Tharpe", 
      "Victor Sokolov", 
      "Gustavo Becerra-Schmidt", 
      "Ruby Muhammad", 
      "Michael Dewell", 
      "Hoke Dorough", 
      "Gaspar DiGregorio", 
      "Alexander Belostenny", 
      "Sarah Conlon", 
      "Khadambi Asalache", 
      "Vera Cuningham", 
      "Michael Gershman", 
      "Phyllis Hockin", 
      "Lud Kramer", 
      "Jay Miltner", 
      "Hugo Banzer", 
      "Keiji Nakazawa", 
      "Hamid Shirzadegan", 
      "Tony Larimer", 
      "Gerald M. Boyd", 
      "Norberto Aroldi", 
      "Gloria Hatrick McLean", 
      "Mervyn Davies", 
      "Benjamin Ruggiero", 
      "Sandy Bull", 
      "Wayne McLaren", 
      "Eleanor D. Wilson", 
      "Maria Anna von Genzinger", 
      "Abdul Kadir Yusuf", 
      "Rene Capo", 
      "Archie M. Gubbrud", 
      "Josef Beran", 
      "William J. Ruane", 
      "Barb Tarbox", 
      "Bill France, Jr.", 
      "Lauren Terrazzano", 
      "Bob Meyer", 
      "Stephen Edward Smith", 
      "Loyola de Palacio", 
      "Fred Haines", 
      "Sherif Yehia", 
      "Julia Carson", 
      "William Dale Wales", 
      "Christel Adelaar", 
      "Patricia George", 
      "Trevor Smith", 
      "Pat Burns", 
      "Laurent Fignon", 
      "Charles Wheeler", 
      "C.V. Wood", 
      "Sean Wight", 
      "Hugh Culverhouse", 
      "Beth Levine", 
      "Johnny Edgecombe", 
      "Vilyam Genrikhovich Fisher", 
      "Katsuo Takaishi", 
      "Joe Beeston", 
      "Kiyoshi Nagai", 
      "Ray Young", 
      "Penny Lernoux", 
      "Bennie Smith", 
      "Encarna S\u00e1nchez", 
      "Ken Selby", 
      "Stephen Morse", 
      "David Nixon", 
      "Tom Clay", 
      "Michelle Triola Marvin", 
      "Edwin B. Forsythe", 
      "Shinya Hidaka", 
      "Nicholas E. Baehr", 
      "Saeko Himuro", 
      "Ronnie Rooke", 
      "Bluma Appel", 
      "Richard DeVore", 
      "Marshall Schacker", 
      "Pauline Flanagan", 
      "Martin Conroy", 
      "Kaneo Ikegami", 
      "Ronald 'Bo' Ginn", 
      "Andrew D. McBride", 
      "George MacKenzie", 
      "Michael John Rogers", 
      "Jorge Montoro", 
      "George Spotton", 
      "Li Shuxian", 
      "Roi Kwabena", 
      "Mois\u00e9s Matias de Andrade", 
      "Ken Barnes", 
      "Ron Archer", 
      "Teruo Nakamura", 
      "William Strickland", 
      "Ben H. Love", 
      "Wes Joice", 
      "Wilhelmina Cooper", 
      "Heather Crowe", 
      "Jack Glass", 
      "Anibal Gordon", 
      "Kerry Juby", 
      "Derek Worlock", 
      "Regina Ovesey", 
      "James Brabazon", 
      "B\u00e4rbel Bohley", 
      "Wallace McIntosh", 
      "Pramote Teerawiwatana", 
      "Phoebe Omlie", 
      "Jacquelyn Kelley", 
      "Frank Zamboni", 
      "Chuck Leonard", 
      "Robert Strachan", 
      "Gloria Stavers", 
      "Donald Washington, Sr.", 
      "George Grljusich", 
      "Hamid Ghodse", 
      "Hugh Fraser", 
      "Ted Dushinski", 
      "Kim Thompson", 
      "Pu Laldenga", 
      "m.0qsk2zq", 
      "m.0ndcjwr"
    ], 
    "targetFormula": "(fb:people.deceased_person.cause_of_death fb:en.lung_cancer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:m.04p3w . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what musicians have died of lung cancer", 
    "id": 86
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlies_angels fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John August", 
      "Ed Solomon", 
      "Ryan Rowe"
    ], 
    "targetFormula": "(!fb:film.film.written_by fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01y9jr fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the story of charlie_s angels by", 
    "id": 87
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:en.meet_the_parents . FILTER (?x1 != fb:en.meet_the_parents) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "result": [
      "108", 
      "103", 
      "107"
    ], 
    "targetFormula": "(!fb:film.film_cut.runtime ((lambda x (fb:film.film_cut.film (var x))) fb:en.meet_the_parents))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:m.033fqh . FILTER (?x1 != fb:m.033fqh) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "utterance": "what is the runtime for meet the parents", 
    "id": 88
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.julie_edwards . FILTER (?x2 != fb:en.julie_edwards) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "41"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.julie_edwards)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.0kftt . FILTER (?x2 != fb:m.0kftt) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many films has julie andrews been in", 
    "id": 89
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.danny_devito fb:people.person.children ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:people.person.children fb:en.danny_devito))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0q9kd fb:people.person.children ?x1 } } } LIMIT 9999", 
    "utterance": "how many children does danny devito have", 
    "id": 90
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.transformers fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:en.transformers) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "147000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:film.film.estimated_budget (var x))) fb:en.transformers))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.05zlld0 fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:m.05zlld0) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "how much did transformers cost to produce", 
    "id": 91
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.oxford_properties fb:business.shopping_center_owner.shopping_centers_owned ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:business.shopping_center_owner.shopping_centers_owned fb:en.oxford_properties))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03m6ky2 fb:business.shopping_center_owner.shopping_centers_owned ?x1 } } } LIMIT 9999", 
    "utterance": "how many malls does oxford properties own", 
    "id": 92
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.beyonce . FILTER (?x2 != fb:en.beyonce) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.beyonce)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.01mpq7s . FILTER (?x2 != fb:m.01mpq7s) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances did beyonce do", 
    "id": 93
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jack_albertson fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Colorectal cancer"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.jack_albertson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0hw6_ fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was jack albertson 's cause of death", 
    "id": 94
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.john_f_kennedy fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Assassination"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.john_f_kennedy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d3k14 fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was john f kennedy 's cause of death", 
    "id": 95
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:en.skiing_accident } } } LIMIT 9999", 
    "result": [
      "21"
    ], 
    "targetFormula": "(count (fb:people.deceased_person.cause_of_death fb:en.skiing_accident))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:m.023b864 } } } LIMIT 9999", 
    "utterance": "how many people died of a skiing accident", 
    "id": 96
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:en.poison } } } LIMIT 9999", 
    "result": [
      "70"
    ], 
    "targetFormula": "(count (fb:people.deceased_person.cause_of_death fb:en.poison))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:m.0dh11 } } } LIMIT 9999", 
    "utterance": "how many notable people died by poisoning", 
    "id": 97
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.ipod fb:business.consumer_product.product_line ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:business.consumer_product.product_line fb:en.ipod))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0mcx2 fb:business.consumer_product.product_line ?x1 } } } LIMIT 9999", 
    "utterance": "how many generations of the ipod are there", 
    "id": 98
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.jerry_seinfeld fb:people.person.children ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:people.person.children fb:en.jerry_seinfeld))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0q5hw fb:people.person.children ?x1 } } } LIMIT 9999", 
    "utterance": "how many children does jerry seinfeld have", 
    "id": 99
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.crystal_light . FILTER (?x1 != fb:en.crystal_light) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.crystal_light))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.04wnj4 . FILTER (?x1 != fb:m.04wnj4) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was crystal light originally marketed", 
    "id": 100
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.film_film_distributor_relationship.film fb:en.bruce_almighty . FILTER (?x1 != fb:en.bruce_almighty) . ?x1 fb:film.film_film_distributor_relationship.distributor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Touchstone Pictures", 
      "Walt Disney Studios Motion Pictures", 
      "Universal Studios"
    ], 
    "targetFormula": "(!fb:film.film_film_distributor_relationship.distributor ((lambda x (fb:film.film_film_distributor_relationship.film (var x))) fb:en.bruce_almighty))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.film_film_distributor_relationship.film fb:m.01jft4 . FILTER (?x1 != fb:m.01jft4) . ?x1 fb:film.film_film_distributor_relationship.distributor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the distributors for bruce almighty", 
    "id": 101
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.ron_glass . FILTER (?x2 != fb:en.ron_glass) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "13"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.ron_glass)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.03h82p . FILTER (?x2 != fb:m.03h82p) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances did ron glass do", 
    "id": 102
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Shadyac"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the director of the nutty professor", 
    "id": 103
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.edward_scissorhands fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:en.edward_scissorhands) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "20000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:film.film.estimated_budget (var x))) fb:en.edward_scissorhands))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.01s3vk fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:m.01s3vk) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what was the budget for edward scissorhands", 
    "id": 104
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.wal-mart fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:business.business_operation.industry fb:en.wal-mart))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0841v fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "utterance": "how many industries does walmart consist of", 
    "id": 105
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:film.film.subjects fb:en.apollo_11 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The Dish", 
      "Fly Me to the Moon"
    ], 
    "targetFormula": "(fb:film.film.subjects fb:en.apollo_11)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:film.film.subjects fb:m.0hsp . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some films on the apollo 11 mission", 
    "id": 106
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Comedy", 
      "Romance Film"
    ], 
    "targetFormula": "(!fb:film.film.genre fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genres does meet the parents consist of", 
    "id": 107
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.2_fast_2_furious fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2003-06-03"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.2_fast_2_furious)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.024lff fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "what is the release date for 2 fast 2 furious", 
    "id": 108
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.girl_scouts_of_the_usa fb:business.brand.products ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:business.brand.products fb:en.girl_scouts_of_the_usa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01r3kd fb:business.brand.products ?x1 } } } LIMIT 9999", 
    "utterance": "how many different products does gsusa produce", 
    "id": 109
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_almighty fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Judy L. Ruskin"
    ], 
    "targetFormula": "(!fb:film.film.costume_design_by fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jft4 fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the costume designer for bruce almighty", 
    "id": 110
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.procter_gamble fb:business.business_operation.net_profit ?x1 . FILTER (?x1 != fb:en.procter_gamble) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "12075000000", 
      "3763000000", 
      "8684000000", 
      "81700000", 
      "577300000", 
      "13436000000", 
      "52300000", 
      "1206000000", 
      "187400000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:business.business_operation.net_profit (var x))) fb:en.procter_gamble))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.01qygl fb:business.business_operation.net_profit ?x1 . FILTER (?x1 != fb:m.01qygl) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what was procter & gamble's net profit in 1955", 
    "id": 111
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.motorola fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:en.motorola) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 } LIMIT 9999", 
    "result": [
      "2008-12-31", 
      "2006-12-31", 
      "1960", 
      "2007", 
      "2000", 
      "1990", 
      "1970", 
      "1980", 
      "1955"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.valid_date ((lambda x (!fb:business.business_operation.revenue (var x))) fb:en.motorola))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0537b fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:m.0537b) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 } LIMIT 9999", 
    "utterance": "in what year did motorola have the most revenue", 
    "id": 112
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:business.employment_tenure.company fb:en.die_welt . FILTER (?x1 != fb:en.die_welt) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2000\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2001\"^^xsd:datetime)) . ?x1 fb:business.employment_tenure.to ?x2 . FILTER (?x1 != \"2000\"^^xsd:datetime) . ?x1 fb:business.employment_tenure.title fb:en.editor_in_chief . FILTER (?x1 != fb:en.editor_in_chief) . ?x1 fb:business.employment_tenure.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.employment_tenure.person (and (and ((lambda x (fb:business.employment_tenure.company (var x))) fb:en.die_welt) ((lambda x (fb:business.employment_tenure.to (var x))) (date 2000 -1 -1))) ((lambda x (fb:business.employment_tenure.title (var x))) fb:en.editor_in_chief)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:business.employment_tenure.company fb:m.04gzkw . FILTER (?x1 != fb:m.04gzkw) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2000\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2001\"^^xsd:datetime)) . ?x1 fb:business.employment_tenure.to ?x2 . FILTER (?x1 != \"2000\"^^xsd:datetime) . ?x1 fb:business.employment_tenure.title fb:m.02wk2cy . FILTER (?x1 != fb:m.02wk2cy) . ?x1 fb:business.employment_tenure.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was the editor in chief of die welt in 2000", 
    "id": 113
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Shadyac", 
      "Steve Oedekerk", 
      "David Sheffield", 
      "Barry W. Blaustein"
    ], 
    "targetFormula": "(!fb:film.film.written_by fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the screenplay for the nutty professor by", 
    "id": 114
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.jack_albertson . FILTER (?x2 != fb:en.jack_albertson) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "25"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.jack_albertson)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.0hw6_ . FILTER (?x2 != fb:m.0hw6_) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances did jack albertson do", 
    "id": 115
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.film_casting_director ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ellen Chenoweth"
    ], 
    "targetFormula": "(!fb:film.film.film_casting_director fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.film_casting_director ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the casting director for meet the parents", 
    "id": 116
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04jpg2p fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Colleen Atwood"
    ], 
    "targetFormula": "(!fb:film.film.costume_design_by fb:m.04jpg2p)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04jpg2p fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the costumes for alice in wonderland", 
    "id": 117
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.film fb:en.charlies_angels . FILTER (?x2 != fb:en.charlies_angels) . ?x2 fb:film.performance.character ?x1 } } } LIMIT 9999", 
    "result": [
      "13"
    ], 
    "targetFormula": "(count (!fb:film.performance.character ((lambda x (fb:film.performance.film (var x))) fb:en.charlies_angels)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.film fb:m.01y9jr . FILTER (?x2 != fb:m.01y9jr) . ?x2 fb:film.performance.character ?x1 } } } LIMIT 9999", 
    "utterance": "how many main characters did charlie_s angels have", 
    "id": 118
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.jerry_seinfeld . FILTER (?x2 != fb:en.jerry_seinfeld) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.jerry_seinfeld)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.0q5hw . FILTER (?x2 != fb:m.0q5hw) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances does jerry seinfeld have", 
    "id": 119
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.the_home_depot fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:business.business_operation.industry fb:en.the_home_depot))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01zj1t fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "utterance": "how many different industries are there in home depot", 
    "id": 120
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:business.business_operation.industry fb:en.automobile } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (fb:business.business_operation.industry fb:en.automobile))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:business.business_operation.industry fb:m.0k4j } } } LIMIT 9999", 
    "utterance": "how many organizations are in the automobile industry", 
    "id": 121
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06zl3_x fb:business.shopping_center.retail_floor_space_m_2 ?x1 } LIMIT 9999", 
    "result": [
      "36000"
    ], 
    "targetFormula": "(!fb:business.shopping_center.retail_floor_space_m_2 fb:m.06zl3_x)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06zl3_x fb:business.shopping_center.retail_floor_space_m_2 ?x1 } LIMIT 9999", 
    "utterance": "what is the retail floor space of the dubai marina mall", 
    "id": 122
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.hayden_panettiere . FILTER (?x2 != fb:en.hayden_panettiere) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "36"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.hayden_panettiere)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.02jyhv . FILTER (?x2 != fb:m.02jyhv) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film productions did hayden panettiere appear in", 
    "id": 123
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.film_crew_gig.film_crew_role fb:en.prosthetic_makeup_artist . FILTER (?x2 != fb:en.prosthetic_makeup_artist) . ?x2 fb:film.film_crew_gig.film fb:en.28_weeks_later . FILTER (?x2 != fb:en.28_weeks_later) . ?x2 fb:film.film_crew_gig.crewmember ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:film.film_crew_gig.crewmember (and ((lambda x (fb:film.film_crew_gig.film_crew_role (var x))) fb:en.prosthetic_makeup_artist) ((lambda x (fb:film.film_crew_gig.film (var x))) fb:en.28_weeks_later))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.film_crew_gig.film_crew_role fb:m.098468p . FILTER (?x2 != fb:m.098468p) . ?x2 fb:film.film_crew_gig.film fb:m.0fhd04 . FILTER (?x2 != fb:m.0fhd04) . ?x2 fb:film.film_crew_gig.crewmember ?x1 } } } LIMIT 9999", 
    "utterance": "how many prosthetic makeup artists worked on 28 days later", 
    "id": 124
  }
]
