[
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pycon fb:conferences.conference_series.subject ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Computer networking", 
      "Python", 
      "Web development", 
      "Computer programming"
    ], 
    "targetFormula": "(!fb:conferences.conference_series.subject fb:en.pycon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05kjb0y fb:conferences.conference_series.subject ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is pycon about", 
    "id": 1
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pac-man fb:cvg.computer_videogame.designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "T\u014dru Iwatani"
    ], 
    "targetFormula": "(!fb:cvg.computer_videogame.designers fb:en.pac-man)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jt_x fb:cvg.computer_videogame.designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed pac-man", 
    "id": 2
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.kool-aid . FILTER (?x1 != fb:en.kool-aid) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.kool-aid))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01l566 . FILTER (?x1 != fb:m.01l566) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who invented koolaid", 
    "id": 3
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.syphillis fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Treponema pallidum"
    ], 
    "targetFormula": "(!fb:medicine.disease.causes fb:en.syphillis)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.074m2 fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what causes syphilis", 
    "id": 4
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.starbucks fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gordon Bowker", 
      "Zev Siegl", 
      "Jerry Baldwin"
    ], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.starbucks)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.018c_r fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who started starbucks", 
    "id": 5
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.300_2007 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2006-12-09"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.300_2007)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07f_t4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was 300 released", 
    "id": 6
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.europe fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "10180000"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.europe)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02j9z fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is europe 's area", 
    "id": 7
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.omarion_grandberry fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Inglewood"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019g40 fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was omarion born", 
    "id": 8
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.019rl6 fb:organization.organization.slogan ?x1 } LIMIT 9999", 
    "result": [
      "Do You Yahoo!?"
    ], 
    "targetFormula": "(!fb:organization.organization.slogan fb:m.019rl6)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.019rl6 fb:organization.organization.slogan ?x1 } LIMIT 9999", 
    "utterance": "what is yahoo!'s slogan", 
    "id": 9
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:comic_strips.comic_strip_creator_duration.comic_strip fb:en.the_far_side . FILTER (?x1 != fb:en.the_far_side) . ?x1 fb:comic_strips.comic_strip_creator_duration.creator_of_strip ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Gary Larson"
    ], 
    "targetFormula": "(!fb:comic_strips.comic_strip_creator_duration.creator_of_strip ((lambda x (fb:comic_strips.comic_strip_creator_duration.comic_strip (var x))) fb:en.the_far_side))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:comic_strips.comic_strip_creator_duration.comic_strip fb:m.016p4x . FILTER (?x1 != fb:m.016p4x) . ?x1 fb:comic_strips.comic_strip_creator_duration.creator_of_strip ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who created the far side", 
    "id": 10
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.wal-mart fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1962"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.wal-mart)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0841v fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was walmart founded", 
    "id": 11
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pluto fb:astronomy.astronomical_discovery.discovery_technique ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Image differencing", 
      "Mathematical prediction"
    ], 
    "targetFormula": "(!fb:astronomy.astronomical_discovery.discovery_technique fb:en.pluto)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0c3qy fb:astronomy.astronomical_discovery.discovery_technique ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "how was pluto discovered", 
    "id": 12
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.barbie . FILTER (?x1 != fb:en.barbie) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [
      "1959"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.barbie))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.015w6q . FILTER (?x1 != fb:m.015w6q) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was barbie launched", 
    "id": 13
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:zoos.animal_captivity.animal fb:m.02q470c . FILTER (?x1 != fb:m.02q470c) . ?x1 fb:zoos.animal_captivity.zoo ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Berlin Zoological Garden"
    ], 
    "targetFormula": "(!fb:zoos.animal_captivity.zoo ((lambda x (fb:zoos.animal_captivity.animal (var x))) fb:m.02q470c))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:zoos.animal_captivity.animal fb:m.02q470c . FILTER (?x1 != fb:m.02q470c) . ?x1 fb:zoos.animal_captivity.zoo ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "in what zoo was knut kept", 
    "id": 14
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.doritos . FILTER (?x1 != fb:en.doritos) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.doritos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0160jl . FILTER (?x1 != fb:m.0160jl) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was doritos produced", 
    "id": 15
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.kool-aid . FILTER (?x1 != fb:en.kool-aid) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.kool-aid))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01l566 . FILTER (?x1 != fb:m.01l566) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was koolaid invented", 
    "id": 16
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:food.beer_containment.container_type fb:en.beverage_can . FILTER (?x2 != fb:en.beverage_can) . ?x2 fb:food.beer_containment.beer ?x1 } } } LIMIT 9999", 
    "result": [
      "92"
    ], 
    "targetFormula": "(count (!fb:food.beer_containment.beer ((lambda x (fb:food.beer_containment.container_type (var x))) fb:en.beverage_can)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:food.beer_containment.container_type fb:m.021v_4 . FILTER (?x2 != fb:m.021v_4) . ?x2 fb:food.beer_containment.beer ?x1 } } } LIMIT 9999", 
    "utterance": "how many beers come a can", 
    "id": 17
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.american_red_cross fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Clara Barton"
    ], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.american_red_cross)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0by8vb fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who founded the red cross", 
    "id": 18
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:organization.leadership.role fb:en.chief_executive_officer . FILTER (?x1 != fb:en.chief_executive_officer) . ?x1 fb:organization.leadership.organization fb:en.save-a-lot . FILTER (?x1 != fb:en.save-a-lot) . ?x1 fb:organization.leadership.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Santiago Roces"
    ], 
    "targetFormula": "(!fb:organization.leadership.person (and ((lambda x (fb:organization.leadership.role (var x))) fb:en.chief_executive_officer) ((lambda x (fb:organization.leadership.organization (var x))) fb:en.save-a-lot)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:organization.leadership.role fb:m.0dq_5 . FILTER (?x1 != fb:m.0dq_5) . ?x1 fb:organization.leadership.organization fb:m.0209r2 . FILTER (?x1 != fb:m.0209r2) . ?x1 fb:organization.leadership.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the ceo of savealot", 
    "id": 19
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.one_ring fb:fictional_universe.fictional_object.destroyed_by ?x1 } LIMIT 9999", 
    "result": [
      "Consumed by the fires of Orodruin (Mount Doom) when Gollum fell in after taking the ring from Frodo."
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_object.destroyed_by fb:en.one_ring)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0gy05 fb:fictional_universe.fictional_object.destroyed_by ?x1 } LIMIT 9999", 
    "utterance": "who destroyed the one ring", 
    "id": 20
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.oxygen fb:chemistry.chemical_element.discovery_date ?x1 } LIMIT 9999", 
    "result": [
      "1774"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.discovery_date fb:en.oxygen)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.025s6bf fb:chemistry.chemical_element.discovery_date ?x1 } LIMIT 9999", 
    "utterance": "when was oxygen discovered", 
    "id": 21
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.parthenon fb:architecture.structure.architect ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ictinus", 
      "Callicrates", 
      "Phidias"
    ], 
    "targetFormula": "(!fb:architecture.structure.architect fb:en.parthenon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05x7b fb:architecture.structure.architect ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the parthenon", 
    "id": 22
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.8_mile fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Curtis Hanson"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.8_mile)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.017d93 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was 8 mile directed by", 
    "id": 23
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.facebook fb:internet.website.launched ?x1 } LIMIT 9999", 
    "result": [
      "2004-02-04"
    ], 
    "targetFormula": "(!fb:internet.website.launched fb:en.facebook)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02y1vz fb:internet.website.launched ?x1 } LIMIT 9999", 
    "utterance": "when was facebook launched", 
    "id": 24
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.titanic_special_edition_dvd fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Cameron"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dr_4 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was titanic directed by", 
    "id": 25
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.prostate_cancer fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:medicine.disease.causes fb:en.prostate_cancer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0m32h fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what causes prostate cancer", 
    "id": 26
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.the_home_depot fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1978"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.the_home_depot)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01zj1t fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was home depot founded", 
    "id": 27
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.capri_sun . FILTER (?x1 != fb:en.capri_sun) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.capri_sun))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.03zqhj . FILTER (?x1 != fb:m.03zqhj) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was capri sun developed", 
    "id": 28
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_almighty fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "PG-13 (USA)"
    ], 
    "targetFormula": "(!fb:film.film.rating fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jft4 fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is bruce almighty rated", 
    "id": 29
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.steven_seagal fb:martial_arts.martial_artist.instructor ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Fumio Demura", 
      "Rod Kobayashi"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_artist.instructor fb:en.steven_seagal)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0hqly fb:martial_arts.martial_artist.instructor ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who instructed steven seagal", 
    "id": 30
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.africa fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.africa) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "200000000", 
      "286729000", 
      "1032532974", 
      "811101000", 
      "482803000", 
      "635287000", 
      "229895000", 
      "1022234000", 
      "368148000", 
      "1000010000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.africa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0dg3n1 fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.0dg3n1) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is africa 's population", 
    "id": 31
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.taoism fb:religion.religion.texts ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "I Ching", 
      "Tao Te Ching", 
      "Zhuangzi", 
      "Daozang"
    ], 
    "targetFormula": "(!fb:religion.religion.texts fb:en.taoism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07gvx fb:religion.religion.texts ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the texts of taoism", 
    "id": 32
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bipolar_disorder fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Genetic factors", 
      "Neurotransmitter imbalance"
    ], 
    "targetFormula": "(!fb:medicine.disease.causes fb:en.bipolar_disorder)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01g2q fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what causes bipolar disorder", 
    "id": 33
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.025sw5g fb:chemistry.chemical_element.symbol ?x1 } LIMIT 9999", 
    "result": [
      "Hg"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.symbol fb:m.025sw5g)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.025sw5g fb:chemistry.chemical_element.symbol ?x1 } LIMIT 9999", 
    "utterance": "what's the symbol for mercury", 
    "id": 34
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ursa_minor fb:astronomy.constellation.contains ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "11 Ursae Minoris", 
      "Lambda Ursae Minoris", 
      "Beta Ursae Minoris", 
      "Calvera", 
      "HD 150706", 
      "Gamma Ursae Minoris", 
      "Epsilon Ursae Minoris", 
      "Zeta Ursae Minoris", 
      "Delta Ursae Minoris", 
      "Pi Ursae Minoris", 
      "Eta Ursae Minoris", 
      "Theta Ursae Minoris"
    ], 
    "targetFormula": "(!fb:astronomy.constellation.contains fb:en.ursa_minor)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07t80 fb:astronomy.constellation.contains ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what starts are in ursa minor", 
    "id": 35
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.zinc fb:chemistry.chemical_element.isotopes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Zinc-81", 
      "Zinc-58", 
      "Zinc-75", 
      "Zinc-80", 
      "Zinc-76", 
      "Zinc-82", 
      "Zinc-68", 
      "Zinc-64", 
      "Zinc-74", 
      "Zinc-66", 
      "Zinc-70", 
      "Zinc-57", 
      "Zinc-73", 
      "Zinc-63", 
      "Zinc-71", 
      "Zinc-83", 
      "Zinc-69", 
      "Zinc-61", 
      "Zinc-56", 
      "Zinc-79", 
      "Zinc-65", 
      "Zinc-54", 
      "Zinc-62", 
      "Zinc-78", 
      "Zinc-59", 
      "Zinc-72", 
      "Zinc-67", 
      "Zinc-60", 
      "Zinc-77", 
      "Zinc-55"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.isotopes fb:en.zinc)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.025sqz8 fb:chemistry.chemical_element.isotopes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the isotopes of zinc", 
    "id": 36
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.celtic_languages fb:language.language_family.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Pictish language", 
      "Irish", 
      "Scottish Gaelic language", 
      "Breton", 
      "Welsh Language", 
      "Old Welsh language", 
      "Old Irish language", 
      "Cornish Language", 
      "Lusitanian language", 
      "Manx Language", 
      "Middle Welsh language", 
      "Celtiberian language", 
      "Noric language", 
      "Gaulish language", 
      "Cumbric language", 
      "Lepontic language"
    ], 
    "targetFormula": "(!fb:language.language_family.languages fb:en.celtic_languages)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01sd8 fb:language.language_family.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the celtic languages", 
    "id": 37
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.giant_dipper fb:amusement_parks.ride.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Fredrick Church", 
      "Frank Prior"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.designer fb:en.giant_dipper)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09xypn fb:amusement_parks.ride.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the giant dipper", 
    "id": 38
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlies_angels fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Joseph McGinty Nichol"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01y9jr fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed charlie_s angels", 
    "id": 39
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.liam_gallagher fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Burnage"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.liam_gallagher)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0188n0 fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was liam gallagher born", 
    "id": 40
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.de_sterrennacht fb:visual_art.artwork.date_completed ?x1 } LIMIT 9999", 
    "result": [
      "1889-06"
    ], 
    "targetFormula": "(!fb:visual_art.artwork.date_completed fb:en.de_sterrennacht)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0479_q fb:visual_art.artwork.date_completed ?x1 } LIMIT 9999", 
    "utterance": "when was starry night painted", 
    "id": 41
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.polonium fb:chemistry.chemical_element.discovering_country ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "France"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.discovering_country fb:en.polonium)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.025s7y9 fb:chemistry.chemical_element.discovering_country ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was polonium discovered", 
    "id": 42
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.iphone fb:computer.computer.introduced ?x1 } LIMIT 9999", 
    "result": [
      "2007-06-29"
    ], 
    "targetFormula": "(!fb:computer.computer.introduced fb:en.iphone)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.027lnzs fb:computer.computer.introduced ?x1 } LIMIT 9999", 
    "utterance": "when was the iphone introduced", 
    "id": 43
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0hmwcy2 fb:conferences.conference_series.sponsoring_organization ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Hugh O'Brian Youth Leadership Foundation"
    ], 
    "targetFormula": "(!fb:conferences.conference_series.sponsoring_organization fb:m.0hmwcy2)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0hmwcy2 fb:conferences.conference_series.sponsoring_organization ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who sponsors the hoby seminars", 
    "id": 44
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.interstate_579 fb:transportation.road.formed ?x1 } LIMIT 9999", 
    "result": [
      "1962"
    ], 
    "targetFormula": "(!fb:transportation.road.formed fb:en.interstate_579)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03jchd fb:transportation.road.formed ?x1 } LIMIT 9999", 
    "utterance": "when was interstate 579 formed", 
    "id": 45
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.iceland fb:location.country.capital ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Reykjavik"
    ], 
    "targetFormula": "(!fb:location.country.capital fb:en.iceland)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03rj0 fb:location.country.capital ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the capital of iceland", 
    "id": 46
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:media_common.completion_of_unfinished_work.unfinished_work fb:m.02xtrr . FILTER (?x1 != fb:m.02xtrr) . ?x1 fb:media_common.completion_of_unfinished_work.finisher ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Franz Xaver S\u00fcssmayr"
    ], 
    "targetFormula": "(!fb:media_common.completion_of_unfinished_work.finisher ((lambda x (fb:media_common.completion_of_unfinished_work.unfinished_work (var x))) fb:m.02xtrr))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:media_common.completion_of_unfinished_work.unfinished_work fb:m.02xtrr . FILTER (?x1 != fb:m.02xtrr) . ?x1 fb:media_common.completion_of_unfinished_work.finisher ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who completed mozart_s requiem", 
    "id": 47
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.save-a-lot fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Chase Gabbard", 
      "Herb Baumeister", 
      "Bill Moran"
    ], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.save-a-lot)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0209r2 fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the founder of savealot", 
    "id": 48
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.nutter_butter . FILTER (?x1 != fb:en.nutter_butter) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.nutter_butter))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.08dws0 . FILTER (?x1 != fb:m.08dws0) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what company owns nutter butter", 
    "id": 49
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lady_washington fb:boats.ship.place_built ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Aberdeen"
    ], 
    "targetFormula": "(!fb:boats.ship.place_built fb:en.lady_washington)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06c38n fb:boats.ship.place_built ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was lady washington built", 
    "id": 50
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.karate fb:martial_arts.martial_art.well_known_practitioner ?x1 } } } LIMIT 9999", 
    "result": [
      "22"
    ], 
    "targetFormula": "(count (!fb:martial_arts.martial_art.well_known_practitioner fb:en.karate))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.048dz fb:martial_arts.martial_art.well_known_practitioner ?x1 } } } LIMIT 9999", 
    "utterance": "how many people practice karate", 
    "id": 51
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.christianity fb:religion.religion.holidays ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Easter", 
      "Christmas", 
      "Easter Monday", 
      "Shrove Tuesday", 
      "Palm Sunday", 
      "Good Friday", 
      "Mothering Sunday", 
      "Maundy Thursday"
    ], 
    "targetFormula": "(!fb:religion.religion.holidays fb:en.christianity)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01lp8 fb:religion.religion.holidays ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the christian holidays", 
    "id": 52
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jerry_seinfeld fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:people.person.religion fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0q5hw fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is jerry seinfeld religion", 
    "id": 53
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cp1pcv fb:digicams.digital_camera.released ?x1 } LIMIT 9999", 
    "result": [
      "2010-05-11"
    ], 
    "targetFormula": "(!fb:digicams.digital_camera.released fb:m.0cp1pcv)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cp1pcv fb:digicams.digital_camera.released ?x1 } LIMIT 9999", 
    "utterance": "when was the sony nex-5 released", 
    "id": 54
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.aletsch_glacier fb:geography.glacier.thickness ?x1 } LIMIT 9999", 
    "result": [
      "1000"
    ], 
    "targetFormula": "(!fb:geography.glacier.thickness fb:en.aletsch_glacier)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01prvz fb:geography.glacier.thickness ?x1 } LIMIT 9999", 
    "utterance": "how thick is the aletsch glacier", 
    "id": 55
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05v0tbd fb:radio.radio_program.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "History"
    ], 
    "targetFormula": "(!fb:radio.radio_program.subjects fb:m.05v0tbd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05v0tbd fb:radio.radio_program.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the american past about", 
    "id": 56
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.bible fb:religion.religious_text.religious_text_of ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:religion.religious_text.religious_text_of fb:en.bible))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.015j7 fb:religion.religious_text.religious_text_of ?x1 } } } LIMIT 9999", 
    "utterance": "how many religions use the bible", 
    "id": 57
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.king_henry_viii_of_england fb:royalty.monarch.royal_line ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tudor dynasty"
    ], 
    "targetFormula": "(!fb:royalty.monarch.royal_line fb:en.king_henry_viii_of_england)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03p77 fb:royalty.monarch.royal_line ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was henry viii's royal line", 
    "id": 58
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.europe fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.europe) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "738199000", 
      "641000000", 
      "485000000", 
      "320000000", 
      "731000000", 
      "594000000", 
      "579000000", 
      "530000000", 
      "739165030", 
      "423000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.europe))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02j9z fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.02j9z) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population of europe", 
    "id": 59
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.spamalot fb:theater.play.lyricist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Eric Idle"
    ], 
    "targetFormula": "(!fb:theater.play.lyricist fb:en.spamalot)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03typk fb:theater.play.lyricist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the lyricist for spamalot", 
    "id": 60
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.13_going_on_30 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2004-04-14"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02vzpb fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was 13 going on 30 released", 
    "id": 61
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.capn_crunch . FILTER (?x1 != fb:en.capn_crunch) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.capn_crunch))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0l71b . FILTER (?x1 != fb:m.0l71b) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was cap'n crunch introduced", 
    "id": 62
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.alan_butcher fb:cricket.cricket_coach.current_team ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Zimbabwe national cricket team"
    ], 
    "targetFormula": "(!fb:cricket.cricket_coach.current_team fb:en.alan_butcher)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07hjmq fb:cricket.cricket_coach.current_team ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what team does alan butcher coach", 
    "id": 63
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.south_america fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "17840000"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.south_america)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06n3y fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is the area of south america", 
    "id": 64
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.vancouver_british_columbia fb:travel.travel_destination.accommodation ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sheraton Wall Centre", 
      "Budget Inn Patricia Hotel", 
      "Ramada Inns and Suites Downtown Vancouver", 
      "The Dominion Hotel", 
      "Century Plaza Hotel Vancouver", 
      "Comfort Inn Downtown Vancouver", 
      "Sylvia Hotel", 
      "Empire Landmark Hotel", 
      "Hotel Vancouver", 
      "The Fairmont Waterfront", 
      "Metropolitan Hotel Vancouver", 
      "Opus Hotel", 
      "Marriott Vancouver Pinnacle Downtown", 
      "St. Regis Hotel Vancouver"
    ], 
    "targetFormula": "(!fb:travel.travel_destination.accommodation fb:en.vancouver_british_columbia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.080h2 fb:travel.travel_destination.accommodation ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some hotels in vancouver", 
    "id": 65
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mike_babcock fb:ice_hockey.hockey_coach.current_team ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Detroit Red Wings"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_coach.current_team fb:en.mike_babcock)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02_0bm fb:ice_hockey.hockey_coach.current_team ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what team does mike babcock coach", 
    "id": 66
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "PG-13 (USA)"
    ], 
    "targetFormula": "(!fb:film.film.rating fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the nutty professor rated", 
    "id": 67
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.gatorade . FILTER (?x1 != fb:en.gatorade) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.gatorade))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01ghgx . FILTER (?x1 != fb:m.01ghgx) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when gatorade was first developed", 
    "id": 68
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.san_diego_zoo fb:zoos.zoo.opened ?x1 } LIMIT 9999", 
    "result": [
      "1915"
    ], 
    "targetFormula": "(!fb:zoos.zoo.opened fb:en.san_diego_zoo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01v05h fb:zoos.zoo.opened ?x1 } LIMIT 9999", 
    "utterance": "when was the san diego zoo opened", 
    "id": 69
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.lithium_battery fb:engineering.battery_cell_type.rechargeable ?x1 } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(!fb:engineering.battery_cell_type.rechargeable fb:en.lithium_battery)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06vyjc fb:engineering.battery_cell_type.rechargeable ?x1 } LIMIT 9999", 
    "utterance": "are lithium batteries rechargeable", 
    "id": 70
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.belgium fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.belgium) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "9153489", 
      "10895785", 
      "10547958", 
      "10332785", 
      "10286570", 
      "10251250", 
      "10226419", 
      "10203008", 
      "10115603", 
      "10181245", 
      "10156637", 
      "10136811", 
      "10084475", 
      "10045158", 
      "10004486", 
      "9967379", 
      "9937697", 
      "9901664", 
      "9870234", 
      "9861823", 
      "9858308", 
      "9855372", 
      "9855520", 
      "9839534", 
      "9858982", 
      "9859242", 
      "9848382", 
      "9830358", 
      "9818227", 
      "9800700", 
      "9772419", 
      "9741720", 
      "9673162", 
      "9655549", 
      "9646032", 
      "9618756", 
      "9580991", 
      "9527807", 
      "9220578", 
      "9463667", 
      "9378113", 
      "9289770", 
      "9183948", 
      "10376133", 
      "10421137", 
      "10478617", 
      "10625700", 
      "10709973", 
      "10796493", 
      "11008000", 
      "11041266", 
      "9856303", 
      "9711115"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.belgium))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0154j fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.0154j) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population of belgium", 
    "id": 71
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:en.big_daddy . FILTER (?x2 != fb:en.big_daddy) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.big_daddy)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:m.02hxhz . FILTER (?x2 != fb:m.02hxhz) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many awards did big daddy win", 
    "id": 72
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:baseball.baseball_historical_roster_position.player fb:en.babe_ruth . FILTER (?x1 != fb:en.babe_ruth) . ?x1 fb:baseball.baseball_historical_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "New York Yankees", 
      "Boston Red Sox", 
      "Atlanta Braves"
    ], 
    "targetFormula": "(!fb:baseball.baseball_historical_roster_position.team ((lambda x (fb:baseball.baseball_historical_roster_position.player (var x))) fb:en.babe_ruth))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:baseball.baseball_historical_roster_position.player fb:m.01bss . FILTER (?x1 != fb:m.01bss) . ?x1 fb:baseball.baseball_historical_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what teams did babe ruth play for", 
    "id": 73
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.the_nutty_professor_1996 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "1996-06-27"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0d87hc fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was nutty professor released", 
    "id": 74
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.millennium_force fb:amusement_parks.ride.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Intamin"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.manufacturer fb:en.millennium_force)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.055l0l fb:amusement_parks.ride.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who manufactured millennium force", 
    "id": 75
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.buddhism fb:religion.religion.number_of_adherents ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "376000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number (!fb:religion.religion.number_of_adherents fb:en.buddhism))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.092bf5 fb:religion.religion.number_of_adherents ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "how many people practice buddhism", 
    "id": 76
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.omarion_grandberry fb:music.group_member.instruments_played ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Guitar", 
      "Piano"
    ], 
    "targetFormula": "(!fb:music.group_member.instruments_played fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019g40 fb:music.group_member.instruments_played ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what instruments did omarion play", 
    "id": 77
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.nbc fb:broadcast.tv_station_owner.tv_stations ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:broadcast.tv_station_owner.tv_stations fb:en.nbc))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.05gnf fb:broadcast.tv_station_owner.tv_stations ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv channels does nbc own", 
    "id": 78
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.mountain_dew . FILTER (?x1 != fb:en.mountain_dew) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.mountain_dew))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0dp88 . FILTER (?x1 != fb:m.0dp88) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was diet mountain dew created", 
    "id": 79
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mountain_bike fb:bicycles.bicycle_type.bicycle_models_of_this_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Kona Cinder Cone", 
      "S-Works Epic Carbon 29 XTR (2013)", 
      "Specialized Stumpjumper", 
      "2003 Rocky Mountain Elevation"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_type.bicycle_models_of_this_type fb:en.mountain_bike)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0_mjp fb:bicycles.bicycle_type.bicycle_models_of_this_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some mountain bike models", 
    "id": 80
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.rings_of_saturn fb:astronomy.astronomical_discovery.discoverer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Christiaan Huygens"
    ], 
    "targetFormula": "(!fb:astronomy.astronomical_discovery.discoverer fb:en.rings_of_saturn)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03w2n3 fb:astronomy.astronomical_discovery.discoverer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who discovered the rings of saturn", 
    "id": 81
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_home_depot fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Bernard Marcus", 
      "Arthur Blank"
    ], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.the_home_depot)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01zj1t fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are the founders of home depot", 
    "id": 82
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.chow_chow fb:biology.animal_breed.place_of_origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "China"
    ], 
    "targetFormula": "(!fb:biology.animal_breed.place_of_origin fb:en.chow_chow)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0c40t fb:biology.animal_breed.place_of_origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where does the chow chow originate", 
    "id": 83
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2009\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2010\"^^xsd:datetime)) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 . FILTER (?x1 != \"2009\"^^xsd:datetime) . fb:en.viacom fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:en.viacom) . ?x1 fb:measurement_unit.dated_money_value.amount ?x3 } LIMIT 9999", 
    "result": [
      "14625000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (and ((lambda x (fb:measurement_unit.dated_money_value.valid_date (var x))) (date 2009 -1 -1)) ((lambda x (!fb:business.business_operation.revenue (var x))) fb:en.viacom)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2009\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2010\"^^xsd:datetime)) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 . FILTER (?x1 != \"2009\"^^xsd:datetime) . fb:m.018_q8 fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:m.018_q8) . ?x1 fb:measurement_unit.dated_money_value.amount ?x3 } LIMIT 9999", 
    "utterance": "what was viacom 's revenue in 2009", 
    "id": 84
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:location.location_symbol_relationship.administrative_division fb:en.alaska . FILTER (?x1 != fb:en.alaska) . ?x1 fb:location.location_symbol_relationship.Kind_of_symbol fb:en.state_flower . FILTER (?x1 != fb:en.state_flower) . ?x1 fb:location.location_symbol_relationship.symbol ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Forget-me-not"
    ], 
    "targetFormula": "(!fb:location.location_symbol_relationship.symbol (and ((lambda x (fb:location.location_symbol_relationship.administrative_division (var x))) fb:en.alaska) ((lambda x (fb:location.location_symbol_relationship.Kind_of_symbol (var x))) fb:en.state_flower)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:location.location_symbol_relationship.administrative_division fb:m.0hjy . FILTER (?x1 != fb:m.0hjy) . ?x1 fb:location.location_symbol_relationship.Kind_of_symbol fb:m.04627gn . FILTER (?x1 != fb:m.04627gn) . ?x1 fb:location.location_symbol_relationship.symbol ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what is the state flower of alaska", 
    "id": 85
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.richardwagner fb:opera.librettist.libretti ?x1 } } } LIMIT 9999", 
    "result": [
      "15"
    ], 
    "targetFormula": "(count (!fb:opera.librettist.libretti fb:en.richardwagner))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06c44 fb:opera.librettist.libretti ?x1 } } } LIMIT 9999", 
    "utterance": "how many libretti did wagner write", 
    "id": 86
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.turbojet fb:engineering.engine_category.engines ?x1 } } } LIMIT 9999", 
    "result": [
      "94"
    ], 
    "targetFormula": "(count (!fb:engineering.engine_category.engines fb:en.turbojet))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.018vbw fb:engineering.engine_category.engines ?x1 } } } LIMIT 9999", 
    "utterance": "how many turbojet engines are there", 
    "id": 87
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.frys_turkish_delight fb:food.candy_bar.sold_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ireland", 
      "United Kingdom", 
      "Australia", 
      "New Zealand"
    ], 
    "targetFormula": "(!fb:food.candy_bar.sold_in fb:en.frys_turkish_delight)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cyjkg fb:food.candy_bar.sold_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is fry_s turkish delight sold", 
    "id": 88
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:baseball.baseball_historical_managerial_position.manager fb:en.joe_torre . FILTER (?x2 != fb:en.joe_torre) . ?x2 fb:baseball.baseball_historical_managerial_position.team ?x1 } } } LIMIT 9999", 
    "result": [
      "5"
    ], 
    "targetFormula": "(count (!fb:baseball.baseball_historical_managerial_position.team ((lambda x (fb:baseball.baseball_historical_managerial_position.manager (var x))) fb:en.joe_torre)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:baseball.baseball_historical_managerial_position.manager fb:m.02vlpg . FILTER (?x2 != fb:m.02vlpg) . ?x2 fb:baseball.baseball_historical_managerial_position.team ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams did joe torre manage", 
    "id": 89
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mike_schmidt fb:baseball.baseball_player.position_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Third baseman"
    ], 
    "targetFormula": "(!fb:baseball.baseball_player.position_s fb:en.mike_schmidt)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01nlch fb:baseball.baseball_player.position_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what position did mike schmidt play", 
    "id": 90
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.philosophers_stone fb:fictional_universe.fictional_object.created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Nicholas Flamel"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_object.created_by fb:en.philosophers_stone)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.013tdq fb:fictional_universe.fictional_object.created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who created the philosopher_s stone", 
    "id": 91
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0b6_sx fb:amusement_parks.ride.drop ?x1 } LIMIT 9999", 
    "result": [
      "61"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.drop fb:m.0b6_sx)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0b6_sx fb:amusement_parks.ride.drop ?x1 } LIMIT 9999", 
    "utterance": "what is the highest drop on stealth", 
    "id": 92
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.employment_tenure.title fb:en.news_presenter . FILTER (?x1 != fb:en.news_presenter) . ?x1 fb:business.employment_tenure.company fb:en.abc_news_washington_dc . FILTER (?x1 != fb:en.abc_news_washington_dc) . ?x1 fb:business.employment_tenure.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Steve Bell", 
      "Paula Zahn"
    ], 
    "targetFormula": "(!fb:business.employment_tenure.person (and ((lambda x (fb:business.employment_tenure.title (var x))) fb:en.news_presenter) ((lambda x (fb:business.employment_tenure.company (var x))) fb:en.abc_news_washington_dc)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.employment_tenure.title fb:m.014l7h . FILTER (?x1 != fb:m.014l7h) . ?x1 fb:business.employment_tenure.company fb:m.01v3sw . FILTER (?x1 != fb:m.01v3sw) . ?x1 fb:business.employment_tenure.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the newscaster on abc 6 news", 
    "id": 93
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.nittany_mall fb:business.shopping_center.store ?x1 } } } LIMIT 9999", 
    "result": [
      "25"
    ], 
    "targetFormula": "(count (!fb:business.shopping_center.store fb:en.nittany_mall))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0g68bn fb:business.shopping_center.store ?x1 } } } LIMIT 9999", 
    "utterance": "how many stores are in nittany mall", 
    "id": 94
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.hasbro fb:games.game_publisher.games_published ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:games.game_publisher.games_published fb:en.hasbro))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0hpt3 fb:games.game_publisher.games_published ?x1 } } } LIMIT 9999", 
    "utterance": "how many games has hasbro published", 
    "id": 95
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.order_of_the_dragon fb:royalty.order_of_chivalry.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sigismund, Holy Roman Emperor"
    ], 
    "targetFormula": "(!fb:royalty.order_of_chivalry.founders fb:en.order_of_the_dragon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02dhd3 fb:royalty.order_of_chivalry.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who founded the order of the dragon", 
    "id": 96
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.thrilla_in_manila fb:boxing.boxing_match.round_match_ended ?x1 } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(!fb:boxing.boxing_match.round_match_ended fb:en.thrilla_in_manila)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.011xpt fb:boxing.boxing_match.round_match_ended ?x1 } LIMIT 9999", 
    "utterance": "what round did thrilla in manila end", 
    "id": 97
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.rome fb:travel.travel_destination.tourist_attractions ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Catacombs of Rome", 
      "Raphael Rooms", 
      "San Nicola in Carcere", 
      "Quirinal Palace", 
      "Fontana delle Naiadi", 
      "Capitoline Hill", 
      "Palazzo Chigi", 
      "St. Peter's Basilica", 
      "Villa d'Este", 
      "Churches of Rome", 
      "Spanish Steps", 
      "Trevi Fountain", 
      "Hadrian's Villa", 
      "Galleria Borghese", 
      "Palazzo Spada", 
      "Castel Sant'Angelo", 
      "Basilica di Santa Maria Maggiore", 
      "Palazzo Farnese", 
      "Domus Aurea", 
      "Piazza del Popolo", 
      "Colosseum", 
      "Pantheon", 
      "Archbasilica of St. John Lateran", 
      "Santa Maria sopra Minerva", 
      "Circus Maximus", 
      "Apostolic Palace", 
      "Appian Way", 
      "Bocca della Verit\u00e0", 
      "Roman Forum", 
      "Tabularium", 
      "Pyramid of Cestius", 
      "Seven Pilgrim Churches of Rome", 
      "Baths of Caracalla", 
      "Rome Observatory", 
      "Palazzo Barberini", 
      "Via Veneto", 
      "Piazza Navona", 
      "Palazzo Venezia", 
      "Piazza Venezia"
    ], 
    "targetFormula": "(!fb:travel.travel_destination.tourist_attractions fb:en.rome)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06c62 fb:travel.travel_destination.tourist_attractions ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what tourist attractions are in rome", 
    "id": 98
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_amazing_spider-man fb:comic_books.comic_book_series.publisher ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Marvel Comics"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_series.publisher fb:en.the_amazing_spider-man)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0l27 fb:comic_books.comic_book_series.publisher ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who published the amazing spider-man", 
    "id": 99
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.thailand fb:military.military_combatant.armed_forces ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Royal Thai Navy", 
      "Royal Thai Armed Forces", 
      "Royal Thai Army", 
      "Royal Thai Air Force"
    ], 
    "targetFormula": "(!fb:military.military_combatant.armed_forces fb:en.thailand)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07f1x fb:military.military_combatant.armed_forces ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what armed forces does thailand have", 
    "id": 100
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlies_angels fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Drew Barrymore", 
      "Leonard Goldberg", 
      "Nancy Juvonen"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01y9jr fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was charlie_s angels produced by", 
    "id": 101
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.printing_press fb:law.invention.date_of_invention ?x1 } LIMIT 9999", 
    "result": [
      "1440"
    ], 
    "targetFormula": "(!fb:law.invention.date_of_invention fb:en.printing_press)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05sxt fb:law.invention.date_of_invention ?x1 } LIMIT 9999", 
    "utterance": "when was the printing press invented", 
    "id": 102
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.full_house fb:tv.tv_program.theme_song ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Everywhere You Look"
    ], 
    "targetFormula": "(!fb:tv.tv_program.theme_song fb:en.full_house)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0lqsy fb:tv.tv_program.theme_song ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the theme song of full house", 
    "id": 103
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ipod fb:business.product_line.includes_product_lines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "iPod touch", 
      "iPod classic", 
      "iPod shuffle", 
      "iPod nano", 
      "iPod mini"
    ], 
    "targetFormula": "(!fb:business.product_line.includes_product_lines fb:en.ipod)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0mcx2 fb:business.product_line.includes_product_lines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what product lines does ipod include", 
    "id": 104
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.glycine fb:biology.amino_acid.rna_codons ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:biology.amino_acid.rna_codons fb:en.glycine))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02kc008 fb:biology.amino_acid.rna_codons ?x1 } } } LIMIT 9999", 
    "utterance": "how many rna codons does glycine have", 
    "id": 105
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.nintendo fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:business.employment_tenure.person (!fb:business.employer.employees fb:en.nintendo)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.059wk fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "utterance": "how many employees does nintendo have", 
    "id": 106
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.kentucky fb:distilled_spirits.spirit_producing_region.distilleries ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Woodford Reserve", 
      "Angel's Envy"
    ], 
    "targetFormula": "(!fb:distilled_spirits.spirit_producing_region.distilleries fb:en.kentucky)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0498y fb:distilled_spirits.spirit_producing_region.distilleries ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what spirits are produced in kentucky", 
    "id": 107
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ashok_malhotra fb:cricket.cricket_bowler.pace ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Medium"
    ], 
    "targetFormula": "(!fb:cricket.cricket_bowler.pace fb:en.ashok_malhotra)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0b8z_d fb:cricket.cricket_bowler.pace ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is ashok malhotra's bowling pace", 
    "id": 108
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.new_york_yankees fb:sports.sports_team.founded ?x1 } LIMIT 9999", 
    "result": [
      "1901"
    ], 
    "targetFormula": "(!fb:sports.sports_team.founded fb:en.new_york_yankees)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cqt41 fb:sports.sports_team.founded ?x1 } LIMIT 9999", 
    "utterance": "what year were the ny yankees founded", 
    "id": 109
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.cattle fb:food.cheese_milk_source.cheeses ?x1 } } } LIMIT 9999", 
    "result": [
      "224"
    ], 
    "targetFormula": "(count (!fb:food.cheese_milk_source.cheeses fb:en.cattle))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01xq0k1 fb:food.cheese_milk_source.cheeses ?x1 } } } LIMIT 9999", 
    "utterance": "how many cow's milk cheeses are there", 
    "id": 110
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.spanish_peseta fb:finance.currency.countries_formerly_used ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Spain", 
      "Western Sahara", 
      "Andorra"
    ], 
    "targetFormula": "(!fb:finance.currency.countries_formerly_used fb:en.spanish_peseta)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.014z03 fb:finance.currency.countries_formerly_used ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was the peseta used as currency", 
    "id": 111
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.titanic_special_edition_dvd fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "1997-11-01"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dr_4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was the release date for titanic", 
    "id": 112
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.016f2t fb:music.artist.active_end ?x1 } LIMIT 9999", 
    "result": [
      "1991"
    ], 
    "targetFormula": "(!fb:music.artist.active_end fb:m.016f2t)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.016f2t fb:music.artist.active_end ?x1 } LIMIT 9999", 
    "utterance": "when did japan end as a musical group", 
    "id": 113
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.uk fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "GBP"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.uk)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01nv4h fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for uk currency", 
    "id": 114
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.wireds_gadget_lab_podcast_podcast_feed fb:broadcast.podcast_feed.average_media_length ?x1 } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(!fb:broadcast.podcast_feed.average_media_length fb:en.wireds_gadget_lab_podcast_podcast_feed)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0440vq9 fb:broadcast.podcast_feed.average_media_length ?x1 } LIMIT 9999", 
    "utterance": "how long is wired_s gadget lab podcast", 
    "id": 115
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.eclipse_500 fb:aviation.aircraft_model.wingspan ?x1 } LIMIT 9999", 
    "result": [
      "11.4"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_model.wingspan fb:en.eclipse_500)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05nzbx fb:aviation.aircraft_model.wingspan ?x1 } LIMIT 9999", 
    "utterance": "what is the wingspan of an eclipse 500", 
    "id": 116
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.seinfeld fb:tv.tv_program.seasons ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:tv.tv_program.seasons fb:en.seinfeld))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.072kp fb:tv.tv_program.seasons ?x1 } } } LIMIT 9999", 
    "utterance": "how many seasons of seinfeld are there", 
    "id": 117
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.macsoft_games fb:cvg.cvg_developer.games_developed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Civilization III", 
      "Max Payne", 
      "Halo: Combat Evolved", 
      "Clive Barker's Undying", 
      "Age of Empires III: The Asian Dynasties", 
      "Age of Empires III", 
      "Age of Empires III: The WarChiefs", 
      "Rise of Nations: Thrones and Patriots", 
      "Zoo Tycoon 2"
    ], 
    "targetFormula": "(!fb:cvg.cvg_developer.games_developed fb:en.macsoft_games)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.081swv fb:cvg.cvg_developer.games_developed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what games has macsoft games developed", 
    "id": 118
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.pride_and_prejudice fb:book.written_work.date_of_first_publication ?x1 } LIMIT 9999", 
    "result": [
      "1813-01-28"
    ], 
    "targetFormula": "(!fb:book.written_work.date_of_first_publication fb:en.pride_and_prejudice)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.060xy fb:book.written_work.date_of_first_publication ?x1 } LIMIT 9999", 
    "utterance": "when was pride and prejudice published", 
    "id": 119
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.panasonic_lumix_dmc_tz3 fb:digicams.digital_camera.weight ?x1 } LIMIT 9999", 
    "result": [
      "280"
    ], 
    "targetFormula": "(!fb:digicams.digital_camera.weight fb:en.panasonic_lumix_dmc_tz3)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03clq72 fb:digicams.digital_camera.weight ?x1 } LIMIT 9999", 
    "utterance": "how heavy is a panasonic lumix dmc-tz3", 
    "id": 120
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.disneyland fb:amusement_parks.park.areas ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Adventureland", 
      "Critter Country", 
      "Frontierland", 
      "Main Street, U.S.A.", 
      "Tomorrowland", 
      "New Orleans Square", 
      "Mickey's Toontown", 
      "Fantasyland"
    ], 
    "targetFormula": "(!fb:amusement_parks.park.areas fb:en.disneyland)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02fzs fb:amusement_parks.park.areas ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the theme areas at disneyland", 
    "id": 121
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.easy_aces fb:broadcast.content.production_end ?x1 } LIMIT 9999", 
    "result": [
      "1945"
    ], 
    "targetFormula": "(!fb:broadcast.content.production_end fb:en.easy_aces)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cp64s fb:broadcast.content.production_end ?x1 } LIMIT 9999", 
    "utterance": "when did easy aces stop being produced", 
    "id": 122
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.produced_by fb:en.tim_burton } } } LIMIT 9999", 
    "result": [
      "15"
    ], 
    "targetFormula": "(count (fb:film.film.produced_by fb:en.tim_burton))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.produced_by fb:m.07rd7 } } } LIMIT 9999", 
    "utterance": "how many films has tim burton produced", 
    "id": 123
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.spanish fb:language.human_language.countries_spoken_in ?x1 } } } LIMIT 9999", 
    "result": [
      "33"
    ], 
    "targetFormula": "(count (!fb:language.human_language.countries_spoken_in fb:en.spanish))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06nm1 fb:language.human_language.countries_spoken_in ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries is spanish spoken in", 
    "id": 124
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02967 fb:music.album.release_date ?x1 } LIMIT 9999", 
    "result": [
      "1977-10-28"
    ], 
    "targetFormula": "(!fb:music.album.release_date fb:m.02967)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02967 fb:music.album.release_date ?x1 } LIMIT 9999", 
    "utterance": "what year was the album decade released", 
    "id": 125
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:cvg.game_performance.game fb:en.super_mario_bros . FILTER (?x1 != fb:en.super_mario_bros) . ?x1 fb:cvg.game_performance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Mario", 
      "Princess Peach", 
      "King Koopa", 
      "Luigi"
    ], 
    "targetFormula": "(!fb:cvg.game_performance.character ((lambda x (fb:cvg.game_performance.game (var x))) fb:en.super_mario_bros))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:cvg.game_performance.game fb:m.0kypr . FILTER (?x1 != fb:m.0kypr) . ?x1 fb:cvg.game_performance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what characters are in super mario bros", 
    "id": 126
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:en.lung_cancer . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Altamiro Carrilho", 
      "Adam C. Sambora", 
      "Jim Bacon", 
      "Jorge Bontemps", 
      "Paul Mills", 
      "Traudl Junge", 
      "Frank Worsley", 
      "Janet Alcoriza", 
      "Ellis Haizlip", 
      "Ruth Jessen", 
      "Wolf Szmuness", 
      "Tony Scornavacca", 
      "Alan Jay Lerner", 
      "Donna Summer", 
      "Sarah Vaughan", 
      "Eddie Rabbitt", 
      "Ike Quebec", 
      "James Tenney", 
      "Andreas Katsulas", 
      "Dmitri Shostakovich", 
      "Alan Rubin", 
      "Constantine Papadakis", 
      "Floyd Cramer", 
      "Jacob Druckman", 
      "Paul Newman", 
      "Dick Katz", 
      "Camacho Costa", 
      "Jean Simmons", 
      "Robert Taylor", 
      "Silvana Mangano", 
      "Enrico Maria Salerno", 
      "Mallory Horne", 
      "George Harrison", 
      "Harry Carey", 
      "Victor Argo", 
      "Don Heck", 
      "Feroz Khan", 
      "Gary Cooper", 
      "John G. Fuller", 
      "Andrei Tarkovsky", 
      "Charlie Ventura", 
      "Gilbert \"Bibi\" Rov\u00e8re", 
      "Sammy Barr", 
      "John Archer", 
      "Nacho Mart\u00ednez", 
      "Monica Bleibtreu", 
      "Peter Orlovsky", 
      "Eleanor Keaton", 
      "Lautaro Mur\u00faa", 
      "Billy McCaughey", 
      "Vicki Hearne", 
      "Mike Pratt", 
      "Niall Andrews", 
      "Carlos Lucena", 
      "Edward K\u0142osi\u0144ski", 
      "Edwin \"Bud\" Shrake", 
      "Eiji Go", 
      "Antoinette Lupino", 
      "Paul Fox", 
      "Hideji Otaki", 
      "Joan Bartlett", 
      "Dave Martin", 
      "Pierre Galante", 
      "Roger Treat", 
      "Trudy Marshall", 
      "Leah Rabin", 
      "Halvar Bj\u00f6rk", 
      "Dawn Evelyn Paris", 
      "Patricia Haines", 
      "Angelo Ruggiero", 
      "Mike Todd, Jr.", 
      "Joe Paterno", 
      "Kim Perrot", 
      "Roy Conrad", 
      "Jessica Mitford", 
      "Savenaca Siwatibau", 
      "David Ackles", 
      "Bill Raisch", 
      "Refaat Al-Gammal", 
      "Ted Noose", 
      "John Louis Mansi", 
      "Jack Griffin", 
      "Andrea Heinemann Simon", 
      "Ron Carey", 
      "Ra\u00fal Alfons\u00edn", 
      "Percy Joseph Carrey", 
      "Twila Shively", 
      "Ibrahim Rugova", 
      "Piera Aulagnier", 
      "Tad Szulc", 
      "Robert W. Peterson", 
      "Garry Shider", 
      "Hugo Batalla", 
      "Fritz Richmond", 
      "Jacques Sternberg", 
      "Eugen Jan Boissevain", 
      "Dan Iosif", 
      "Sanji Hase", 
      "Leslie Irvin", 
      "William B. Harrison", 
      "Elaine de Kooning", 
      "Alastair Sim", 
      "Cantinflas", 
      "Lynn Solotaroff", 
      "Masahiko Kimura", 
      "William A. Egan", 
      "Duncan Renaldo", 
      "Sol Kaplan", 
      "Silvia Monfort", 
      "Clifford Johnson", 
      "Fred Trueman", 
      "Henry Hampton", 
      "Harmonica Frank Floyd", 
      "Stanley G. Weinbaum", 
      "Sylvia Kristel", 
      "Gregory Isaacs", 
      "Sharon Mae Disney", 
      "Tony Young", 
      "Paul F. Harron Jr.", 
      "Brianne Murphy", 
      "Bruno Lawrence", 
      "David Shepherd", 
      "Jean Dean", 
      "Thomas Chastain", 
      "Roger Johnson", 
      "Carmen Silvera", 
      "Jim Ameche", 
      "Mikhail Kozakov", 
      "Ann Rork", 
      "Eugene Landy", 
      "W. D. Snodgrass", 
      "Leonard Schneider", 
      "Mike Francis", 
      "Dana Reeve", 
      "Jean-Paul Roussillon", 
      "Nazia Hassan", 
      "Joel White", 
      "Susan Cullen-Ward", 
      "Richard Joseph", 
      "Arthur Schiff", 
      "Frank Buck", 
      "Masato Yamanouchi", 
      "Stanley Sandler", 
      "Nancy Everett", 
      "David Craig", 
      "Harlan Holleman", 
      "Bob Murphy", 
      "Robert T. Smith", 
      "H\u00e9ctor Garza", 
      "Tony Mammarella", 
      "Christoph Schlingensief", 
      "Edgar Small", 
      "Helvio Soto", 
      "Donna Freberg", 
      "William Driskill", 
      "Barbara Holland", 
      "Edward Brandt, Jr.", 
      "Claude Monet", 
      "Robert Addie", 
      "Edmund Sylvers", 
      "Eddie Kendricks", 
      "Klaus Wennemann", 
      "Ustad Vilayat Khan", 
      "Gene McFadden", 
      "Glenn Hughes", 
      "Suddha Dibyaratana", 
      "Bobby Byrd", 
      "Ral Donner", 
      "Ray Milland", 
      "Robert Mitchum", 
      "Edward R. Murrow", 
      "Lorenzo Music", 
      "Porter Wagoner", 
      "Pete Bardens", 
      "Lisa Richette", 
      "Sherman Hemsley", 
      "Moe Howard", 
      "Desi Arnaz", 
      "John S. Detlie", 
      "Charlotte Zwerin", 
      "Harry Thompson", 
      "E. Maurice Adler", 
      "Elizabeth Rogers", 
      "Mary McCarthy", 
      "Fritz Von Erich", 
      "Kathleen Freeman", 
      "Clarence \"Gatemouth\" Brown", 
      "K. T. Stevens", 
      "William Travilla", 
      "Ed Gilbert", 
      "Leah Goldberg", 
      "Bernard Rapp", 
      "Rosemary Clooney", 
      "Oriana Fallaci", 
      "E. Nesbit", 
      "Vincent Schiavelli", 
      "Alistair Cooke", 
      "Betty Grable", 
      "Lisa Kirk", 
      "Adam Ulam", 
      "Glenn Strange", 
      "Denver Pyle", 
      "Hirotaka Suzuoki", 
      "Glenn Corbett", 
      "John Heath-Stubbs", 
      "Guy Davenport", 
      "Ronnie Briggs", 
      "Doug McClure", 
      "David Wayne", 
      "Jennifer Paterson", 
      "David McLean", 
      "Kathryn Joosten", 
      "Walt Disney", 
      "Stanley Ralph Ross", 
      "Buster Keaton", 
      "Ed Brinkman", 
      "Edmund Lowe", 
      "Yul Brynner", 
      "Juan Rulfo", 
      "Dilys Laye", 
      "Mark Bernes", 
      "Jonathan Latimer", 
      "Mike Kellin", 
      "James Whitmore", 
      "Luis Alberto Spinetta", 
      "Sigrid Valdis", 
      "Edgar Dearing", 
      "Marjorie Main", 
      "Chuck Connors", 
      "Pepper Adams", 
      "Kyoka Izumi", 
      "Tom Drake", 
      "Paul A. Rothchild", 
      "Lloyd Nolan", 
      "Stephen Jay Gould", 
      "John Hoyt", 
      "George Grizzard", 
      "Duke Ellington", 
      "Olan Soule", 
      "General Norman Johnson", 
      "Don Byas", 
      "Scatman John", 
      "June Pointer", 
      "Nat King Cole", 
      "E. G. Marshall", 
      "Irvin Kershner", 
      "James Brown", 
      "Russell Hunter", 
      "Harry Guardino", 
      "Maidie Norman", 
      "John J. Yeosock", 
      "Georg Ludwig Ritter von Trapp", 
      "Sophie Tucker", 
      "Richard Wawro", 
      "Bill Cullen", 
      "George Melly", 
      "Frank Gorshin", 
      "Robert Ryan", 
      "Millard Mitchell", 
      "Harvey James", 
      "Albert Collins", 
      "Alan North", 
      "Carrie Hamilton", 
      "Kathleen Ankers", 
      "Harald Heide-Steen Jr.", 
      "Frank Yaconelli", 
      "Sandra Br\u00e9a", 
      "Eric Gale", 
      "Pat Hare", 
      "Gale Gordon", 
      "Thea King", 
      "Wild Bill Elliott", 
      "Pedro Armend\u00e1riz, Jr.", 
      "Lionel Stander", 
      "Rudy Pompilli", 
      "Charlie Rouse", 
      "Lou Peraino", 
      "Vassar Clements", 
      "Hank Thompson", 
      "Camu Tao", 
      "Topi Sorsakoski", 
      "Shaike Ophir", 
      "Bill Drake", 
      "Lee Cheong-jun", 
      "Peter Donaldson", 
      "Arno\u0161t Lustig", 
      "Arthur S. Link", 
      "Michael Gibson", 
      "Haydain Neale", 
      "Leon Niemczyk", 
      "Joan Banks", 
      "Nicholas C. Forstmann", 
      "Hughie Green", 
      "Jay Berwanger", 
      "Luke Askew", 
      "Ann Miller", 
      "Gary Morton", 
      "Lee Patterson", 
      "Philip Carey", 
      "Raul Hilberg", 
      "Bonita Granville", 
      "Ross Thomas", 
      "Signe Hasso", 
      "Siobh\u00e1n McKenna", 
      "Le\u00f3n Febres Cordero", 
      "Fernandel", 
      "Warner Troyer", 
      "Morihiro Higashikuni", 
      "Kiel Martin", 
      "Larry Keith", 
      "Bob Chandler", 
      "Doris Silverton", 
      "Francis Chichester", 
      "Allen Carr", 
      "Edward A. Carter, Jr.", 
      "Skip Spence", 
      "Morton Downey, Jr.", 
      "Arnold Moss", 
      "Nachi Nozawa", 
      "Joel Roux-Neville", 
      "Emilie Reizes", 
      "Jorge Mart\u00ednez de Hoyos", 
      "Ivory Joe Hunter", 
      "Bruce Hart", 
      "Frederick Coffin", 
      "Thomas Williams", 
      "Felice Orlandi", 
      "Roger Grimsby", 
      "Fran\u00e7oise Dior", 
      "Ernst Happel", 
      "Heather Hughes", 
      "Joey Rourke", 
      "William F. Roemer, Jr.", 
      "Motosuke Takahashi", 
      "Steve Parker", 
      "Nicholas Civella", 
      "Szeto Wah", 
      "Stick McGhee", 
      "Evelyn Knight", 
      "Priscilla Bowman", 
      "Ruby Starr", 
      "Bob Gaddy", 
      "Willie Denson", 
      "Vincent Price", 
      "Roddy McDowall", 
      "Raymond Carver", 
      "Irving Kristol", 
      "Pat Nixon", 
      "Robert Preston", 
      "Kim Manners", 
      "Leo Penn", 
      "Macdonald Carey", 
      "Franklin J. Schaffner", 
      "Pinto Colvig", 
      "John Updike", 
      "Gary Merrill", 
      "Noam Pitlik", 
      "Merrill Connally", 
      "Robert Lewin", 
      "Edward Albert", 
      "Virginia Gregg", 
      "Cameron Mitchell", 
      "Raymond F. Lederer", 
      "Vito Scotti", 
      "Johnny Seven", 
      "Anthony Burgess", 
      "Paul Carr", 
      "John Junkin", 
      "Jason Robards", 
      "Freddy Fender", 
      "Nancy Walker", 
      "Dennis Main Wilson", 
      "Brian Piccolo", 
      "Osamu Dezaki", 
      "Tris Coffin", 
      "Terence Rigby", 
      "Gene O'Donnell", 
      "Franchot Tone", 
      "Sandy West", 
      "Alan King", 
      "Jimmy Carl Black", 
      "Forrest Tucker", 
      "Otto Hoffman", 
      "Bruce Cabot", 
      "Gale Robbins", 
      "Lew Burdette", 
      "Susan Oliver", 
      "Carlo Little", 
      "Lois Nettleton", 
      "Lloyd Haynes", 
      "Peter Blythe", 
      "Jo Ramos", 
      "Adora Dupree", 
      "Dean Martin", 
      "Frank Loesser", 
      "Melina Mercouri", 
      "Patricia Neal", 
      "Jimmy Dorsey", 
      "Andrew Hill", 
      "Don Knotts", 
      "Cyril Delevanti", 
      "Georg Danzer", 
      "Lou Rawls", 
      "Richard Van Allan", 
      "Barney Martin", 
      "Michael Greer", 
      "Mac Mohan", 
      "Otto Frank", 
      "Muhammad Ali Jinnah", 
      "William Haines", 
      "\u0130smail Cem \u0130pek\u00e7i", 
      "Roscoe Ates", 
      "Paul Outerbridge", 
      "Carlo Mazzarella", 
      "Herbert Rawlinson", 
      "William Reibert Mapother, Sr.", 
      "Sylvia Ruzga", 
      "W\u0142adys\u0142aw Gomu\u0142ka", 
      "Stubby Kaye", 
      "Paulo Autran", 
      "Frederick Kerr", 
      "Robert Calhoun", 
      "Catherine Seipp", 
      "Lamar Williams", 
      "Hideko Takamine", 
      "Frank Tarloff", 
      "Kenny Rankin", 
      "Camar\u00f3n de la Isla", 
      "Doris Betts", 
      "Relus ter Beek", 
      "Paul Zindel", 
      "Frank Chirkinian", 
      "Ahmed Zaki", 
      "Selma Diamond", 
      "Peter Fernandez", 
      "Turgut \u00d6zatay", 
      "Penne Hackforth-Jones", 
      "Charles Hayes", 
      "Samuel Ray Delany", 
      "Edward Mulhare", 
      "Thomas F Gilbert", 
      "Nolan Miller", 
      "William Talman", 
      "Carl Oglesby", 
      "James Nabrit", 
      "Pearl S. Buck", 
      "Roger Miller", 
      "Erskine Caldwell", 
      "Herbert Muschamp", 
      "William Mulloy", 
      "Gloria Shayne Baker", 
      "Albert Band", 
      "Harry Hay", 
      "Gypsy Rose Lee", 
      "Louis L'Amour", 
      "Reg Presley", 
      "Herb Caen", 
      "Thomas Hoving", 
      "Graciliano Ramos", 
      "Nancy Marchand", 
      "Johnny Warren", 
      "Jean-Roger Caussimon", 
      "Gary Crosby", 
      "John McIntire", 
      "Norman Shumway", 
      "David Martin", 
      "Michael Long", 
      "Carrie Nye", 
      "Reuben lasker", 
      "Ray Harford", 
      "Justin Hinds", 
      "Hideo Murota", 
      "Howard Martin Temin", 
      "Barry Unsworth", 
      "Louis Quinn", 
      "Woody Strode", 
      "Eileen Heckart", 
      "Don Stewart", 
      "Jacques Vilfrid", 
      "Mike Marshall", 
      "Stephen Ambrose", 
      "Bj\u00f6rn Afzelius", 
      "Roger Wendt", 
      "Jim Green", 
      "Marvin Worth", 
      "Eva Sophia M Gervais", 
      "Hal March", 
      "Walt Grealis", 
      "Bobby Astyr", 
      "Lois Andrews", 
      "Jesse Owens", 
      "Vida Jerman", 
      "Harry Tenbrook", 
      "Aleksandr Abdulov", 
      "Nanami Katsuno", 
      "Ted Manson", 
      "Robert Devoti", 
      "R. Edward Lopez", 
      "Leo Villa", 
      "Joe Pyne", 
      "Bobby Scott", 
      "George Deem", 
      "Tran Thien Thanh", 
      "Zeppo Marx", 
      "Jim Finks", 
      "Neil Aspinall", 
      "Clinton Howard Swindle", 
      "Phillip Coolidge", 
      "Kazuko Imai", 
      "Herbert Gunn", 
      "Harald Leipnitz", 
      "Tommy Makem", 
      "Julius Wechter", 
      "Phil Dusenberry", 
      "John Walton Curley", 
      "Walter Giller", 
      "Julian Soshnick", 
      "John N. Dalton", 
      "Millard Lampell", 
      "William E. McAnulty, Jr.", 
      "Jesse J. McCrary, Jr.", 
      "Jacobo Majluta Azar", 
      "Alfred Sandor", 
      "Anna Langford", 
      "Robert Mardian", 
      "Tim Curry", 
      "John Grenier", 
      "John Daido Loori", 
      "Paul Rogers", 
      "Alex Grass", 
      "Corneliu Coposu", 
      "Chen Ding-nan", 
      "Addison T. Smith", 
      "Vincent J. Fuller", 
      "John K. Eggers", 
      "Hugo Stenbeck Jr.", 
      "Ron Lancaster", 
      "Alix Talton", 
      "Nicholas Saunders", 
      "Jerry Mays", 
      "Sabri Godo", 
      "Mary Louise Smith", 
      "John Marshall", 
      "Franklin Delano Roosevelt, Jr.", 
      "Benay Venuta", 
      "Roy Rosenzweig", 
      "Claudia Tate", 
      "John Leonard", 
      "Ron Leavitt", 
      "Richard Kleindienst", 
      "David Brudnoy", 
      "Harold Cardinal", 
      "Thomas Samuel Kuhn", 
      "Endang Rahayu Sedyaningsih", 
      "George A. Economou", 
      "Jim Clench", 
      "Cirio H. Santiago", 
      "Earl Hindman", 
      "Sue Randall", 
      "Jean Bouise", 
      "Lincoln Kilpatrick", 
      "Kam Fong Chun", 
      "Dale Robertson", 
      "Phyllis Hill", 
      "Chad Everett", 
      "Carl Betz", 
      "Dorothy Hansine Andersen", 
      "Wilfy Rebimbus", 
      "Bull Moose Jackson", 
      "Chrisye", 
      "Leroy Jenkins", 
      "Warren Vanders", 
      "Ch\u00f4ko Iida", 
      "Scatman Crothers", 
      "H. Emory Widener, Jr.", 
      "Michael Hart", 
      "Richard Rougier", 
      "John Boylan", 
      "Franco Castellano", 
      "Frances Goodrich", 
      "Wee Chong Jin", 
      "Henry L. Yelverton", 
      "Keith Charles", 
      "Gertrude Baniszewski", 
      "Jimmie F. Skaggs", 
      "Austin Hayes", 
      "Claire Lee Chennault", 
      "Angus Calder", 
      "Carole Cole", 
      "Timothy S. Mayer", 
      "Fritz Houtermans", 
      "Horst Jankowski", 
      "Dick Glasser", 
      "Anthony Boucher", 
      "Richard Dimbleby", 
      "Pat Phoenix", 
      "Charlie Byrd", 
      "Y\u014d Inoue", 
      "Billie Lou Watt", 
      "Peter Matz", 
      "Bobby Robson", 
      "James Blish", 
      "Phil Goldstone", 
      "Jennifer Howard", 
      "Sheila Ryan", 
      "Gerard Smith", 
      "Steven Pimlott", 
      "Charles Matton", 
      "Elizabeth Murray", 
      "Cammie King", 
      "Robert Shayne", 
      "James Craig", 
      "Andr\u00e9 Marty", 
      "Winston H. Bostick", 
      "Ramsay Ames", 
      "Nicolae Dobrin", 
      "Barbara Luddy", 
      "Sa\u00fal Ubaldini", 
      "Peter Collinson", 
      "Cazuza", 
      "Corrado Mantoni", 
      "Edward George, Baron George", 
      "Djibril Diop Mamb\u00e9ty", 
      "Mary Antonia Wayne LaCava", 
      "Frank Attardi", 
      "Viktor Paskov", 
      "Chong-jun Yi", 
      "Khalid Ahmad", 
      "Anders Paulrud", 
      "C\u00e9cile Aubry", 
      "Bobby Hachey", 
      "Beko Ransome-Kuti", 
      "Robert W. Morgan", 
      "Johnny Walker", 
      "Charles Hyatt", 
      "Boris Pasternak", 
      "Neil Postman", 
      "Angela Carter", 
      "Joanna Moore", 
      "Bea Benaderet", 
      "Larry Linville", 
      "Jean Vander Pyl", 
      "Victor French", 
      "Audrey Meadows", 
      "Denys Rhodes", 
      "J\u00f3zef Glemp", 
      "Florence Halop", 
      "Charles Walters", 
      "Eddie Rodriguez", 
      "Jack Newfield", 
      "Bob McAllister", 
      "Princess Jos\u00e9phine Charlotte of Belgium", 
      "Dennis O'Keefe", 
      "Gene Austin", 
      "Stanley Baker", 
      "Darry Cowl", 
      "Frederick Thurston", 
      "Michael Shurtleff", 
      "Gregor Piatigorsky", 
      "Tomio Aoki", 
      "George Eckstein", 
      "Nigel Patrick", 
      "Mas Oyama", 
      "Beverly Sills", 
      "Ron Penfound", 
      "Delphine Seyrig", 
      "Giulietta Masina", 
      "Lei Clijsters", 
      "Alekos Alexandrakis", 
      "Al Wasserman", 
      "Rosaura Revueltas", 
      "Billy De Wolfe", 
      "Henry Morgan", 
      "Paul von Hindenburg", 
      "Jim Varney", 
      "Lenny McLean", 
      "Subir Raha", 
      "Beppo Brem", 
      "Guy Doleman", 
      "Erik Bruhn", 
      "Georges Cziffra", 
      "Paul Mares", 
      "Alejandro Rey", 
      "Adriana Caselotti", 
      "Bernard Barrow", 
      "Ticky Holgado", 
      "Jacques Pr\u00e9vert", 
      "Brion Gysin", 
      "Juan Piquer Sim\u00f3n", 
      "Woody Kling", 
      "Cheryl Holdridge", 
      "Louis Hayward", 
      "Luther Green", 
      "Christopher Connelly", 
      "Glenda Farrell", 
      "Parker Zane Allen", 
      "Billy Bang", 
      "Akiji Kobayashi", 
      "Hilly Kristal", 
      "Ralph Feigin", 
      "Ellen Willis", 
      "Sol Yurick", 
      "Gage Clarke", 
      "Lucy Pacquet", 
      "Jeremy Sinden", 
      "Robert Lansing", 
      "Juli\u00e1n Mateos", 
      "Slim Keith", 
      "Jaroslav Velinsk\u00fd", 
      "John Street", 
      "Crockett Johnson", 
      "Patricia Goedicke", 
      "Wheelock Whitney, Jr.", 
      "Teruo Ishii", 
      "Alberto Closas", 
      "Tang Junyi", 
      "George P. Cosmatos", 
      "Mary Doyle", 
      "Morgan Conway", 
      "Pilar Seurat", 
      "Harry Kerwin", 
      "Salil Dutta", 
      "Walter Hayes", 
      "Julian C. Boyd", 
      "Max Mellinger", 
      "Marvin Griffin", 
      "Paul Leder", 
      "Budhi Kunderan", 
      "Betty Lou Keim", 
      "Leonard Greene", 
      "Ram\u00f3n Vald\u00e9s", 
      "Gary Sperling", 
      "Nuala O'Faolain", 
      "Eugene David Glynn", 
      "Leon Bogues", 
      "Pacita Abad", 
      "Julio Alem\u00e1n", 
      "James Carr", 
      "Max Choboian", 
      "Witold Woyda", 
      "Billy Raymond", 
      "Mary Cox", 
      "Shinsuke Mikimoto", 
      "Prince Takamatsu", 
      "Victor Cowie", 
      "Duncan Hines", 
      "Ricardo Cruz", 
      "Joe Moretti", 
      "Diane Fawcett Walls", 
      "Iztok Puc", 
      "Richard Gilman", 
      "Ida G. Stephens", 
      "Sven O. H\u00f8iby", 
      "\u017dan Marolt", 
      "Roy Castle", 
      "Tony Jay", 
      "Rafael Azcona", 
      "Romulus Linney", 
      "Jeanne Cagney", 
      "Jacques Brel", 
      "Giles Gilbert Scott", 
      "Andy Kaufman", 
      "Dashiell Hammett", 
      "Pee Wee Reese", 
      "Bobby Bonds", 
      "Mark Belanger", 
      "Dave Roberts", 
      "Buddy Blattner", 
      "Morrie Martin", 
      "Zara Cully", 
      "Gene Mauch", 
      "Ken Boyer", 
      "John Milner", 
      "Dave McNally", 
      "Hank Bauer", 
      "Fred Hutchinson", 
      "Lionel Atwill", 
      "Daniel Melnick", 
      "Bob Swift", 
      "Joe DiMaggio", 
      "Doug Fieger", 
      "Peter Jennings", 
      "Gene Wood", 
      "Thomas Babe", 
      "Akihiko Hirata", 
      "Hal Roth", 
      "Priscilla Lane", 
      "Anthony Steel", 
      "L. J. K. Setright", 
      "George VI", 
      "Henry Denker", 
      "Yumiko Hasegawa", 
      "Allen Jenkins", 
      "Mary Castle", 
      "Rupert Crosse", 
      "Maurice Rabb, Jr.", 
      "Sid Davis", 
      "Pete Drake", 
      "Troy Hoskins", 
      "Adrian Scott", 
      "Johnny Sekka", 
      "Vanja Drach", 
      "Gabriel Elorde", 
      "Ben Westlund", 
      "Dwight Armstrong", 
      "Penny Edwards", 
      "Bert Rumsey", 
      "Jacques Royal", 
      "Paul Quarrington", 
      "Helen Gahagan Douglas", 
      "Joseph Schillinger", 
      "Gordon Wharmby", 
      "Dennis James", 
      "Les Brown", 
      "Denne Bart Petitclerc", 
      "Tinus de Jongh", 
      "Nicholas Ray", 
      "Malcolm Perry", 
      "Scotty Robertson", 
      "Reuven Ben-Yosef", 
      "Ray Richards", 
      "John Cazale", 
      "Al Sanders", 
      "Frank McCarthy", 
      "Danny Williams", 
      "Donald Madden", 
      "Jean-Marie Cardinal Lustiger", 
      "Ichijir\u00f4 Oya", 
      "Charles Kelman", 
      "Robert Montgomery Jr.", 
      "Lyn Thomas", 
      "Marvin Edmonds", 
      "Jacques H\u00e9tu", 
      "Caroline Knapp", 
      "Danny Sugerman", 
      "Esther Wong", 
      "Brian Haw", 
      "Herschel Danielovitch", 
      "Andrej Kva\u0161\u0148\u00e1k", 
      "David Hackney", 
      "Michael Williams", 
      "Carl Wilson", 
      "Norton Buffalo", 
      "Sigge F\u00fcrst", 
      "Charles Pitts", 
      "Ross Tompkins", 
      "Chris Whitley", 
      "Joseph Von Stroheim", 
      "James Nolan", 
      "Kenneth Parsons", 
      "Sidney Bechet", 
      "Lobby Loyde", 
      "Everett Dirksen", 
      "Abdul Aziz al-Hakim", 
      "David Marshall", 
      "Khoo Teck Puat", 
      "Barbara Bel Geddes", 
      "Mark Shivas", 
      "Rex Shelley", 
      "Otto Preminger", 
      "Rex Everhart", 
      "Cecily Adams", 
      "Perry Lopez", 
      "Jay Wilsey", 
      "Brian Pendleton", 
      "Mary Lee Settle", 
      "Anthony Poon", 
      "Pasquale Africano", 
      "Tim Flock", 
      "Tom Walkinshaw", 
      "Benny Parsons", 
      "Coo Coo Marlin", 
      "Larry Rice", 
      "Tassos Papadopoulos", 
      "Douglas Jardine", 
      "Gene L. Coon", 
      "Jack Deveau", 
      "Tim Kiley", 
      "Don Steele", 
      "Sancho Gracia", 
      "Dorothy Squires", 
      "Chiyonoyama Masanobu", 
      "Nicomedes Santa Cruz", 
      "Judith Montgomery", 
      "Aniello Dellacroce", 
      "Frank Whittle", 
      "Willis Conover", 
      "Grass Green", 
      "Pat Marsden", 
      "Jack Buck", 
      "Nicholas Nuttall", 
      "Zola Levitt", 
      "Tony Croatto", 
      "Hannah Nydahl", 
      "Abraham Bueno de Mesquita", 
      "Gerry E. Hinton", 
      "Lou Salvador, Jr.", 
      "Chris Rogers", 
      "SM Nasimuddin SM Amin", 
      "Tommy Ridgley", 
      "Gery Scott", 
      "Lillian Briggs", 
      "Patty Donahue", 
      "Sally Moffet", 
      "Steve Gravers", 
      "Alexander Young", 
      "Ron Smith", 
      "Anna Haycraft", 
      "U Thant", 
      "Gary Robichaud", 
      "Robert Frederick Bennett", 
      "Jackie Moran", 
      "Jean-Claude Vrinat", 
      "Rudolf Dassler", 
      "M\u00fc\u015ffik Kenter", 
      "Todd Wilson", 
      "Chet Huntley", 
      "Elena Nathanael", 
      "Gideon Ezra", 
      "Metin Serezli", 
      "Cornelius Ryan", 
      "Allan Jones", 
      "Eric Rijkaert", 
      "Louis Nye", 
      "Florence Rice", 
      "Dick Haymes", 
      "Grayson Hall", 
      "Buck Buchanan", 
      "Joe Yamanaka", 
      "Shinji S\u014dmai", 
      "Sachiko Hidari", 
      "Byrne Piven", 
      "Isao Tomita", 
      "Lee Rich", 
      "Alexis Korner", 
      "Nick Sanderson", 
      "Preston Tucker", 
      "Thomas Schippers", 
      "Tim Hart", 
      "Christine Jorgensen", 
      "Louie Welch", 
      "H\u00fcseyin Peyda", 
      "Suze Rotolo", 
      "Tammy Faye", 
      "Alexander Baldwin", 
      "Seiji Miyaguchi", 
      "Hac\u0131 Sabanc\u0131", 
      "Jack Shutta", 
      "Vernon Duke", 
      "Harmon Caldwell Drew", 
      "Arthur H. Vandenberg", 
      "Bert Parks", 
      "Gani Fawehinmi", 
      "Hisashi Inoue", 
      "William Drohan", 
      "Greg Palmer", 
      "Joan H. Parker", 
      "George Millay", 
      "Mike Woodin", 
      "Vic Ziegel", 
      "James Wainwright", 
      "Brenda Leipsic", 
      "Jimmy Walker", 
      "Peter Daniels", 
      "Phyllis Gates", 
      "Heinz Reincke", 
      "Heddle Nash", 
      "Leslie Klein", 
      "Pedro Plascencia", 
      "Gennady Yanayev", 
      "Milet Andrejevic", 
      "Charlie Hodge", 
      "Toni D'Alto", 
      "Walter E. Foran", 
      "Ron Soble", 
      "Aviva Wachs", 
      "George M. Sullivan", 
      "Frederic B. Vogel", 
      "Jimmy Lyons", 
      "Babe Paley", 
      "Dave McKenna", 
      "Krystyna Feldman", 
      "Roy Nutt", 
      "Prescott Bush", 
      "Luther Allison", 
      "Bobby Willis", 
      "Russell Ellington", 
      "Earl Blair", 
      "Feng Zikai", 
      "Steven Springer", 
      "Shan Kwan", 
      "Buddy Knox", 
      "Louis R. Rocco", 
      "David H. McNerney", 
      "Charlotte Delbo", 
      "Steve Mason", 
      "Rodney Taylor", 
      "Paul M. Naghdi", 
      "Paul Greco", 
      "Mary of Teck", 
      "Robert Hodgins", 
      "Nicholas Ridley, Baron Ridley of Liddesdale", 
      "Marie Jos\u00e9 of Belgium", 
      "Szeto Kam-Yuen", 
      "Lung Fong", 
      "Wong Jim", 
      "Eugene Gordon Lee", 
      "Bobby Hebb", 
      "Davy Graham", 
      "Renzo Ricci", 
      "Dorothy Ford", 
      "Freddie Fields", 
      "Phyllis Potter", 
      "H.A.L. Craig", 
      "Roy Drusky", 
      "David Schnaufer", 
      "Jack Hardy", 
      "Dave ''Snaker'' Ray", 
      "Kevin MacMichael", 
      "David Mervyn Blow", 
      "Renaldo \"Obie\" Benson", 
      "Dutch Tilders", 
      "Leandro", 
      "Dorothy Dwan", 
      "H. V. F. Winstone", 
      "Alec Wilder", 
      "Cotton Fitzsimmons", 
      "Sally Gracie", 
      "Jos\u00e9 Moreno", 
      "Harold McNair", 
      "Jun Ishikawa", 
      "Kyffin Williams", 
      "Ryan Larkin", 
      "David Nightingale Hicks", 
      "Thomas C. Slater", 
      "Ruth Cavin", 
      "Laurie Z.", 
      "Gordon Merrick", 
      "Leopoldo Torres R\u00edos", 
      "Billy Smart, Jr.", 
      "Barbara Seaman", 
      "Etheridge Knight", 
      "Bruce Garvey", 
      "Charles Leigh", 
      "Camilla Wedgwood", 
      "Yevgeny Matveyev", 
      "Wieland Wagner", 
      "George Knudson", 
      "Gay Brewer", 
      "Jim Turnesa", 
      "Larry Gilbert", 
      "Aarre Merikanto", 
      "Alberto Mariscal", 
      "Reizo Koike", 
      "Elbert E. Stephens", 
      "Alec Clunes", 
      "Ria Brieffies", 
      "Raveendran", 
      "Mike Osborne", 
      "Anna Keaveney", 
      "Dennis Letts", 
      "Wanda G\u00e1g", 
      "Frankie Burke", 
      "Ruth Stephan", 
      "Frank Phillip Merlo", 
      "Frank Fitzsimmons", 
      "Zoia Ceau\u0219escu", 
      "Thomas Fitzpatrick", 
      "Marion Montgomery", 
      "Willem Breuker", 
      "Art Hoppe", 
      "Iain Macmillan", 
      "Lucille Roberts", 
      "John Dair", 
      "Henrique Rosa", 
      "Syahrir", 
      "Miguel \u00c1ngel Burelli Rivas", 
      "Ladipo Solanke", 
      "Isidoro Malmierca Peoli", 
      "Fuad Hassan", 
      "Celia S\u00e1nchez", 
      "Jean O'Leary", 
      "Jan Wilson", 
      "John R.", 
      "Pete Franklin", 
      "Michael Fu Tieshan", 
      "Stephen Fumio Hamao", 
      "Amy Robinson", 
      "Pierre Mauroy", 
      "Umanosuke Iida", 
      "A. F. Golam Osmani", 
      "Edie Huggins", 
      "Eileen Rodgers", 
      "Bob Humphrys", 
      "Sue Rihr", 
      "Jack Ruby", 
      "Mary C. Wright", 
      "Rev. Cecil Franklin", 
      "Fred Hibbard", 
      "Albie Tedham", 
      "Richard Ben Cramer", 
      "Suzanne Langlois", 
      "Richard Jeffrey", 
      "Alfried Krupp von Bohlen und Halbach", 
      "Dan Rostenkowski", 
      "Evarts Ambrose Graham", 
      "Carl Hovde", 
      "Martin Moynihan", 
      "Donald Turnupseed", 
      "Andrew John Bevolo", 
      "Donald Hiss", 
      "Carla Lupi", 
      "Fred Ford", 
      "Shin'ichi Ichikawa", 
      "Robert Rental", 
      "Patrick Clancy", 
      "Hank Medress", 
      "Nico Garrone", 
      "Reg Smythe", 
      "Meral Okay", 
      "Bob Guccione", 
      "Re\u015fat Nuri G\u00fcntekin", 
      "Raleigh Rhodes", 
      "Paek Nam-sun", 
      "Helen Mason", 
      "John Good", 
      "Sadamasa Arikawa", 
      "Jack Wiebe", 
      "Hanns-Joachim Friedrichs", 
      "Barbara Epstein", 
      "Paul Shepard", 
      "Manfred Korfmann", 
      "Harry Aleman", 
      "Jack Austin", 
      "Stephan Weiss", 
      "Nelson Prud\u00eancio", 
      "Roy Carrier", 
      "Joseph N\u00e9rette", 
      "Robert W. Bussard", 
      "Chih Ree Sun", 
      "Consuelo Leandro", 
      "Barbara Pfeffer", 
      "El Fary", 
      "Gavin Long", 
      "Yasuo Iwata", 
      "Cal Ripken, Sr.", 
      "Robin Davies", 
      "Gerry Ehman", 
      "James Thomas Lawler", 
      "Rudi Carrell", 
      "Dan Lee", 
      "Werly Fairburn", 
      "James Burke", 
      "Laud Humphreys", 
      "Daniel Lev", 
      "Kazuo Dan", 
      "Terry Fields", 
      "Kjell Kristian Rike", 
      "Bruce Podewell", 
      "Peter Alfred Gorer", 
      "Jaroslav Pelikan", 
      "Helen J. Farabee", 
      "Adolfo Castelo", 
      "Ron Cyrus", 
      "Sam Houston Johnson", 
      "Alice Mary Franklin", 
      "Charles Rome Smith", 
      "Joseph Paruta", 
      "Harrison C. Summers", 
      "Richard Joseph", 
      "Naoyuki Suzuki", 
      "Yasui Kazumi", 
      "Meyer Lansky", 
      "Bugs Moran", 
      "Duke Mitchell", 
      "Frances Heflin", 
      "Thomas G. Labrecque", 
      "Marianne Winkelstern", 
      "Selwyn John Jenkins", 
      "Benjamin Mendes da Costa", 
      "Frank Polizzi", 
      "Fred Ascani", 
      "Nancy Gore", 
      "Edward Chester Plow", 
      "Harry Boykoff", 
      "Tommy Thomas", 
      "Edith K\u00f6rner", 
      "Lai Sun Cheung", 
      "J. B. Handelsman", 
      "Sean Bonniwell", 
      "Trudy McCaffery", 
      "Richard Cloward", 
      "Bernard Barker", 
      "Dorothy Potter", 
      "Andrea Stretton", 
      "Apidej Sit-Hirun", 
      "Frederick McKinley Jones", 
      "Danilo Lagbas", 
      "Kenojuak Ashevak", 
      "Mu Qing", 
      "Tahir Mirza", 
      "Mary Rotolo", 
      "Connie Kreski", 
      "Diosdado Sim\u00f3n", 
      "St. Clair Balfour", 
      "Cheryl Barrymore", 
      "Patricia Dunn", 
      "Shane Acton", 
      "Maurice Binder", 
      "F. William Free", 
      "William Ward Stephens", 
      "Dai Woodham", 
      "Carole Dekeijser", 
      "Han Dingxiang", 
      "Fernando Abril Martorell", 
      "Abdullah Saleh al-Ashtal", 
      "Ola Hudson", 
      "Catherine Leroy", 
      "Dean Turner", 
      "Richard Hobbs", 
      "Steve Patterson", 
      "Michael Deacon", 
      "Laurel Hester", 
      "Froilano de Mello", 
      "Patricia Pyle", 
      "Spencer Eastman", 
      "Charles Christian Hammer", 
      "Clay Shaw", 
      "Don H. Barden", 
      "Murray Klein", 
      "Robert Vesco", 
      "Donald Breckenridge", 
      "Jack Laughery", 
      "Tommy Gallagher", 
      "Robert Abplanalp", 
      "Peter Tinniswood", 
      "Liu Kang", 
      "Frank Cook", 
      "Walter H. Ebert", 
      "Beatrice Colen", 
      "Elaine Warner", 
      "Kenneth McLennan", 
      "Cavernario Galindo", 
      "Lee Tressel", 
      "Ronald Tharpe", 
      "Victor Sokolov", 
      "Gustavo Becerra-Schmidt", 
      "Ruby Muhammad", 
      "Michael Dewell", 
      "Hoke Dorough", 
      "Gaspar DiGregorio", 
      "Alexander Belostenny", 
      "Sarah Conlon", 
      "Khadambi Asalache", 
      "Vera Cuningham", 
      "Michael Gershman", 
      "Phyllis Hockin", 
      "Lud Kramer", 
      "Jay Miltner", 
      "Hugo Banzer", 
      "Keiji Nakazawa", 
      "Hamid Shirzadegan", 
      "Tony Larimer", 
      "Gerald M. Boyd", 
      "Norberto Aroldi", 
      "Gloria Hatrick McLean", 
      "Mervyn Davies", 
      "Benjamin Ruggiero", 
      "Sandy Bull", 
      "Wayne McLaren", 
      "Eleanor D. Wilson", 
      "Maria Anna von Genzinger", 
      "Abdul Kadir Yusuf", 
      "Rene Capo", 
      "Archie M. Gubbrud", 
      "Josef Beran", 
      "William J. Ruane", 
      "Barb Tarbox", 
      "Bill France, Jr.", 
      "Lauren Terrazzano", 
      "Bob Meyer", 
      "Stephen Edward Smith", 
      "Loyola de Palacio", 
      "Fred Haines", 
      "Sherif Yehia", 
      "Julia Carson", 
      "William Dale Wales", 
      "Christel Adelaar", 
      "Patricia George", 
      "Trevor Smith", 
      "Pat Burns", 
      "Laurent Fignon", 
      "Charles Wheeler", 
      "C.V. Wood", 
      "Sean Wight", 
      "Hugh Culverhouse", 
      "Beth Levine", 
      "Johnny Edgecombe", 
      "Vilyam Genrikhovich Fisher", 
      "Katsuo Takaishi", 
      "Joe Beeston", 
      "Kiyoshi Nagai", 
      "Ray Young", 
      "Penny Lernoux", 
      "Bennie Smith", 
      "Encarna S\u00e1nchez", 
      "Ken Selby", 
      "Stephen Morse", 
      "David Nixon", 
      "Tom Clay", 
      "Michelle Triola Marvin", 
      "Edwin B. Forsythe", 
      "Shinya Hidaka", 
      "Nicholas E. Baehr", 
      "Saeko Himuro", 
      "Ronnie Rooke", 
      "Bluma Appel", 
      "Richard DeVore", 
      "Marshall Schacker", 
      "Pauline Flanagan", 
      "Martin Conroy", 
      "Kaneo Ikegami", 
      "Ronald 'Bo' Ginn", 
      "Andrew D. McBride", 
      "George MacKenzie", 
      "Michael John Rogers", 
      "Jorge Montoro", 
      "George Spotton", 
      "Li Shuxian", 
      "Roi Kwabena", 
      "Mois\u00e9s Matias de Andrade", 
      "Ken Barnes", 
      "Ron Archer", 
      "Teruo Nakamura", 
      "William Strickland", 
      "Ben H. Love", 
      "Wes Joice", 
      "Wilhelmina Cooper", 
      "Heather Crowe", 
      "Jack Glass", 
      "Anibal Gordon", 
      "Kerry Juby", 
      "Derek Worlock", 
      "Regina Ovesey", 
      "James Brabazon", 
      "B\u00e4rbel Bohley", 
      "Wallace McIntosh", 
      "Pramote Teerawiwatana", 
      "Phoebe Omlie", 
      "Jacquelyn Kelley", 
      "Frank Zamboni", 
      "Chuck Leonard", 
      "Robert Strachan", 
      "Gloria Stavers", 
      "Donald Washington, Sr.", 
      "George Grljusich", 
      "Hamid Ghodse", 
      "Hugh Fraser", 
      "Ted Dushinski", 
      "Kim Thompson", 
      "Pu Laldenga", 
      "m.0qsk2zq", 
      "m.0ndcjwr"
    ], 
    "targetFormula": "(fb:people.deceased_person.cause_of_death fb:en.lung_cancer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:m.04p3w . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what musicians have died of lung cancer", 
    "id": 127
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:location.location.containedby fb:en.south_america } } } LIMIT 9999", 
    "result": [
      "400"
    ], 
    "targetFormula": "(count (fb:location.location.containedby fb:en.south_america))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:location.location.containedby fb:m.06n3y } } } LIMIT 9999", 
    "utterance": "how many countries are in south america", 
    "id": 128
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.hurricane_wilma fb:meteorology.tropical_cyclone.direct_fatalities ?x1 } LIMIT 9999", 
    "result": [
      "23"
    ], 
    "targetFormula": "(!fb:meteorology.tropical_cyclone.direct_fatalities fb:en.hurricane_wilma)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.088nnl fb:meteorology.tropical_cyclone.direct_fatalities ?x1 } LIMIT 9999", 
    "utterance": "how many people died in hurricane wilma", 
    "id": 129
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.australian_cricket_team fb:cricket.cricket_team.coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Mickey Arthur"
    ], 
    "targetFormula": "(!fb:cricket.cricket_team.coach fb:en.australian_cricket_team)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.020wyp fb:cricket.cricket_team.coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who coaches the australian cricket team", 
    "id": 130
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.substance_abuse_problem.substance fb:en.cocaine . FILTER (?x2 != fb:en.cocaine) . ?x2 fb:celebrities.substance_abuse_problem.celebrity ?x1 } } } LIMIT 9999", 
    "result": [
      "17"
    ], 
    "targetFormula": "(count (!fb:celebrities.substance_abuse_problem.celebrity ((lambda x (fb:celebrities.substance_abuse_problem.substance (var x))) fb:en.cocaine)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.substance_abuse_problem.substance fb:m.0256b . FILTER (?x2 != fb:m.0256b) . ?x2 fb:celebrities.substance_abuse_problem.celebrity ?x1 } } } LIMIT 9999", 
    "utterance": "how many celebrities have abused cocaine", 
    "id": 131
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.electronic_arts fb:cvg.cvg_developer.games_developed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The Sims Castaway Stories", 
      "Bartender DS", 
      "SimCity DS", 
      "Strike series", 
      "Haunting", 
      "Wolf", 
      "John Madden Football '93", 
      "John Madden Football '92", 
      "NHL '94", 
      "Skitchin'", 
      "Ski or Die", 
      "Total Club Manager 2004", 
      "Kings of the Beach", 
      "Michael Jordan in Flight", 
      "Lakers versus Celtics and the NBA Playoffs", 
      "NFL Head Coach 09", 
      "Matt Hayes Fishing", 
      "Joe Montana Football", 
      "Fight Night Round 4", 
      "Toughman Contest", 
      "NHL 99", 
      "Mutant League Football", 
      "NASCAR Kart Racing", 
      "Madden NFL 06", 
      "Harry Potter: Quidditch World Cup", 
      "Michael Jordan: Chaos in the Windy City", 
      "Moto Racer", 
      "NASCAR 06: Total Team Control", 
      "WCW Backstage Assault", 
      "Fight Night Round 3", 
      "Mutant League Hockey", 
      "MLBPA Baseball", 
      "Jordan vs. Bird: One on One", 
      "Bill Walsh College Football", 
      "NFL Head Coach", 
      "NASCAR 07", 
      "Skate or Die 2: The Search for Double Trouble", 
      "CyberTiger", 
      "NBA Street Homecourt", 
      "MechWarrior 3050", 
      "J. League Live 64", 
      "FIFA Manager 07", 
      "Bulls vs Lakers and the NBA Playoffs", 
      "Bulls versus Blazers and the NBA Playoffs", 
      "NBA Showdown", 
      "Team USA Basketball", 
      "FIFA Soccer 64", 
      "Best of Voodoo", 
      "Tiger Woods 99 PGA Tour Golf", 
      "PGA Tour Pro", 
      "UEFA Euro 2000", 
      "PGA Tour 97", 
      "Triple Play 97", 
      "March Madness '98", 
      "Sports 3 Pack", 
      "NBA Live", 
      "Need for Speed: Carbon", 
      "MySims Party", 
      "My Sims", 
      "MySims Agents", 
      "MySims SkyHeroes", 
      "Future Cop: LAPD", 
      "The Godfather II", 
      "The Lord of the Rings: The Return of the King", 
      "Harry Potter and the Order of the Phoenix", 
      "Medal of Honor: Frontline", 
      "Madden Season 2", 
      "Ultima Online: Kingdom Reborn", 
      "The Lord of the Rings: Tactics", 
      "The Sims 2: Seasons", 
      "The F.A. Premier League Football Manager 99", 
      "Def Jam: Icon", 
      "NASCAR 2005: Chase for the Cup", 
      "Need for Speed: Most Wanted", 
      "Skate or Die!", 
      "Dark Age of Camelot", 
      "Half-Life 2", 
      "Hasbro Family Game Night", 
      "Ultima Online", 
      "Harry Potter and the Prisoner of Azkaban", 
      "The Godfather: The Game", 
      "Medal Of Honor Collection", 
      "Need for Speed: Shift", 
      "The Lord of the Rings: The White Council", 
      "Harry Potter and the Goblet of Fire", 
      "Budokan: The Martial Spirit", 
      "WCW Mayhem", 
      "Desert Strike: Return to the Gulf", 
      "Tiger Woods PGA Tour 2000", 
      "688(I) Hunter/Killer", 
      "Monopoly", 
      "NASCAR Rumble", 
      "Starflight", 
      "007: Agent Under Fire", 
      "The Lord of the Rings: The Two Towers", 
      "Lion", 
      "Nuclear Strike", 
      "Dead Space", 
      "Battlefield 1942", 
      "SpellForce 2: Shadow Wars", 
      "Harry Potter and the Chamber of Secrets", 
      "The Sims 3: World Adventures", 
      "The Sims 2", 
      "MySims Kingdom", 
      "Pet Society", 
      "The Sims 3", 
      "From Russia with Love", 
      "Catwoman", 
      "Chuck Yeager's Air Combat", 
      "LHX Attack Chopper", 
      "Shox", 
      "The Wizard of Oz", 
      "Road Rash II", 
      "Burnout Dominator", 
      "Road Rash", 
      "EA Sports NASCAR Racing", 
      "Need for Speed: Hot Pursuit 2", 
      "Need for Speed: World", 
      "NASCAR Thunder 2004", 
      "Beetle Adventure Racing!", 
      "Burnout Legends", 
      "Motor City Online", 
      "Rallisport Challenge", 
      "Shift 2: Unleashed", 
      "PGA Tour Golf Team Challenge", 
      "Harry Potter and the Half-Blood Prince", 
      "The Simpsons Game", 
      "Space Hulk", 
      "Rumble Racing", 
      "James Bond 007: Everything or Nothing", 
      "X-Squad", 
      "Star Wars: The Old Republic", 
      "Moto Racer 2", 
      "688 Attack Sub", 
      "Fairy Godmother Tycoon", 
      "SimAnimals", 
      "Dante's Inferno", 
      "SimCity DS 2", 
      "Deathlord", 
      "The Lord of the Rings: The Third Age", 
      "The Sims Pet Stories", 
      "The Sims 2: Bon Voyage", 
      "Total Club Manager 2003", 
      "Boom Blox", 
      "The Sims 2: FreeTime", 
      "The Sims 2: Apartment Life", 
      "Sentinel Worlds I: Future Magic", 
      "The Sims 2: Pets", 
      "Soviet Strike", 
      "Tetris", 
      "Word Whomp", 
      "ReBoot", 
      "Star Wars Galaxies", 
      "Ultima Online: Stygian Abyss", 
      "Ultima Online: Samurai Empire", 
      "Ultima Online: Mondain's Legacy", 
      "Murder on the Zinderneuf", 
      "The Sims Life Stories", 
      "Fountain of Dreams", 
      "Sesame Street: Counting Cafe", 
      "Marvel Nemesis 2", 
      "The F.A. Premier League Football Manager 2002", 
      "Jane's US Navy Fighters 97", 
      "SimSafari", 
      "Battlefield Online", 
      "Shock Wave 2: Beyond the Gate", 
      "King Arthur & the Knights of Justice", 
      "Brain Quest Grades 5 & 6", 
      "Wizard", 
      "The Sims 2 Stuff packs", 
      "Brain Quest Grades 3 & 4", 
      "The Orange Box", 
      "Project Firestart", 
      "Trivial Pursuit: Bet You Know It", 
      "Road Rash 3D"
    ], 
    "targetFormula": "(!fb:cvg.cvg_developer.games_developed fb:en.electronic_arts)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01n073 fb:cvg.cvg_developer.games_developed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what games has electronic arts developed", 
    "id": 132
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tweed fb:fashion.textile.weave ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Herringbone"
    ], 
    "targetFormula": "(!fb:fashion.textile.weave fb:en.tweed)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09_f46 fb:fashion.textile.weave ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what sort of weave is used to make tweed", 
    "id": 133
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_nomination.award_nominee fb:en.ron_glass . FILTER (?x1 != fb:en.ron_glass) . ?x1 fb:award.award_nomination.year ?x2 } LIMIT 9999", 
    "result": [
      "1982"
    ], 
    "targetFormula": "(!fb:award.award_nomination.year ((lambda x (fb:award.award_nomination.award_nominee (var x))) fb:en.ron_glass))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_nomination.award_nominee fb:m.03h82p . FILTER (?x1 != fb:m.03h82p) . ?x1 fb:award.award_nomination.year ?x2 } LIMIT 9999", 
    "utterance": "what year was ron glass an award nominee", 
    "id": 134
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.julie_edwards . FILTER (?x2 != fb:en.julie_edwards) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "41"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.julie_edwards)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.0kftt . FILTER (?x2 != fb:m.0kftt) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many films has julie andrews been in", 
    "id": 135
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:en.madagascar fb:location.statistical_region.major_exports ?x1 . FILTER (?x1 != fb:en.madagascar) . ?x1 fb:location.imports_exports_by_industry.industry ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Coffee"
    ], 
    "targetFormula": "(!fb:location.imports_exports_by_industry.industry ((lambda x (!fb:location.statistical_region.major_exports (var x))) fb:en.madagascar))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.04sj3 fb:location.statistical_region.major_exports ?x1 . FILTER (?x1 != fb:m.04sj3) . ?x1 fb:location.imports_exports_by_industry.industry ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what are the major exports of madagascar", 
    "id": 136
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.danny_devito fb:people.person.children ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:people.person.children fb:en.danny_devito))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0q9kd fb:people.person.children ?x1 } } } LIMIT 9999", 
    "utterance": "how many children does danny devito have", 
    "id": 137
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:en.8_mile . FILTER (?x2 != fb:en.8_mile) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.8_mile)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:m.017d93 . FILTER (?x2 != fb:m.017d93) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many awards did the movie 8 mile win", 
    "id": 138
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ben_stiller fb:base.saturdaynightlive.snl_host.episodes_hosted ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "SNL - 24.4"
    ], 
    "targetFormula": "(!fb:base.saturdaynightlive.snl_host.episodes_hosted fb:en.ben_stiller)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0mdqp fb:base.saturdaynightlive.snl_host.episodes_hosted ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what episode of snl did ben stiller host", 
    "id": 139
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.3_juno fb:astronomy.astronomical_discovery.discovery_site ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lilienthal Observatory"
    ], 
    "targetFormula": "(!fb:astronomy.astronomical_discovery.discovery_site fb:en.3_juno)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0ks5b fb:astronomy.astronomical_discovery.discovery_site ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was the 3 juno asteroid discovered", 
    "id": 140
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:basketball.basketball_roster_position.player fb:en.richard_hamilton . FILTER (?x1 != fb:en.richard_hamilton) . ?x1 fb:basketball.basketball_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Chicago Bulls"
    ], 
    "targetFormula": "(!fb:basketball.basketball_roster_position.team ((lambda x (fb:basketball.basketball_roster_position.player (var x))) fb:en.richard_hamilton))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:basketball.basketball_roster_position.player fb:m.038yrz . FILTER (?x1 != fb:m.038yrz) . ?x1 fb:basketball.basketball_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what team does richard hamilton play for", 
    "id": 141
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jack_albertson fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Colorectal cancer"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.jack_albertson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0hw6_ fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was jack albertson 's cause of death", 
    "id": 142
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.cristiano_ronaldo fb:soccer.football_player.position_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Midfielder", 
      "Forward"
    ], 
    "targetFormula": "(!fb:soccer.football_player.position_s fb:en.cristiano_ronaldo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02xt6q fb:soccer.football_player.position_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what position does cristiano ronaldo play", 
    "id": 143
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.john_f_kennedy fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Assassination"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.john_f_kennedy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d3k14 fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was john f kennedy 's cause of death", 
    "id": 144
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:cricket.cricket_bowler.technique fb:en.fast_bowling } } } LIMIT 9999", 
    "result": [
      "359"
    ], 
    "targetFormula": "(count (fb:cricket.cricket_bowler.technique fb:en.fast_bowling))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:cricket.cricket_bowler.technique fb:m.0326kv } } } LIMIT 9999", 
    "utterance": "how many cricket bowlers use fast bowling", 
    "id": 145
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.edmonton_oilers fb:ice_hockey.hockey_team.captain ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Shawn Horcoff"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_team.captain fb:en.edmonton_oilers)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jnmj fb:ice_hockey.hockey_team.captain ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the captain of the edmonton oilers", 
    "id": 146
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:en.skiing_accident } } } LIMIT 9999", 
    "result": [
      "21"
    ], 
    "targetFormula": "(count (fb:people.deceased_person.cause_of_death fb:en.skiing_accident))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:m.023b864 } } } LIMIT 9999", 
    "utterance": "how many people died of a skiing accident", 
    "id": 147
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:en.poison } } } LIMIT 9999", 
    "result": [
      "70"
    ], 
    "targetFormula": "(count (fb:people.deceased_person.cause_of_death fb:en.poison))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:people.deceased_person.cause_of_death fb:m.0dh11 } } } LIMIT 9999", 
    "utterance": "how many notable people died by poisoning", 
    "id": 148
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.spanish_peseta fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.spanish_peseta))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.014z03 fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries use the spanish peseta", 
    "id": 149
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.afrikaans fb:language.human_language.language_family ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "West Germanic languages", 
      "Germanic languages", 
      "Indo-European languages"
    ], 
    "targetFormula": "(!fb:language.human_language.language_family fb:en.afrikaans)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0x82 fb:language.human_language.language_family ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what language family is afrikaans part of", 
    "id": 150
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:boxing.match_boxer_relationship.boxer fb:en.jack_dempsey . FILTER (?x1 != fb:en.jack_dempsey) . ?x1 fb:boxing.match_boxer_relationship.winner_won ?x2 } LIMIT 9999", 
    "result": [
      "1", 
      "0"
    ], 
    "targetFormula": "(!fb:boxing.match_boxer_relationship.winner_won ((lambda x (fb:boxing.match_boxer_relationship.boxer (var x))) fb:en.jack_dempsey))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:boxing.match_boxer_relationship.boxer fb:m.012zh1 . FILTER (?x1 != fb:m.012zh1) . ?x1 fb:boxing.match_boxer_relationship.winner_won ?x2 } LIMIT 9999", 
    "utterance": "did jack dempsey win the long count fight", 
    "id": 151
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0l16j8 fb:music.recording.producer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Mario Caldato Jr."
    ], 
    "targetFormula": "(!fb:music.recording.producer fb:m.0l16j8)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0l16j8 fb:music.recording.producer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who produced sabotage by the beastie boys", 
    "id": 152
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0csh5 fb:meteorology.cloud.varieties ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:meteorology.cloud.varieties fb:m.0csh5))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0csh5 fb:meteorology.cloud.varieties ?x1 } } } LIMIT 9999", 
    "utterance": "how many types of cumulus clouds are there", 
    "id": 153
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.ron_glass fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.ron_glass))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03h82p fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names is ron glass known by", 
    "id": 154
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.san_francisco_bay fb:geography.body_of_water.bridges ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Dumbarton Bridge", 
      "Eastern span replacement of the San Francisco\u2013Oakland Bay Bridge", 
      "San Francisco-Oakland Bay Bridge", 
      "Richmond\u2013San Rafael Bridge", 
      "San Mateo\u2013Hayward Bridge"
    ], 
    "targetFormula": "(!fb:geography.body_of_water.bridges fb:en.san_francisco_bay)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06ptx fb:geography.body_of_water.bridges ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what bridges go over the san francisco bay", 
    "id": 155
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.postcard fb:interests.collection_category.name_of_collection_activity ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Deltiology"
    ], 
    "targetFormula": "(!fb:interests.collection_category.name_of_collection_activity fb:en.postcard)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0fd4f fb:interests.collection_category.name_of_collection_activity ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the collection of postcards called", 
    "id": 156
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.west_side_story fb:media_common.adaptation.adapted_from ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Romeo and Juliet"
    ], 
    "targetFormula": "(!fb:media_common.adaptation.adapted_from fb:en.west_side_story)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.085xh fb:media_common.adaptation.adapted_from ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what play was west side story adapted from", 
    "id": 157
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gd2g7 fb:biology.fossil_specimen.organism ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Australopithecus afarensis"
    ], 
    "targetFormula": "(!fb:biology.fossil_specimen.organism fb:m.0gd2g7)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gd2g7 fb:biology.fossil_specimen.organism ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of organism was lucy a fossil of", 
    "id": 158
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_magic_flute fb:opera.opera.librettist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Emanuel Schikaneder"
    ], 
    "targetFormula": "(!fb:opera.opera.librettist fb:en.the_magic_flute)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09g7g fb:opera.opera.librettist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the librettist for the magic flute", 
    "id": 159
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.theft fb:media_common.cause_of_loss.works_lost_this_way ?x1 } } } LIMIT 9999", 
    "result": [
      "15"
    ], 
    "targetFormula": "(count (!fb:media_common.cause_of_loss.works_lost_this_way fb:en.theft))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07pnk fb:media_common.cause_of_loss.works_lost_this_way ?x1 } } } LIMIT 9999", 
    "utterance": "how many works have been lost due to theft", 
    "id": 160
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.13_going_on_30 fb:common.topic.alias ?x1 } LIMIT 9999", 
    "result": [
      "Sugar and Spice", 
      "13 Going On 30", 
      "13 Love 30", 
      "Suddenly 30"
    ], 
    "targetFormula": "(!fb:common.topic.alias fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02vzpb fb:common.topic.alias ?x1 } LIMIT 9999", 
    "utterance": "what other titles does 13 going on 30 have", 
    "id": 161
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.jerry_seinfeld fb:people.person.children ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:people.person.children fb:en.jerry_seinfeld))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0q5hw fb:people.person.children ?x1 } } } LIMIT 9999", 
    "utterance": "how many children does jerry seinfeld have", 
    "id": 162
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.cbs_radio fb:broadcast.radio_station_owner.radio_stations ?x1 } } } LIMIT 9999", 
    "result": [
      "154"
    ], 
    "targetFormula": "(count (!fb:broadcast.radio_station_owner.radio_stations fb:en.cbs_radio))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02975m fb:broadcast.radio_station_owner.radio_stations ?x1 } } } LIMIT 9999", 
    "utterance": "how many radio stations does cbs radio own", 
    "id": 163
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.king_edward_peak fb:geography.mountain.mountain_range ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Canadian Rockies"
    ], 
    "targetFormula": "(!fb:geography.mountain.mountain_range fb:en.king_edward_peak)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.034gr9 fb:geography.mountain.mountain_range ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what mountain range is king edward peak in", 
    "id": 164
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.crystal_light . FILTER (?x1 != fb:en.crystal_light) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.crystal_light))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.04wnj4 . FILTER (?x1 != fb:m.04wnj4) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was crystal light originally marketed", 
    "id": 165
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.prostate_cancer fb:medicine.disease.treatments ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Laparoscopic radical prostatectomy", 
      "Radiation therapy", 
      "Gene therapy", 
      "Goserelin", 
      "Bicalutamide", 
      "Radical perineal prostatectomy", 
      "High-intensity focused ultrasound", 
      "Cryosurgery", 
      "Hormone therapy", 
      "Chemotherapy", 
      "Palliative care", 
      "Cryotherapy", 
      "Prostate brachytherapy", 
      "Radical retropubic prostatectomy", 
      "External beam radiotherapy", 
      "Watchful waiting"
    ], 
    "targetFormula": "(!fb:medicine.disease.treatments fb:en.prostate_cancer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0m32h fb:medicine.disease.treatments ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the treatments of prostate cancer", 
    "id": 166
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.research_only fb:medicine.cancer_center_type.centers_of_this_kind ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Salk Institute Cancer Center", 
      "Cancer Center at Cold Spring Harbor Laboratory", 
      "Purdue University Cancer Center", 
      "Cancer Research Center of Hawaii", 
      "David H. Koch Institute for Integrative Cancer Research at MIT", 
      "Wistar Institute Cancer Center", 
      "The Jackson Laboratory Cancer Center", 
      "Cancer Center at the Burnham Institute"
    ], 
    "targetFormula": "(!fb:medicine.cancer_center_type.centers_of_this_kind fb:en.research_only)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04zr9vj fb:medicine.cancer_center_type.centers_of_this_kind ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some research only cancer centers", 
    "id": 167
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.australia fb:location.location.events ?x1 } } } LIMIT 9999", 
    "result": [
      "38"
    ], 
    "targetFormula": "(count (!fb:location.location.events fb:en.australia))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0chghy fb:location.location.events ?x1 } } } LIMIT 9999", 
    "utterance": "how many major events happened in australia", 
    "id": 168
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meiji_constitution fb:law.constitution.country ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Japan"
    ], 
    "targetFormula": "(!fb:law.constitution.country fb:en.meiji_constitution)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01_syn fb:law.constitution.country ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what area did the meiji constitution govern", 
    "id": 169
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.new_york_ny fb:location.place_with_neighborhoods.neighborhoods ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Port Morris", 
      "New Lots", 
      "Ocean Hill", 
      "Arrochar", 
      "Elm Park", 
      "Brooklyn Navy Yard", 
      "Brownsville", 
      "Jamaica", 
      "Woodside", 
      "Downtown Brooklyn", 
      "Bay Terrace", 
      "Jamaica Estates", 
      "Van Cortlandt Village", 
      "Spuyten Duyvil", 
      "Kingsbridge", 
      "Kingsbridge Heights", 
      "Port Ivory", 
      "Red Hook", 
      "Graniteville", 
      "Bellerose", 
      "Stuyvesant Heights", 
      "Flatbush", 
      "Queens Village", 
      "Marine Park", 
      "Carroll Gardens", 
      "Borough Park", 
      "Ridgewood", 
      "Park Slope", 
      "Tottenville", 
      "Madison", 
      "South Ozone Park", 
      "Ditmas Park", 
      "Meatpacking District", 
      "Long Island City", 
      "Harlem", 
      "Marble Hill", 
      "Rockefeller Center", 
      "Riverdale", 
      "Midtown Manhattan", 
      "Lower East Side", 
      "Fieldston", 
      "Washington Heights", 
      "Bensonhurst", 
      "Howard Beach", 
      "Far Rockaway", 
      "Sunnyside", 
      "Mariners Harbor", 
      "BoCoCa", 
      "Neponsit", 
      "Port Richmond", 
      "New Brighton", 
      "Sunset Park", 
      "Fresh Meadows", 
      "Bedford-Stuyvesant", 
      "Huguenot", 
      "SoHo", 
      "Williamsburg", 
      "Melrose", 
      "Hudson Heights", 
      "East Village", 
      "Pelham Gardens", 
      "Laurelton", 
      "Lindenwood", 
      "Livingston", 
      "Whitestone", 
      "Bayside", 
      "Blissvile", 
      "Vinegar Hill", 
      "Elmhurst", 
      "Astoria", 
      "Upper West Side", 
      "Upper East Side", 
      "Rockaway Beach", 
      "Corona", 
      "Oakland Gardens", 
      "Jackson Heights", 
      "Brooklyn Heights", 
      "Homecrest", 
      "Douglaston", 
      "Concourse", 
      "Kew Gardens Hills", 
      "South Jamaica", 
      "New Utrecht", 
      "Rochdale", 
      "East Flatbush", 
      "Flushing", 
      "Richmond Hill", 
      "St. George", 
      "Broadway", 
      "Five Points", 
      "Inwood", 
      "Hell's Kitchen", 
      "Koreatown", 
      "Chelsea", 
      "TriBeCa", 
      "Alphabet City", 
      "Battery Park City", 
      "NoLIta", 
      "Little Italy", 
      "NoHo", 
      "Morningside Heights", 
      "Yorkville", 
      "Marcus Garvey Park", 
      "Tenderloin", 
      "Cooperative Village", 
      "Two Bridges", 
      "Waterside Plaza", 
      "Financial District", 
      "Lower Manhattan", 
      "South Street Seaport", 
      "East Harlem", 
      "Theatre District", 
      "Rose Hill", 
      "Lenox Hill", 
      "Flatiron District", 
      "Le Petit Senegal", 
      "Herald Square", 
      "Hudson, Manhattan", 
      "Union Square", 
      "Kips Bay", 
      "Gramercy", 
      "Turtle Bay", 
      "Little Germany", 
      "Carnegie Hill", 
      "Bowery", 
      "Stuyvesant Town\u2014Peter Cooper Village", 
      "Upper Manhattan", 
      "Diamond District", 
      "Manhattan Valley", 
      "Madison Square", 
      "Garment District", 
      "Loisaida", 
      "Astor Row", 
      "Korea Way", 
      "Hamilton Heights", 
      "Tudor City", 
      "Manhattanville", 
      "West Village", 
      "Lincoln Square", 
      "Sugar Hill", 
      "Sutton Place", 
      "Civic Center", 
      "Fort George", 
      "Murray Hill", 
      "Chinatown", 
      "Hunters Point", 
      "Hunts Point", 
      "Longwood", 
      "Cobble Hill", 
      "Eltingville", 
      "Murray Hill", 
      "Little Neck", 
      "Forest Hills", 
      "Bushwick", 
      "Cambria Heights", 
      "Morrisania", 
      "Rego Park", 
      "Norwood", 
      "Soundview", 
      "Glendale", 
      "Gravesend", 
      "Boerum Hill", 
      "Greenwich Village", 
      "Mill Basin", 
      "Times Square", 
      "West Farms", 
      "Crown Heights", 
      "Wakefield", 
      "Stapleton", 
      "St. Albans", 
      "Fort Hamilton", 
      "Cypress Hills", 
      "Ozone Park", 
      "West New Brighton", 
      "Midwood", 
      "Columbus Circle", 
      "Annadale", 
      "Bay Ridge", 
      "Clinton Hill", 
      "East Williamsburg", 
      "Canarsie", 
      "Prospect Heights", 
      "Gowanus", 
      "East New York", 
      "Bath Beach", 
      "Mott Haven", 
      "Kew Gardens", 
      "Brighton Beach", 
      "Middle Village", 
      "Fort Wadsworth", 
      "Wingate", 
      "Country Club", 
      "Maspeth", 
      "Travis", 
      "Greenpoint", 
      "Flatlands", 
      "Pelham Bay", 
      "Rosedale", 
      "Castleton Corners", 
      "Briarwood", 
      "Hollis", 
      "Fort Greene", 
      "Woodhaven", 
      "Dyker Heights", 
      "Queensbridge", 
      "Oakwood", 
      "Shore Acres", 
      "Windsor Terrace", 
      "Ocean Parkway", 
      "Kensington", 
      "Utopia", 
      "Prospect-Lefferts Gardens", 
      "Throggs Neck", 
      "Tompkinsville", 
      "Willets Point", 
      "Morris Heights", 
      "University Heights", 
      "Rockaway Park", 
      "Woodlawn", 
      "Great Kills", 
      "Belle Harbor", 
      "Breezy Point", 
      "Arverne", 
      "Morris Park", 
      "Highbridge", 
      "Georgetown", 
      "New Dorp", 
      "Fordham", 
      "City Line", 
      "Edgemere", 
      "Rosebank", 
      "Parkchester", 
      "Hammels", 
      "South Beach", 
      "Egbertville", 
      "Greenridge", 
      "Bergen Beach", 
      "Highland Park", 
      "Plumb Beach, Brooklyn", 
      "Farragut", 
      "Beverly Square East", 
      "Beverly Square West", 
      "Gerritsen Beach", 
      "Pigtown", 
      "Weeksville", 
      "Pomonok", 
      "DUMBO", 
      "Castle Hill", 
      "Fiske Terrace", 
      "Bedford", 
      "Forest Hills Gardens", 
      "Heartland Village", 
      "Starrett City", 
      "Arthur Avenue", 
      "New Springville", 
      "Pleasant Plains", 
      "Howard Park", 
      "North New York", 
      "Bridge Plaza, Brooklyn", 
      "Seagate", 
      "Woodrow", 
      "Stapleton Heights", 
      "Greenwood Heights", 
      "College Point", 
      "Clason Point", 
      "Charleston", 
      "Jamaica Hills, Queens", 
      "Sunnyside Gardens", 
      "Beechhurst", 
      "Co-op City", 
      "Electchester", 
      "The Hub", 
      "Richmondtown", 
      "Holliswood", 
      "Bedford Park", 
      "Bloomfield", 
      "Dutch Kills", 
      "Richmond Valley", 
      "Baychester", 
      "Todt Hill", 
      "Meiers Corners", 
      "Rossville", 
      "Edenwald", 
      "Van Nest", 
      "Allerton", 
      "Silver Beach", 
      "East Morrisania", 
      "Concord", 
      "Fordham-Bedford", 
      "Manhattan Beach", 
      "Broad Channel", 
      "Belmont", 
      "Ditmars", 
      "Tottenville Beach", 
      "Hollis Hills", 
      "Astoria Heights", 
      "Seaside", 
      "Manor Heights", 
      "Glen Oaks", 
      "Midland Beach", 
      "Clifton", 
      "North Corona", 
      "Bellaire", 
      "Meadowmere", 
      "Harding Park", 
      "Hamilton Beach", 
      "Olinville", 
      "Dongan Hills", 
      "Bay Terrace", 
      "Grasmere", 
      "Bulls Head", 
      "Willowbrook", 
      "Ward Hill", 
      "Grymes Hill", 
      "Silver Lake", 
      "Randall Manor", 
      "Ocean Breeze", 
      "Brighton Heights", 
      "LeFrak City", 
      "Springfield Gardens", 
      "North Riverdale", 
      "Bayswater", 
      "Old Howard Beach", 
      "Rockwood Park", 
      "Ramblersville", 
      "East Tremont", 
      "Eastchester", 
      "East Elmhurst", 
      "Locust Point", 
      "Auburndale", 
      "Pelham Parkway", 
      "Tudor Village", 
      "Ravenswood", 
      "Arden Heights", 
      "Grant City", 
      "Lighthouse Hill", 
      "Roxbury", 
      "Hillcrest", 
      "Williamsbridge", 
      "Westerleigh", 
      "Emerson Hill", 
      "Tremont", 
      "Floral Park", 
      "Malba", 
      "Prospect Park South", 
      "Fresh Pond", 
      "Sunnyside"
    ], 
    "targetFormula": "(!fb:location.place_with_neighborhoods.neighborhoods fb:en.new_york_ny)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02_286 fb:location.place_with_neighborhoods.neighborhoods ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the neighborhoods in new york city", 
    "id": 170
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.j_c_penney fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.j_c_penney))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.026h1w fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names are there for jcpenney", 
    "id": 171
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.reincarnation fb:religion.belief.belief_of ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:religion.belief.belief_of fb:en.reincarnation))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06fmt fb:religion.belief.belief_of ?x1 } } } LIMIT 9999", 
    "utterance": "how many religions believe in reincarnation", 
    "id": 172
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.order_of_saint_michael fb:royalty.order_of_chivalry.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1469"
    ], 
    "targetFormula": "(!fb:royalty.order_of_chivalry.date_founded fb:en.order_of_saint_michael)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05_7pk fb:royalty.order_of_chivalry.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was the order of saint michael founded", 
    "id": 173
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_atlantic_monthly fb:book.periodical.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Politics of the United States"
    ], 
    "targetFormula": "(!fb:book.periodical.subjects fb:en.the_atlantic_monthly)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0137v8 fb:book.periodical.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the subject of the atlantic monthly", 
    "id": 174
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.letter_from_america fb:radio.radio_program.final_broadcast ?x1 } LIMIT 9999", 
    "result": [
      "2004-02-20"
    ], 
    "targetFormula": "(!fb:radio.radio_program.final_broadcast fb:en.letter_from_america)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02r9fh fb:radio.radio_program.final_broadcast ?x1 } LIMIT 9999", 
    "utterance": "when was letter from america last broadcast", 
    "id": 175
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.chris_maden fb:martial_arts.martial_artist.martial_art ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Taekwondo", 
      "T'ai chi ch'uan", 
      "American Kenpo", 
      "Hapkido"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_artist.martial_art fb:en.chris_maden)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01xrwvx fb:martial_arts.martial_artist.martial_art ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what martial arts does chris maden practice", 
    "id": 176
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.macintosh fb:computer.computer.key_designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jef Raskin", 
      "Steve Jobs", 
      "Bill Atkinson", 
      "Burrell Smith", 
      "Bud Tribble"
    ], 
    "targetFormula": "(!fb:computer.computer.key_designers fb:en.macintosh)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0zd6 fb:computer.computer.key_designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who were the key designers of the macintosh", 
    "id": 177
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.lake_superior fb:geography.body_of_water.islands ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:geography.body_of_water.islands fb:en.lake_superior))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.04kdn fb:geography.body_of_water.islands ?x1 } } } LIMIT 9999", 
    "utterance": "how many islands are there in lake superior", 
    "id": 178
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.manhattan_bridge fb:transportation.bridge.bridge_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Suspension bridge"
    ], 
    "targetFormula": "(!fb:transportation.bridge.bridge_type fb:en.manhattan_bridge)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02217f fb:transportation.bridge.bridge_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of bridge is the manhattan bridge", 
    "id": 179
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:event.speech_or_presentation.speaker_s fb:en.winston_churchill . FILTER (?x2 != fb:en.winston_churchill) . ?x2 fb:event.speech_or_presentation.presented_work ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:event.speech_or_presentation.presented_work ((lambda x (fb:event.speech_or_presentation.speaker_s (var x))) fb:en.winston_churchill)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:event.speech_or_presentation.speaker_s fb:m.082xp . FILTER (?x2 != fb:m.082xp) . ?x2 fb:event.speech_or_presentation.presented_work ?x1 } } } LIMIT 9999", 
    "utterance": "how many speeches did winston churchill give", 
    "id": 180
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tokyo fb:travel.travel_destination.local_transportation ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "East Japan Railway Company", 
      "Tokyo Metro", 
      "Tokyo Metropolitan Bureau of Transportation", 
      "Tokyo Waterfront Area Rapid Transit Rinkai Line"
    ], 
    "targetFormula": "(!fb:travel.travel_destination.local_transportation fb:en.tokyo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07dfk fb:travel.travel_destination.local_transportation ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what public transportation is there in tokyo", 
    "id": 181
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.marcellus_formation fb:geology.geological_formation.type_of_rock ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Shale"
    ], 
    "targetFormula": "(!fb:geology.geological_formation.type_of_rock fb:en.marcellus_formation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0404lvv fb:geology.geological_formation.type_of_rock ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of rock is the marcellus formation", 
    "id": 182
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jekyll_island fb:geography.island.island_group ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Golden Isles of Georgia"
    ], 
    "targetFormula": "(!fb:geography.island.island_group fb:en.jekyll_island)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05flx2 fb:geography.island.island_group ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what island group is jekyll island a part of", 
    "id": 183
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.nikon_coolpix_s50 fb:digicams.digital_camera.lcd_screen_dimensions ?x1 } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(!fb:digicams.digital_camera.lcd_screen_dimensions fb:en.nikon_coolpix_s50)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03q2k8h fb:digicams.digital_camera.lcd_screen_dimensions ?x1 } LIMIT 9999", 
    "utterance": "how big is the screen on a nikon coolpix s50", 
    "id": 184
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.raleigh_bicycle_company fb:bicycles.bicycle_manufacturer.bicycle_models ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Raleigh Record", 
      "Raleigh Grifter", 
      "Raleigh Competition", 
      "Raleigh Grand Prix", 
      "Raleigh Super Course", 
      "Raleigh International", 
      "Raleigh Professional", 
      "Raleigh Team Professional", 
      "Raleigh Chopper", 
      "Raleigh Burner"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_manufacturer.bicycle_models fb:en.raleigh_bicycle_company)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05rg8g fb:bicycles.bicycle_manufacturer.bicycle_models ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what bicycle models does raleigh manufacture", 
    "id": 185
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mascarpone fb:food.cheese.source_of_milk ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cattle"
    ], 
    "targetFormula": "(!fb:food.cheese.source_of_milk fb:en.mascarpone)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01sy7q fb:food.cheese.source_of_milk ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what animal does marscapone cheese come from", 
    "id": 186
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.delta_delta_delta fb:education.fraternity_sorority.founded_location ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Boston University"
    ], 
    "targetFormula": "(!fb:education.fraternity_sorority.founded_location fb:en.delta_delta_delta)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04m8fy fb:education.fraternity_sorority.founded_location ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "at what school was delta delta delta founded", 
    "id": 187
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.the_sopranos fb:tv.tv_program.currently_in_production ?x1 } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(!fb:tv.tv_program.currently_in_production fb:en.the_sopranos)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kfv9 fb:tv.tv_program.currently_in_production ?x1 } LIMIT 9999", 
    "utterance": "what production is the sopranos currently in", 
    "id": 188
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.japanese fb:language.human_language.writing_system ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:language.human_language.writing_system fb:en.japanese))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03_9r fb:language.human_language.writing_system ?x1 } } } LIMIT 9999", 
    "utterance": "how many writing systems are used in japanese", 
    "id": 189
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.earth fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.earth) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "1500000000", 
      "1650000000", 
      "2519000000", 
      "1262000000", 
      "200000000", 
      "3134442541", 
      "3040197182", 
      "3081388863", 
      "3199390561", 
      "3264900618", 
      "3331758502", 
      "3401814566", 
      "3471602206", 
      "3542131429", 
      "3616683610", 
      "3691696231", 
      "3768664045", 
      "3844845817", 
      "3920059440", 
      "3996100830", 
      "4144149614", 
      "4217583144", 
      "4292564634", 
      "4369283186", 
      "4446509520", 
      "4525211935", 
      "4606764747", 
      "4688765928", 
      "4770443389", 
      "4853948076", 
      "4940216419", 
      "5028661457", 
      "5117852621", 
      "5206596300", 
      "5383011907", 
      "5465646081", 
      "5548906924", 
      "5631063822", 
      "5714716950", 
      "5796196182", 
      "5877983064", 
      "5958950337", 
      "6038635376", 
      "6118131162", 
      "6426093254", 
      "6195665261", 
      "6272454870", 
      "6349177990", 
      "6503186030", 
      "6580545179", 
      "6737188032", 
      "6894377794", 
      "4070903396", 
      "6658468720", 
      "6815849599", 
      "6973738433", 
      "7057075000", 
      "5296211383"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.earth))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02j71 fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.02j71) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population estimated in the world", 
    "id": 190
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.tv_producer_term.producer fb:en.danny_devito . FILTER (?x2 != fb:en.danny_devito) . ?x2 fb:tv.tv_producer_term.program ?x1 } } } LIMIT 9999", 
    "result": [
      "5"
    ], 
    "targetFormula": "(count (!fb:tv.tv_producer_term.program ((lambda x (fb:tv.tv_producer_term.producer (var x))) fb:en.danny_devito)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.tv_producer_term.producer fb:m.0q9kd . FILTER (?x2 != fb:m.0q9kd) . ?x2 fb:tv.tv_producer_term.program ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv programs did danny devito produce", 
    "id": 191
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.the_mind_eraser fb:amusement_parks.ride.inversions ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:amusement_parks.ride.inversions fb:en.the_mind_eraser))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0d6l4d fb:amusement_parks.ride.inversions ?x1 } } } LIMIT 9999", 
    "utterance": "how many inversions does the mind eraser have", 
    "id": 192
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_lord_of_the_rings fb:fictional_universe.work_of_fiction.setting ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Middle-earth", 
      "Arda", 
      "Rivendell", 
      "Bag End", 
      "Lothl\u00f3rien"
    ], 
    "targetFormula": "(!fb:fictional_universe.work_of_fiction.setting fb:en.the_lord_of_the_rings)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07bz5 fb:fictional_universe.work_of_fiction.setting ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what universe is the lord of the rings set in", 
    "id": 193
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.microsoft_word fb:computer.software.latest_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2010-07-15"
    ], 
    "targetFormula": "(!fb:computer.software.latest_release_date fb:en.microsoft_word)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.052yv fb:computer.software.latest_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was the latest release of microsoft word", 
    "id": 194
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.tudor_dynasty fb:royalty.royal_line.monarchs_from_this_line ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:royalty.royal_line.monarchs_from_this_line fb:en.tudor_dynasty))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07ply fb:royalty.royal_line.monarchs_from_this_line ?x1 } } } LIMIT 9999", 
    "utterance": "how many monarchs are from the house of tutor", 
    "id": 195
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.new_york_city_subway fb:metropolitan_transit.transit_system.transit_lines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Line 4, NYC Subway", 
      "Line 5, NYC Subway", 
      "Line 2, NYC Subway", 
      "Line C, NYC Subway", 
      "Line D, NYC Subway", 
      "Line M, NYC Subway", 
      "Line N, NYC Subway", 
      "Line R, NYC Subway", 
      "Line 3, NYC Subway", 
      "Line Q, NYC Subway", 
      "Line E, NYC Subway", 
      "Line G, NYC Subway", 
      "Line V, NYC Subway", 
      "Line W, NYC Subway", 
      "Line 1, NYC Subway", 
      "Line F, NYC Subway", 
      "Line J, NYC Subway", 
      "Line Z, NYC Subway", 
      "Line 7, NYC Subway", 
      "Line L, NYC Subway", 
      "C", 
      "A", 
      "F", 
      "M", 
      "Line B, NYC Subway", 
      "E", 
      "Line S - 42nd Street, NYC Subway", 
      "D", 
      "Line S - Rockaway Park, NYC Subway", 
      "Line 6, NYC Subway", 
      "K", 
      "Line A, NYC Subway", 
      "Line S - Franklin Avenue, NYC Subway", 
      "G", 
      "B"
    ], 
    "targetFormula": "(!fb:metropolitan_transit.transit_system.transit_lines fb:en.new_york_city_subway)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01pz3b fb:metropolitan_transit.transit_system.transit_lines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the lines of the new york city subway", 
    "id": 196
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.procter_gamble fb:business.business_operation.net_profit ?x1 . FILTER (?x1 != fb:en.procter_gamble) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "12075000000", 
      "3763000000", 
      "8684000000", 
      "81700000", 
      "577300000", 
      "13436000000", 
      "52300000", 
      "1206000000", 
      "187400000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:business.business_operation.net_profit (var x))) fb:en.procter_gamble))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.01qygl fb:business.business_operation.net_profit ?x1 . FILTER (?x1 != fb:m.01qygl) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what was procter & gamble's net profit in 1955", 
    "id": 197
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award fb:en.nobel_peace_prize . FILTER (?x2 != fb:en.nobel_peace_prize) . ?x2 fb:award.award_honor.award_winner ?x1 } } } LIMIT 9999", 
    "result": [
      "119"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award_winner ((lambda x (fb:award.award_honor.award (var x))) fb:en.nobel_peace_prize)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award fb:m.05f3q . FILTER (?x2 != fb:m.05f3q) . ?x2 fb:award.award_honor.award_winner ?x1 } } } LIMIT 9999", 
    "utterance": "how many people have won the nobel peace prize", 
    "id": 198
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.batman_1 fb:comic_books.comic_book_issue.characters_on_cover ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Batman", 
      "Dick Grayson"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_issue.characters_on_cover fb:en.batman_1)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02wkbg7 fb:comic_books.comic_book_issue.characters_on_cover ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what characters were on the cover of batman #1", 
    "id": 199
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.fight_of_the_century fb:boxing.boxing_match.weight_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Heavyweight"
    ], 
    "targetFormula": "(!fb:boxing.boxing_match.weight_class fb:en.fight_of_the_century)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01dbcm fb:boxing.boxing_match.weight_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what weight class was the fight of the century", 
    "id": 200
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.magnum_xl-200 fb:amusement_parks.ride.cost ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "8000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (!fb:amusement_parks.ride.cost fb:en.magnum_xl-200))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.063h66 fb:amusement_parks.ride.cost ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what was the cost of building the magnum xl-200", 
    "id": 201
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.united_states_navy fb:military.armed_force.personnel ?x2 . ?x2 fb:military.military_service.military_person ?x1 } } } LIMIT 9999", 
    "result": [
      "2006"
    ], 
    "targetFormula": "(count (!fb:military.military_service.military_person (!fb:military.armed_force.personnel fb:en.united_states_navy)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.07wg3 fb:military.armed_force.personnel ?x2 . ?x2 fb:military.military_service.military_person ?x1 } } } LIMIT 9999", 
    "utterance": "how many politicians have served in the us navy", 
    "id": 202
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ali_farka_toure fb:music.artist.label ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "World Circuit"
    ], 
    "targetFormula": "(!fb:music.artist.label fb:en.ali_farka_toure)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01kcx_w fb:music.artist.label ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what record label was ali farka toure signed to", 
    "id": 203
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.six_feet_under fb:tv.tv_program.air_date_of_final_episode ?x1 } LIMIT 9999", 
    "result": [
      "2005-08-21"
    ], 
    "targetFormula": "(!fb:tv.tv_program.air_date_of_final_episode fb:en.six_feet_under)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01g03q fb:tv.tv_program.air_date_of_final_episode ?x1 } LIMIT 9999", 
    "utterance": "when did the last episode of six feet under air", 
    "id": 204
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:business.employment_tenure.company fb:en.die_welt . FILTER (?x1 != fb:en.die_welt) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2000\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2001\"^^xsd:datetime)) . ?x1 fb:business.employment_tenure.to ?x2 . FILTER (?x1 != \"2000\"^^xsd:datetime) . ?x1 fb:business.employment_tenure.title fb:en.editor_in_chief . FILTER (?x1 != fb:en.editor_in_chief) . ?x1 fb:business.employment_tenure.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.employment_tenure.person (and (and ((lambda x (fb:business.employment_tenure.company (var x))) fb:en.die_welt) ((lambda x (fb:business.employment_tenure.to (var x))) (date 2000 -1 -1))) ((lambda x (fb:business.employment_tenure.title (var x))) fb:en.editor_in_chief)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:business.employment_tenure.company fb:m.04gzkw . FILTER (?x1 != fb:m.04gzkw) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2000\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2001\"^^xsd:datetime)) . ?x1 fb:business.employment_tenure.to ?x2 . FILTER (?x1 != \"2000\"^^xsd:datetime) . ?x1 fb:business.employment_tenure.title fb:m.02wk2cy . FILTER (?x1 != fb:m.02wk2cy) . ?x1 fb:business.employment_tenure.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was the editor in chief of die welt in 2000", 
    "id": 205
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.brooklyn_bridge fb:architecture.structure.architectural_style ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gothic Revival architecture"
    ], 
    "targetFormula": "(!fb:architecture.structure.architectural_style fb:en.brooklyn_bridge)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cv4c fb:architecture.structure.architectural_style ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what architectural style is the brooklyn bridge", 
    "id": 206
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06mq7 fb:radio.radio_subject.programs_with_this_subject ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:radio.radio_subject.programs_with_this_subject fb:m.06mq7))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06mq7 fb:radio.radio_subject.programs_with_this_subject ?x1 } } } LIMIT 9999", 
    "utterance": "how many radio programs about science are there", 
    "id": 207
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07bs0 fb:olympics.olympic_sport.events ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:olympics.olympic_sport.events fb:m.07bs0))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07bs0 fb:olympics.olympic_sport.events ?x1 } } } LIMIT 9999", 
    "utterance": "how many tennis events are there at the olympics", 
    "id": 208
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.san_francisco_zoo fb:zoos.zoo.num_species ?x1 } LIMIT 9999", 
    "result": [
      "250"
    ], 
    "targetFormula": "(!fb:zoos.zoo.num_species fb:en.san_francisco_zoo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05b4fd fb:zoos.zoo.num_species ?x1 } LIMIT 9999", 
    "utterance": "how many species does the san francisco zoo have", 
    "id": 209
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.pencarrow_head_lighthouse fb:architecture.lighthouse.year_first_lit ?x1 } LIMIT 9999", 
    "result": [
      "1859"
    ], 
    "targetFormula": "(!fb:architecture.lighthouse.year_first_lit fb:en.pencarrow_head_lighthouse)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02z111d fb:architecture.lighthouse.year_first_lit ?x1 } LIMIT 9999", 
    "utterance": "when was the pencarrow head lighthouse first lit", 
    "id": 210
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.comet_halley fb:astronomy.comet.meteor_shower_spawned ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Orionids", 
      "Eta Aquariids"
    ], 
    "targetFormula": "(!fb:astronomy.comet.meteor_shower_spawned fb:en.comet_halley)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0ch3v fb:astronomy.comet.meteor_shower_spawned ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what meteor showers has the comet halley spawned", 
    "id": 211
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0599h7b fb:freebase.list.entries ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:freebase.list.entries fb:m.0599h7b))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0599h7b fb:freebase.list.entries ?x1 } } } LIMIT 9999", 
    "utterance": "how many actors use their middle name or initial", 
    "id": 212
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.nikon_d80 fb:digicams.digital_camera.lcd_pixels ?x1 } LIMIT 9999", 
    "result": [
      "230000"
    ], 
    "targetFormula": "(!fb:digicams.digital_camera.lcd_pixels fb:en.nikon_d80)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0g22rl fb:digicams.digital_camera.lcd_pixels ?x1 } LIMIT 9999", 
    "utterance": "what is the lcd screen resolution of a nikon d80", 
    "id": 213
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:medicine.disease.symptoms fb:en.severe_headache . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Leukemia", 
      "AIDS", 
      "Anxiety disorder", 
      "Dengue fever", 
      "Lyme disease", 
      "Cellulitis", 
      "Syphilis", 
      "Salmonellosis", 
      "Viral Gastroenteritis", 
      "Panic disorder", 
      "Myocarditis", 
      "Inflammatory heart disease", 
      "Meningitis", 
      "Cardiovascular disease", 
      "Stroke", 
      "Brain tumor", 
      "HIV", 
      "Heat Stroke", 
      "Hyperthermia", 
      "Pre-eclampsia", 
      "Hepatitis", 
      "Small Cell Lung Carcinoma", 
      "Chickenpox", 
      "Herpes zoster", 
      "Chronic fatigue syndrome", 
      "Somatization disorder", 
      "Carbon monoxide poisoning", 
      "West Nile fever", 
      "HELLP syndrome", 
      "Pityriasis rosea", 
      "Hypertension", 
      "Typhoid fever", 
      "Paget's disease of bone", 
      "Chronic renal failure", 
      "Yellow fever", 
      "Influenza", 
      "Acromegaly", 
      "Otitis media", 
      "Jet lag", 
      "Genital herpes", 
      "Gastroenteritis", 
      "Anemia", 
      "Eclampsia", 
      "Sinusitis", 
      "Cerebral edema", 
      "Astigmatism", 
      "Myopia", 
      "Anorexia nervosa", 
      "Streptococcal pharyngitis", 
      "Cushing's syndrome", 
      "Crohn's disease", 
      "Herpes simplex", 
      "Aplastic anemia", 
      "M\u00e9ni\u00e8re's disease", 
      "Polymorphous light eruption", 
      "Tonsillitis", 
      "Viral meningitis", 
      "Encephalitis", 
      "Bell's palsy", 
      "Premenstrual syndrome", 
      "Generalized anxiety disorder", 
      "Presbyopia", 
      "Meningeal Tuberculosis", 
      "Sunburn", 
      "Altitude sickness", 
      "Common cold", 
      "Cerebral aneurysm", 
      "Concussion", 
      "Neurofibromatosis", 
      "Meningococcal disease", 
      "Vasculitis"
    ], 
    "targetFormula": "(fb:medicine.disease.symptoms fb:en.severe_headache)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:medicine.disease.symptoms fb:m.0j5fv . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what conditions have symptoms including headache", 
    "id": 214
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.spanish_peseta fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "ESP"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.spanish_peseta)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.014z03 fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is the currency code for the spanish peseta", 
    "id": 215
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.jack_albertson . FILTER (?x2 != fb:en.jack_albertson) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "25"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.jack_albertson)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.0hw6_ . FILTER (?x2 != fb:m.0hw6_) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances did jack albertson do", 
    "id": 216
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04jpg2p fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Colleen Atwood"
    ], 
    "targetFormula": "(!fb:film.film.costume_design_by fb:m.04jpg2p)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04jpg2p fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the costumes for alice in wonderland", 
    "id": 217
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.taylor_made_piano_a_jazz_history fb:radio.radio_program.episodes ?x1 } } } LIMIT 9999", 
    "result": [
      "13"
    ], 
    "targetFormula": "(count (!fb:radio.radio_program.episodes fb:en.taylor_made_piano_a_jazz_history))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.05v20r_ fb:radio.radio_program.episodes ?x1 } } } LIMIT 9999", 
    "utterance": "how many episodes of taylor made piano were there", 
    "id": 218
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.eiffel_tower fb:architecture.building.building_function ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Transmitter station", 
      "Observation tower"
    ], 
    "targetFormula": "(!fb:architecture.building.building_function fb:en.eiffel_tower)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02j81 fb:architecture.building.building_function ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the building function of the eiffel tower", 
    "id": 219
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.london_underground fb:metropolitan_transit.transit_system.daily_riders ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:measurement_unit.dated_integer.number (!fb:metropolitan_transit.transit_system.daily_riders fb:en.london_underground)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.04jgv fb:metropolitan_transit.transit_system.daily_riders ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "utterance": "how many people ride the london underground daily", 
    "id": 220
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:en.newscaster . FILTER (?x1 != fb:en.newscaster) . ?x1 fb:tv.tv_regular_personal_appearance.program fb:en.cbs_evening_news . FILTER (?x1 != fb:en.cbs_evening_news) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Katie Couric", 
      "Dan Rather", 
      "Douglas Edwards", 
      "Scott Pelley", 
      "Walter Cronkite", 
      "Russ Mitchell", 
      "Bob Schieffer"
    ], 
    "targetFormula": "(!fb:tv.tv_regular_personal_appearance.person (and ((lambda x (fb:tv.tv_regular_personal_appearance.appearance_type (var x))) fb:en.newscaster) ((lambda x (fb:tv.tv_regular_personal_appearance.program (var x))) fb:en.cbs_evening_news)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:m.025m070 . FILTER (?x1 != fb:m.025m070) . ?x1 fb:tv.tv_regular_personal_appearance.program fb:m.01bndp . FILTER (?x1 != fb:m.01bndp) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the present newscaster on cbs evening news", 
    "id": 221
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.andy_reid fb:american_football.football_coach.current_team_head_coached ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Kansas City Chiefs"
    ], 
    "targetFormula": "(!fb:american_football.football_coach.current_team_head_coached fb:en.andy_reid)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04s_26 fb:american_football.football_coach.current_team_head_coached ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what football team does andy reid currently coach", 
    "id": 222
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.world_boxing_association fb:boxing.boxing_sanctioning_body.titles ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "WBA World Champion"
    ], 
    "targetFormula": "(!fb:boxing.boxing_sanctioning_body.titles fb:en.world_boxing_association)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0n5qf fb:boxing.boxing_sanctioning_body.titles ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what titles does the world boxing association have", 
    "id": 223
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.thunder_ridge_ski_area fb:skiing.ski_area.number_of_runs ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:skiing.ski_area.number_of_runs fb:en.thunder_ridge_ski_area))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02qhs3m fb:skiing.ski_area.number_of_runs ?x1 } } } LIMIT 9999", 
    "utterance": "how many runs does the thunder ridge ski area have", 
    "id": 224
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.initial_design_and_construction_of_taj_mahal fb:projects.project.actual_cost ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "32000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (!fb:projects.project.actual_cost fb:en.initial_design_and_construction_of_taj_mahal))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.09jz4jt fb:projects.project.actual_cost ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "how much did the construction of the taj mahal cost", 
    "id": 225
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sunset_branch_library fb:library.public_library.library_system ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "San Francisco Public Library"
    ], 
    "targetFormula": "(!fb:library.public_library.library_system fb:en.sunset_branch_library)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02hqw49 fb:library.public_library.library_system ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what library system is the sunset branch library in", 
    "id": 226
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.object-oriented_programming fb:computer.programming_language_paradigm.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Java", 
      "Io", 
      "Curl", 
      "ELENA", 
      "T", 
      "ActionScript", 
      "Scala", 
      "MiniD", 
      "Inform", 
      "MetaL", 
      "Embarcadero Delphi", 
      "Sather", 
      "Simula", 
      "Eiffel", 
      "Mantra", 
      "D", 
      "Vala", 
      "SuperCollider", 
      "C++", 
      "J", 
      "CLU", 
      "Lasso", 
      "Common Lisp Object System", 
      "Common Lisp", 
      "NetRexx", 
      "Oaklisp", 
      "Rexx", 
      "Smalltalk", 
      "EuLisp", 
      "NewtonScript", 
      "Smalltalk YX", 
      "Visual Prolog", 
      "PHP", 
      "C#", 
      "Dylan", 
      "GOO", 
      "Oxygene", 
      "Tcl", 
      "Joule", 
      "Modula-3", 
      "Oberon-2", 
      "Oberon", 
      "Corba IDL", 
      "Python", 
      "Falcon", 
      "Caml", 
      "Lua", 
      "Scratch", 
      "Etoys", 
      "BETA", 
      "Z++", 
      "XLISP", 
      "ECMAScript", 
      "Component Pascal", 
      "Visual Basic .NET", 
      "Blitz BASIC", 
      "F#", 
      "ABAP", 
      "Q", 
      "Lexico", 
      "ZZT-oop", 
      "R", 
      "Pike", 
      "EusLisp Robot Programming Language", 
      "J#", 
      "Logtalk", 
      "Turing+", 
      "MooTools", 
      "Keykit", 
      "A++", 
      "VistaSmalltalk", 
      "Kite", 
      "S2", 
      "Frink", 
      "Nemerle", 
      "Groovy", 
      "Generic Java", 
      "CorbaScript", 
      "Prograph", 
      "Cecil", 
      "Processing", 
      "The Green Object Oriented Language", 
      "OTcl", 
      "TOM", 
      "Clascal", 
      "Aikido Programming Language", 
      ".QL", 
      "Polyphonic C#", 
      "AmbientTalk", 
      "Vala", 
      "Windows PowerShell", 
      "Judoscript", 
      "QUILL", 
      "Cobra", 
      "Dialect", 
      "Cool", 
      "Neko", 
      "F-Script", 
      "Unicon", 
      "LPC", 
      "SETL", 
      "S", 
      "Water programming language", 
      "Claire", 
      "ROOP", 
      "Afnix programming language", 
      "Aldor", 
      "Abel programming language", 
      "Extensible ML", 
      "O'Haskell", 
      "Pnuts", 
      "Fuxi Programming Language", 
      "Felix", 
      "Object Lisp", 
      "ObjectLOGO", 
      "Object Oberon", 
      "Object-Oriented Turing", 
      "C*", 
      "Nu", 
      "LiveCode", 
      "Hugo", 
      "Python for S60", 
      "Objective-J", 
      "Object REXX", 
      "E", 
      "Microsoft Small Basic", 
      "Mercury", 
      "Karel", 
      "Scriptol", 
      "MOO", 
      "MATLAB", 
      "BeanShell", 
      "SMALL", 
      "Axum", 
      "Harbour", 
      "X10", 
      "Ferite", 
      "Yoix", 
      "Compact Application Solution Language", 
      "Bistro", 
      "SNOBOL", 
      "Turing", 
      "Squirrel", 
      "A\u266f (Axiom)", 
      "Sing#", 
      "Spec#", 
      "Fj\u00f6lnir", 
      "Tea", 
      "Alice", 
      "Turbo Pascal", 
      "Karel++", 
      "Little b", 
      "Objeck", 
      "Dao Language", 
      "Realbasic", 
      "JADE", 
      "Visual Basic", 
      "Lisaac", 
      "Speedcoding", 
      "Alpoca", 
      "Cadence SKILL", 
      "Chapel", 
      "AgentSheets", 
      "PowerBASIC", 
      "CoffeeScript", 
      "MoonScript", 
      "Pike", 
      "F*", 
      "UnrealScript", 
      "Nimrod", 
      "Oz", 
      "Objective-C", 
      "JavaScript", 
      "Lisp", 
      "Ruby", 
      "COBOL", 
      "Self", 
      "Fortran", 
      "ColdFusion Markup Language", 
      "Perl", 
      "Object Pascal", 
      "C\u03c9", 
      "Cach\u00e9 ObjectScript", 
      "Squeak", 
      "Visual FoxPro", 
      "Racket", 
      "Game Maker Language", 
      "Ioke", 
      "JavaFX Script", 
      "Bigloo"
    ], 
    "targetFormula": "(!fb:computer.programming_language_paradigm.languages fb:en.object-oriented_programming)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05prj fb:computer.programming_language_paradigm.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some object-oriented programming languages", 
    "id": 227
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.renoir_in_the_20th_century fb:exhibitions.exhibition.curators ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sylvie Patry", 
      "J.Patrice Marandel", 
      "Claudia Einecke", 
      "Joseph J. Rishel"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibition.curators fb:en.renoir_in_the_20th_century)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.076_mw1 fb:exhibitions.exhibition.curators ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who were the curators for renoir in the 20th century", 
    "id": 228
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:american_football.football_historical_roster_position.position_s fb:en.quarterback . FILTER (?x1 != fb:en.quarterback) . ?x1 fb:american_football.football_historical_roster_position.team fb:en.green_bay_packers . FILTER (?x1 != fb:en.green_bay_packers) . ?x1 fb:american_football.football_historical_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Mark Brunell", 
      "Brian Brohm", 
      "Alan Autry", 
      "Nick Hill", 
      "Bart Starr", 
      "Matt Flynn", 
      "Brett Favre", 
      "Ty Detmer"
    ], 
    "targetFormula": "(!fb:american_football.football_historical_roster_position.player (and ( (lambda x (fb:american_football.football_historical_roster_position.position_s (var x))) fb:en.quarterback) ( (lambda x (fb:american_football.football_historical_roster_position.team (var x))) fb:en.green_bay_packers)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:american_football.football_historical_roster_position.position_s fb:m.06b1q . FILTER (?x1 != fb:m.06b1q) . ?x1 fb:american_football.football_historical_roster_position.team fb:m.03b3j . FILTER (?x1 != fb:m.03b3j) . ?x1 fb:american_football.football_historical_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who used to be quarterback for the green bay packers", 
    "id": 229
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.canadian_national_parks fb:protected_sites.park_system.member_parks ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gulf Islands National Park Reserve", 
      "Pacific Rim National Park Reserve"
    ], 
    "targetFormula": "(!fb:protected_sites.park_system.member_parks fb:en.canadian_national_parks)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02hj_s_ fb:protected_sites.park_system.member_parks ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what parks are in the canadian national parks system", 
    "id": 230
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_honor.award_winner fb:en.danny_devito . FILTER (?x1 != fb:en.danny_devito) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1981\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1982\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"1981\"^^xsd:datetime) . ?x1 fb:award.award_honor.honored_for ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Taxi"
    ], 
    "targetFormula": "(!fb:award.award_honor.honored_for (and ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.danny_devito) ((lambda x (fb:award.award_honor.year (var x))) (date 1981 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_honor.award_winner fb:m.0q9kd . FILTER (?x1 != fb:m.0q9kd) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1981\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1982\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"1981\"^^xsd:datetime) . ?x1 fb:award.award_honor.honored_for ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "what movie did danny devito win an award for in 1981", 
    "id": 231
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.south_america fb:location.location.events ?x1 } } } LIMIT 9999", 
    "result": [
      "17"
    ], 
    "targetFormula": "(count (!fb:location.location.events fb:en.south_america))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06n3y fb:location.location.events ?x1 } } } LIMIT 9999", 
    "utterance": "how many historical events happened in south america", 
    "id": 232
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:ice_hockey.hockey_roster_position.team fb:en.new_york_rangers . FILTER (?x1 != fb:en.new_york_rangers) . ?x1 fb:ice_hockey.hockey_roster_position.player fb:en.ryan_callahan . FILTER (?x1 != fb:en.ryan_callahan) . ?x1 fb:ice_hockey.hockey_roster_position.number ?x2 } LIMIT 9999", 
    "result": [
      "24"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_roster_position.number (and ((lambda x (fb:ice_hockey.hockey_roster_position.team (var x))) fb:en.new_york_rangers) ((lambda x (fb:ice_hockey.hockey_roster_position.player (var x))) fb:en.ryan_callahan)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:ice_hockey.hockey_roster_position.team fb:m.0hmtk . FILTER (?x1 != fb:m.0hmtk) . ?x1 fb:ice_hockey.hockey_roster_position.player fb:m.026y0_s . FILTER (?x1 != fb:m.026y0_s) . ?x1 fb:ice_hockey.hockey_roster_position.number ?x2 } LIMIT 9999", 
    "utterance": "what number is ryan callahan on the new york rangers", 
    "id": 233
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:event.speech_or_presentation.speech_topic fb:en.world_war_ii . FILTER (?x2 != fb:en.world_war_ii) . ?x2 fb:event.speech_or_presentation.presented_work ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:event.speech_or_presentation.presented_work ((lambda x (fb:event.speech_or_presentation.speech_topic (var x))) fb:en.world_war_ii)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:event.speech_or_presentation.speech_topic fb:m.081pw . FILTER (?x2 != fb:m.081pw) . ?x2 fb:event.speech_or_presentation.presented_work ?x1 } } } LIMIT 9999", 
    "utterance": "how many speeches have been given about world war ii", 
    "id": 234
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.the_home_depot fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:business.business_operation.industry fb:en.the_home_depot))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01zj1t fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "utterance": "how many different industries are there in home depot", 
    "id": 235
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.alluminum_alloy_v6 fb:automotive.engine.horsepower ?x1 } LIMIT 9999", 
    "result": [
      "240"
    ], 
    "targetFormula": "(!fb:automotive.engine.horsepower fb:en.alluminum_alloy_v6)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03m2jd6 fb:automotive.engine.horsepower ?x1 } LIMIT 9999", 
    "utterance": "what's the horsepower of an alluminum-alloy v6 engine", 
    "id": 236
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.ss_great_britain fb:architecture.museum.established ?x1 } LIMIT 9999", 
    "result": [
      "2005"
    ], 
    "targetFormula": "(!fb:architecture.museum.established fb:en.ss_great_britain)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0mglb fb:architecture.museum.established ?x1 } LIMIT 9999", 
    "utterance": "when was the ss great britain established as a museum", 
    "id": 237
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:business.business_operation.industry fb:en.automobile } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (fb:business.business_operation.industry fb:en.automobile))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:business.business_operation.industry fb:m.0k4j } } } LIMIT 9999", 
    "utterance": "how many organizations are in the automobile industry", 
    "id": 238
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:architecture.ownership.owner fb:en.john_j_raskob . FILTER (?x1 != fb:en.john_j_raskob) . ?x1 fb:architecture.ownership.structure fb:en.empire_state_building . FILTER (?x1 != fb:en.empire_state_building) . ?x1 fb:architecture.ownership.end_date ?x2 } LIMIT 9999", 
    "result": [
      "1950"
    ], 
    "targetFormula": "(!fb:architecture.ownership.end_date (and ((lambda x (fb:architecture.ownership.owner (var x))) fb:en.john_j_raskob) ((lambda x (fb:architecture.ownership.structure (var x))) fb:en.empire_state_building)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:architecture.ownership.owner fb:m.05cm0q . FILTER (?x1 != fb:m.05cm0q) . ?x1 fb:architecture.ownership.structure fb:m.02nd_ . FILTER (?x1 != fb:m.02nd_) . ?x1 fb:architecture.ownership.end_date ?x2 } LIMIT 9999", 
    "utterance": "when did john j. raskob own the empire state building", 
    "id": 239
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:book.written_work.part_of_series fb:en.the_chronicles_of_narnia . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Prince Caspian", 
      "The Magician's Nephew", 
      "The Horse and His Boy", 
      "The Silver Chair", 
      "The Voyage of the Dawn Treader", 
      "The Lion, the Witch and the Wardrobe", 
      "The Last Battle"
    ], 
    "targetFormula": "(fb:book.written_work.part_of_series fb:en.the_chronicles_of_narnia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:book.written_work.part_of_series fb:m.07k3w . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the books in the chronicles of narnia series", 
    "id": 240
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_athlete_affiliation.country fb:en.germany . FILTER (?x1 != fb:en.germany) . ?x1 fb:olympics.olympic_athlete_affiliation.athlete ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Sara Goller", 
      "Paul Schulze", 
      "S\u00f6ren Ludolph", 
      "Joseph Rosemeyer", 
      "Christopher V\u00f6lk", 
      "Birgit Prinz", 
      "Olaf Ludwig", 
      "Michael R\u00f6sch", 
      "Stefanie B\u00f6hler", 
      "Jan van Eijden", 
      "Tobias Schellenberg", 
      "Sven Knipphals", 
      "J\u00f6rg Dallmann", 
      "Anni Friesinger-Postma", 
      "Sandra Kiriasis", 
      "Dimitri Peters", 
      "Tyson Heung", 
      "Martin Schmitt", 
      "Michael Neumayer", 
      "Stephan Hocke", 
      "Michael Uhrmann", 
      "Leena G\u00fcnther", 
      "Karl Neumer", 
      "Max G\u00f6tze", 
      "Rudolf Katzer", 
      "Hermann Martens", 
      "Chris Kaman", 
      "Janine Berger", 
      "Christin Priebst", 
      "Linda Stahl", 
      "Tim Ohlbrecht", 
      "Christina Obergf\u00f6ll", 
      "Hannes Aigner", 
      "Monika Sozanska", 
      "Jochen K\u00fchner", 
      "Urs K\u00e4ufer", 
      "Martin K\u00fchner", 
      "Martin H\u00e4ner", 
      "Stefan Hartel", 
      "Imke Duplitzer", 
      "Bert Grabsch", 
      "Enrico K\u00f6lling", 
      "Anne Cibis", 
      "Eric Knittel", 
      "Henrik Stehlik", 
      "Jens Filbrich", 
      "Sebastian Haseney", 
      "Nicole Herschmann", 
      "Erik Zabel", 
      "Adelheid Morath", 
      "Erik Balnuweit", 
      "Tino H\u00e4ber", 
      "Frank Rommel", 
      "Helge Meeuw", 
      "Madeleine Sandig", 
      "Andrej Klimovets", 
      "Aika Klein", 
      "Frank Mantek", 
      "Christoph Schubert", 
      "Sven Felski", 
      "Nadine Jarosch", 
      "Benjamin Kleibrink", 
      "Nadine Capellmann", 
      "Christina Sch\u00fctze", 
      "Frank Staebler", 
      "Patrick Hausding", 
      "Christiane Klopsch", 
      "Dorothee Schneider", 
      "Kristina Sprehe", 
      "Markus M\u00fcnch", 
      "Julia Richter", 
      "Benjamin Behrla", 
      "Steffen Wesemann", 
      "Kurt Behrens", 
      "Tobias Angerer", 
      "Mona Barthel", 
      "Ronny Ackermann", 
      "Georg Hettich", 
      "Rudolf Rauer", 
      "Heiner Brand", 
      "Matthias B\u00fchler", 
      "Robert Harting", 
      "Angela Maurer", 
      "Matthias Steiner", 
      "Philipp Zeller", 
      "John Degenkolb", 
      "Friederike Belcher", 
      "Katharina Otte", 
      "Sonja Scheibl", 
      "Julia G\u00f6rges", 
      "Meredith Michaels-Beerbaum", 
      "Christian Reif", 
      "Marcus Popp", 
      "Kathrin Kadelbach", 
      "Lena Schoeneborn", 
      "Philipp Kohlschreiber", 
      "Marcel Sieberg", 
      "Anna Dogonadze", 
      "Alexander Kosenkow", 
      "Michael Layer", 
      "Jan Frodeno", 
      "Christoph Fildebrandt", 
      "Johannes Schoettler", 
      "Kerstin Thiele", 
      "Lisa Ryzih", 
      "Oksana Chusovitina", 
      "Ren\u00e9 Enders", 
      "Moritz F\u00fcrste", 
      "Tina Dietze", 
      "Martin Sauer", 
      "Florian Mennigen", 
      "Kristof Wilke", 
      "Richard Schmidt", 
      "Filip Adamski", 
      "Carina B\u00e4r", 
      "Maximilian Reinelt", 
      "Andreas Kuffner", 
      "Eric Johannesen", 
      "Lukas Mueller", 
      "Irina Mikitenko", 
      "Fanny Rinne", 
      "Janne M\u00fcller-Wieland", 
      "Max Hoff", 
      "Tina Manker", 
      "Sosthene Moguenara", 
      "Clemens Rapp", 
      "Marco Koch", 
      "Jens Fiedler", 
      "Theodor Leupold", 
      "Roger Kluge", 
      "Toni Merkens", 
      "Michael Kraus", 
      "Timo We\u00df", 
      "Andreas Kl\u00f6den", 
      "Robert Bartko", 
      "Jochen Hecht", 
      "Sabine Krantz", 
      "Carsten Wolf", 
      "Stephanie Schiller", 
      "Franziska Weber", 
      "Jonathan Erdmann", 
      "Christopher Linke", 
      "Rico Freimuth", 
      "Stefan K\u00f6llner", 
      "Dimitrij Ovtcharov", 
      "Timo Boll", 
      "Bastian Steger", 
      "Sandra Smisek", 
      "Martin Hollstein", 
      "Maik Baier", 
      "Xaver Hoffmann", 
      "Andr\u00e9 We\u00dfels", 
      "Yasmin Kwadwo", 
      "Constanze Siering", 
      "Angelique Kerber", 
      "Christopher Kas", 
      "G\u00fcnther Haase", 
      "Alexandra Bujdoso", 
      "Georg Grozer", 
      "Alexandra Engelhardt", 
      "Jutta Niehaus", 
      "Heike Henkel", 
      "Katrin Holtwick", 
      "Magdalena Neuner", 
      "Kathrin Klaas", 
      "Wu Jiaduo", 
      "Jens Voigt", 
      "Ina-Yoko Teutenberg", 
      "Ludger Beerbaum", 
      "Felix Drahotta", 
      "Romy Tarangul", 
      "Svenja Bazlen", 
      "Nina Hasselmann", 
      "Jan Ullrich", 
      "Daniel Unger", 
      "Mirko Englich", 
      "Annett Neumann", 
      "Irene Ivancan", 
      "Christin Steuer", 
      "Sabine Spitz", 
      "Silke H\u00f6rmann", 
      "Markus Steuerwald", 
      "Mandy Haase", 
      "Sebastian Schmidt", 
      "Daniela Schultze", 
      "Luis Brethauer", 
      "Martin Wolfram", 
      "Thilo Stralkowski", 
      "Yvonne Frank", 
      "Stephan Kr\u00fcger", 
      "Petra Rossner", 
      "Susanne Hahn", 
      "Julian Reus", 
      "Moritz Milatz", 
      "Max G\u00fcnth\u00f6r", 
      "Silvio Schirrmeister", 
      "Frank Henze", 
      "David Schr\u00f6der", 
      "Sideris Tasiadis", 
      "Claudia K\u00fcnzel", 
      "Kevin Kuske", 
      "Helen Langehanenberg", 
      "Amelie Kober", 
      "Julius Brink", 
      "Tony Martin", 
      "Jonas Reckermann", 
      "Claudia H\u00e4usler", 
      "Dirk Nowitzki", 
      "Alexander Grimm", 
      "Claudia Pechstein", 
      "Andr\u00e9 Lange", 
      "Adolf Werner", 
      "Martin Wierig", 
      "G\u00fcnter Hoffmann", 
      "Hans Luber", 
      "Natascha Keller", 
      "Stefan Nimke", 
      "Maximilian M\u00fcller", 
      "Oliver Korn", 
      "Benjamin We\u00df", 
      "Max Weinhold", 
      "Christopher Zeller", 
      "Matthias Witthaus", 
      "Florian Fuchs", 
      "Christopher Wesley", 
      "Jan Philipp Rabente", 
      "Oskar Deecke", 
      "Hinrich Romeike", 
      "David M\u00f6ller", 
      "David Speiser", 
      "Miryam Roper", 
      "Christopher Voelk", 
      "Franziska Goltz", 
      "Peter Kretschmer", 
      "Monika Wagner", 
      "Steffen Hamann", 
      "Sabine Englert", 
      "Lucille Opitz", 
      "Albert Z\u00fcrner", 
      "Hanka Kupfernagel", 
      "Kati Wilhelm", 
      "Evi Sachenbacher-Stehle", 
      "Martina Glagow", 
      "Alexander Resch", 
      "Andrea Henkel", 
      "Ralf Schumann", 
      "Torsten Jansen", 
      "Sonja Pfeilschifter", 
      "Christian Reitz", 
      "Munkhbayar Dorjsuren", 
      "Christine Brinker", 
      "Karsten Bindrich", 
      "Maik Eckhardt", 
      "Barbara Engleder", 
      "Beate Gauss", 
      "Claudia Verdicchio-Krause", 
      "Daniel Brodmeier", 
      "Florian Schmidt", 
      "Jessica Mager", 
      "Julian Justus", 
      "Ralf Buchheim", 
      "Tino Mohaupt", 
      "Matthias de Zordo", 
      "Annika Walter", 
      "Rudolf Karsch", 
      "Sabine Lisicki", 
      "Markus Ebner", 
      "Andrea Petkovic", 
      "Tobias Hauke", 
      "Simon Tischer", 
      "Lisa Brennauer", 
      "Erik Pfeifer", 
      "Kurt Kuschela", 
      "Celine Wilde", 
      "Andreas T\u00f6lzer", 
      "Georg Hoffmann", 
      "Andreas Wels", 
      "Nicolas Kiefer", 
      "Christophe Lambert", 
      "Tobias Englmaier", 
      "Steffen Uliczka", 
      "Janin Lindenberg", 
      "Andreas Ihle", 
      "Charlotte Becker", 
      "Paul Biedermann", 
      "Ralf Bartels", 
      "Britta Steffen", 
      "Dimitri Colupaev", 
      "Steffen Deibler", 
      "Tim Grohmann", 
      "Karl Schulze", 
      "Markus Deibler", 
      "Lauritz Schoof", 
      "Linus Lichtschlag", 
      "Judith Hauser", 
      "Ulrike Sennewald", 
      "Phillipp Wende", 
      "Claudia Malzahn", 
      "Nadine Kleinert", 
      "Adolf J\u00e4ger", 
      "Laura Ludwig", 
      "Jasmin Schornberg", 
      "Antje M\u00f6ldner-Schmidt", 
      "Alexandra Wenk", 
      "Aimo Heilmann", 
      "Anna-Lena Gr\u00f6nefeld", 
      "Stefan Kretzschmar", 
      "Daniel Kreutzer", 
      "Maike St\u00f6ckel", 
      "Michael Rich", 
      "Maral Feizbakhsh", 
      "Benjamin JONAS", 
      "Franz G\u00f6ring", 
      "Bj\u00f6rn Andrae", 
      "Jochen Sch\u00f6ps", 
      "Marcus B\u00f6hme", 
      "Axel Teichmann", 
      "Andrea Sch\u00f6pp", 
      "Bengt Zikarsky", 
      "Bj\u00f6rn Zikarsky", 
      "Ren\u00e9 Wolff", 
      "Sebastian Haupt", 
      "Aliona Savchenko", 
      "Anja Huber", 
      "Tim Schleicher", 
      "Sumeyye Manz", 
      "Gerald Ciolek", 
      "D\u00f6rte Lindner", 
      "Philipp Petzschner", 
      "Sabrina Mockenhaupt", 
      "Christian D\u00fcnnes", 
      "Alfred M\u00fcller", 
      "Henning Fritz", 
      "Miriam Welte", 
      "Nicolas Limbach", 
      "Kathrin Marchand", 
      "Robert Stanjek", 
      "Jan-Philip Glania", 
      "Sebastian Bayer", 
      "Thomas Lurz", 
      "Marie-Louise Dr\u00e4ger", 
      "Jan Felix Knobel", 
      "Andreas Waschburger", 
      "Britta Oppelt", 
      "Raphael Holzdeppe", 
      "Anja Dittmer", 
      "Simon Grotel\u00fcschen", 
      "Ronja Schuette", 
      "Martina Strutz", 
      "Verena Sailer", 
      "Marco Kutscher", 
      "Sandra Auffarth", 
      "Markus Baur", 
      "Michael Greis", 
      "Melanie Seeger", 
      "Andr\u00e9 H\u00f6hne", 
      "Jan Hempel", 
      "Max Weber", 
      "Andr\u00e9 Greipel", 
      "Maximilian Levy", 
      "Robert F\u00f6rstemann", 
      "Katharina Molitor", 
      "Rainer Sch\u00fcttler", 
      "Guido Fulst", 
      "Philipp Boy", 
      "Andreas Toba", 
      "Elisabeth Seitz", 
      "Sebastian Krimmer", 
      "Kim Bui", 
      "Renate Schneider", 
      "Cathrin Puhl", 
      "Fabian Wegmann", 
      "Patrick Femerling", 
      "Jens Lehmann", 
      "Kristina Vogel", 
      "Brigitte Wittig", 
      "Corinna Harrer", 
      "Kristina Hillmann", 
      "Lena M\u00fcller", 
      "Fabian Hamb\u00fcchen", 
      "Alyn Camara", 
      "Michael Schubert", 
      "Christian Schwarzer", 
      "Florian Kehrmann", 
      "Dominik Klein", 
      "Michael Haas", 
      "Trixi Worrack", 
      "Benjamin Starke", 
      "Michael Jung", 
      "Peter Joppich", 
      "Torsten Wustlich", 
      "Manuel Fumic", 
      "Judith Arndt", 
      "Tim Wiesk\u00f6tter", 
      "Daniela Schreiber", 
      "Anna R\u00fch", 
      "Stephan Feck", 
      "Ole Bischof", 
      "K\u00e4the K\u00f6hler", 
      "Juliane Schenk", 
      "Ariane Friedrich", 
      "Julia M\u00fcller", 
      "Brita Baldus", 
      "Helena Fromm", 
      "Christian vom Lehn", 
      "Jennifer Plass", 
      "Kay Matysik", 
      "Nick Matuhin", 
      "Gesa Felicitas Krause", 
      "Paul G\u00fcnther", 
      "Carolin Nytra", 
      "Conrad Stein", 
      "Fritz Lange", 
      "Patrick Bussler", 
      "Hermann Stork", 
      "Malte Mohr", 
      "Julia Fischer", 
      "Andreas Behm", 
      "Bj\u00f6rn Kircheisen", 
      "Ronald Rauhe", 
      "Uwe Peschel", 
      "Emil Schulz", 
      "Tatjana Pinto", 
      "David Storl", 
      "Jenny Wolf", 
      "Tobias Schneider", 
      "Jan Friesinger", 
      "Katrin Wagner", 
      "Marc K\u00fchne", 
      "Matthias H\u00f6pfner", 
      "Felix Neureuther", 
      "Monika Bergmann-Schmuderer", 
      "Robert Lehmann", 
      "Sarah Poewe", 
      "Sebastian Brendel", 
      "Britta Heidemann", 
      "Robin Szolkowy", 
      "Judith Hesse", 
      "Jan-Armin Eichhorn", 
      "Martin Putze", 
      "Tatjana H\u00fcfner", 
      "Andr\u00e9 Florsch\u00fctz", 
      "Patric Leitner", 
      "Ilka Semmler", 
      "Pascal Roller", 
      "Sebastian Praus", 
      "Ferdinand Gerz", 
      "Steffen Gebhardt", 
      "Esther Cremer", 
      "Birgit Michels", 
      "Nadine M\u00fcller", 
      "Susanne Rudolph", 
      "Andreas Dibowski", 
      "Peter Thomsen", 
      "Frank Ostholt", 
      "Ingrid Klimke", 
      "Dirk Schrade", 
      "Marion Wagner", 
      "Maria Kurjo", 
      "Marlene Sinnig", 
      "Annika Bruhn", 
      "Jan Jagla", 
      "Camilo Mayr", 
      "Siegfried Herrmann", 
      "Julia M\u00e4chtig", 
      "Heiko Meyer", 
      "Jana Berezko-Marggrander", 
      "Marcel Nguyen", 
      "Mira Bimperling", 
      "Nicole M\u00fcller", 
      "Sara Radman", 
      "Camilla Pfeffer", 
      "J\u00fcrgen Spie\u00df", 
      "Betty Heidler", 
      "Bj\u00f6rn Otto", 
      "Antje Buschschulte", 
      "Isabell Werth", 
      "Lukas Kampa", 
      "Denis Kaliberda", 
      "Patrick Follmann", 
      "Sebastian Bachmann", 
      "Tobias Schadewaldt", 
      "Rolf Aldag", 
      "Thomas Schneider", 
      "J\u00f6rg Fiedler", 
      "Bj\u00f6rn H\u00fcbner", 
      "Benedict Wagner", 
      "Max Hartung", 
      "Ricarda Multerer", 
      "Bjoern Huebner", 
      "Benedikt Wagner", 
      "Bernhard Knubel", 
      "Anne Haug", 
      "Lilli Schwarzkopf", 
      "Carolin Leonhardt", 
      "Jonas Ems", 
      "Marcus Gross", 
      "Lutz Altepost", 
      "Norman Br\u00f6ckl", 
      "Sascha Klein", 
      "Heike Kemmer", 
      "Cindy Roleder", 
      "S\u00f6ren Lausberg", 
      "Sebastian Schwarz", 
      "Christina Schwanitz", 
      "Carsten Schlangen", 
      "Alfred Braunschweiger", 
      "Christian Meyer", 
      "Ditte Kotzian", 
      "Heike Fischer", 
      "Benjamin Winter", 
      "Marco di Carli", 
      "Gregor Hauffe", 
      "Toni Seifert", 
      "Lars Wichert", 
      "Heide Wollert", 
      "Silke Lippok", 
      "Hendrik Feldwehr", 
      "Annika Schleu", 
      "Hannes Baumann", 
      "Julia Lepke", 
      "Katja Dieckow", 
      "Lisa Hahn", 
      "Marie M\u00e4vers", 
      "Nadja Drygalla", 
      "Patrick Wojcicki", 
      "Toni Wilhelm", 
      "Yannick Lebherz", 
      "Katrin Thiem", 
      "Moana Delle", 
      "Philip Heintz", 
      "Roland Schwarz", 
      "Andre Hartwig", 
      "Carolin Golubytskyi", 
      "Tim Wallburger", 
      "Niklas Zender", 
      "Jennifer Oeser", 
      "Bastian Seibt", 
      "Janne Friederike Meyer", 
      "Daniela Ansch\u00fctz-Thoms", 
      "J\u00fcrgen Schmidt", 
      "Robin Backhaus", 
      "Arian Nachbar", 
      "Gottlob Walz", 
      "Steffen Justus", 
      "Lucas Jakubczyk", 
      "Konrad Wysocki", 
      "Philipp Zwiener", 
      "Christian Prochnow", 
      "Laura Schwensen", 
      "Kristin Silbereisen", 
      "Kamghe Gaba", 
      "Christin Ulrich", 
      "Fabienne Kohlmann", 
      "Pascal Behrenbruch", 
      "Anke Brockmann", 
      "Christian Ahlmann", 
      "Anabel Balkenhol", 
      "Arne Gabius", 
      "Yvonne B\u00f6nisch", 
      "Anja Noske", 
      "Lars Hartig", 
      "Sven Schultze", 
      "Julia Rohde", 
      "Elena Richter", 
      "Marcus Ehning", 
      "Marcel Hacker", 
      "Marc Zwiebler", 
      "Ingo Kindervater", 
      "Annekatrin Thiele", 
      "Nora Subschinski", 
      "Lisa Vitting", 
      "Michael Fuchs", 
      "Jenny Mensing", 
      "Anton Braun", 
      "Caroline Ruhnau", 
      "Frithjof Kleen", 
      "Kerstin Hartmann", 
      "Theresa Michalak", 
      "Ronja Sch\u00fctte", 
      "Ulrike SenNoneald", 
      "Anne Eckner", 
      "Demond Greene", 
      "Eric Kr\u00fcger", 
      "Josephine Terlecki", 
      "Christiane Pilz", 
      "Jonas Plass", 
      "Silke Spiegelburg", 
      "Almir Velagi\u0107", 
      "Maik Petzold", 
      "Alexander John", 
      "Tobias Unger", 
      "Martin Keller"
    ], 
    "targetFormula": "(!fb:olympics.olympic_athlete_affiliation.athlete ((lambda x (fb:olympics.olympic_athlete_affiliation.country (var x))) fb:en.germany))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_athlete_affiliation.country fb:m.0345h . FILTER (?x1 != fb:m.0345h) . ?x1 fb:olympics.olympic_athlete_affiliation.athlete ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what german athletes have participated in the olympics", 
    "id": 241
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.jerry_seinfeld . FILTER (?x2 != fb:en.jerry_seinfeld) . ?x2 fb:tv.regular_tv_appearance.series ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.series ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.jerry_seinfeld)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.0q5hw . FILTER (?x2 != fb:m.0q5hw) . ?x2 fb:tv.regular_tv_appearance.series ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv did jerry seinfeld have a starring role in", 
    "id": 242
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.old_st_pauls_cathedral fb:event.disaster_affected_structure.destroyed_by_disaster ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Great Fire of London"
    ], 
    "targetFormula": "(!fb:event.disaster_affected_structure.destroyed_by_disaster fb:en.old_st_pauls_cathedral)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.027zxs_ fb:event.disaster_affected_structure.destroyed_by_disaster ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what disaster was old st paul_s cathedral destroyed", 
    "id": 243
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:soccer.football_player_match_participation.match fb:en.2010_fifa_world_cup_final . FILTER (?x2 != fb:en.2010_fifa_world_cup_final) . ?x2 fb:soccer.football_player_match_participation.player ?x1 } } } LIMIT 9999", 
    "result": [
      "46"
    ], 
    "targetFormula": "(count (!fb:soccer.football_player_match_participation.player ( (lambda x (fb:soccer.football_player_match_participation.match (var x))) fb:en.2010_fifa_world_cup_final)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:soccer.football_player_match_participation.match fb:m.09v2l34 . FILTER (?x2 != fb:m.09v2l34) . ?x2 fb:soccer.football_player_match_participation.player ?x1 } } } LIMIT 9999", 
    "utterance": "how many people played in the 2010 fifa world cup final", 
    "id": 244
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:projects.project_participation.participant fb:en.james_walker . FILTER (?x2 != fb:en.james_walker) . ?x2 fb:projects.project_participation.role fb:en.design_engineer . FILTER (?x2 != fb:en.design_engineer) . ?x2 fb:projects.project_participation.project ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:projects.project_participation.project (and ((lambda x (fb:projects.project_participation.participant (var x))) fb:en.james_walker) ((lambda x (fb:projects.project_participation.role (var x))) fb:en.design_engineer))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:projects.project_participation.participant fb:m.05tqcd . FILTER (?x2 != fb:m.05tqcd) . ?x2 fb:projects.project_participation.role fb:m.04f55y . FILTER (?x2 != fb:m.04f55y) . ?x2 fb:projects.project_participation.project ?x1 } } } LIMIT 9999", 
    "utterance": "on how many projects was james walker a design engineer", 
    "id": 245
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.university_of_iceland fb:education.educational_institution.total_enrollment ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "13981"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number (!fb:education.educational_institution.total_enrollment fb:en.university_of_iceland))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.022hyn fb:education.educational_institution.total_enrollment ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "how many students are there at the university of iceland", 
    "id": 246
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03z9smt fb:broadcast.content.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Medicine", 
      "Science"
    ], 
    "targetFormula": "(!fb:broadcast.content.genre fb:m.03z9smt)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03z9smt fb:broadcast.content.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the genre of the skeptics' guide to the universe", 
    "id": 247
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:computer.software_compatibility.software fb:en.adobe_flash . FILTER (?x2 != fb:en.adobe_flash) . ?x2 fb:computer.software_compatibility.operating_system ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:computer.software_compatibility.operating_system ((lambda x (fb:computer.software_compatibility.software (var x))) fb:en.adobe_flash)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:computer.software_compatibility.software fb:m.058b6 . FILTER (?x2 != fb:m.058b6) . ?x2 fb:computer.software_compatibility.operating_system ?x1 } } } LIMIT 9999", 
    "utterance": "how many operating systems is adobe flash compatible with", 
    "id": 248
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:exhibitions.exhibition_run.venue fb:en.science_museum_great_britain . FILTER (?x1 != fb:en.science_museum_great_britain) . ?x1 fb:exhibitions.exhibition_run.exhibition fb:m.046chwc . FILTER (?x1 != fb:m.046chwc) . ?x1 fb:exhibitions.exhibition_run.admission_fee ?x2 } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibition_run.admission_fee (and ((lambda x (fb:exhibitions.exhibition_run.venue (var x))) fb:en.science_museum_great_britain) ((lambda x (fb:exhibitions.exhibition_run.exhibition (var x))) fb:m.046chwc)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:exhibitions.exhibition_run.venue fb:m.013yrz . FILTER (?x1 != fb:m.013yrz) . ?x1 fb:exhibitions.exhibition_run.exhibition fb:m.046chwc . FILTER (?x1 != fb:m.046chwc) . ?x1 fb:exhibitions.exhibition_run.admission_fee ?x2 } LIMIT 9999", 
    "utterance": "did the big bang exhibit at the science museum cost money", 
    "id": 249
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_rumble_in_the_jungle fb:boxing.boxing_match.titles_at_stake ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "WBA World Champion", 
      "WBC World Champion"
    ], 
    "targetFormula": "(!fb:boxing.boxing_match.titles_at_stake fb:en.the_rumble_in_the_jungle)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019rd7 fb:boxing.boxing_match.titles_at_stake ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what titles were at stake in the the rumble in the jungle", 
    "id": 250
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.science_technology fb:freebase.domain_category.domains ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:freebase.domain_category.domains fb:en.science_technology))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.021ypt8 fb:freebase.domain_category.domains ?x1 } } } LIMIT 9999", 
    "utterance": "how many domains are in the science & technology category", 
    "id": 251
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.1979_cricket_world_cup fb:cricket.cricket_tournament_event.teams ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:cricket.cricket_tournament_event.teams fb:en.1979_cricket_world_cup))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06cgny fb:cricket.cricket_tournament_event.teams ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams participated in the 1979 cricket world cup", 
    "id": 252
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:biology.breed_registration.breed fb:en.shar_pei . FILTER (?x1 != fb:en.shar_pei) . ?x1 fb:biology.breed_registration.registry fb:en.american_kennel_club . FILTER (?x1 != fb:en.american_kennel_club) . ?x1 fb:biology.breed_registration.breed_group ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Non-Sporting Group"
    ], 
    "targetFormula": "(!fb:biology.breed_registration.breed_group (and ((lambda x (fb:biology.breed_registration.breed (var x))) fb:en.shar_pei) ((lambda x (fb:biology.breed_registration.registry (var x))) fb:en.american_kennel_club)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:biology.breed_registration.breed fb:m.03fyyd . FILTER (?x1 != fb:m.03fyyd) . ?x1 fb:biology.breed_registration.registry fb:m.0ljl8 . FILTER (?x1 != fb:m.0ljl8) . ?x1 fb:biology.breed_registration.breed_group ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what breed group is a shar pei in the american kennel club", 
    "id": 253
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.sesame_street fb:tv.tv_program.air_date_of_first_episode ?x1 } LIMIT 9999", 
    "result": [
      "1969-11-10"
    ], 
    "targetFormula": "(!fb:tv.tv_program.air_date_of_first_episode fb:en.sesame_street)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cwrr fb:tv.tv_program.air_date_of_first_episode ?x1 } LIMIT 9999", 
    "utterance": "what was the date of the first sesame street episode aired", 
    "id": 254
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cj52b7 fb:boxing.boxing_title.matches_with_this_title_at_stake ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The Rumble in the Jungle"
    ], 
    "targetFormula": "(!fb:boxing.boxing_title.matches_with_this_title_at_stake fb:m.0cj52b7)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cj52b7 fb:boxing.boxing_title.matches_with_this_title_at_stake ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what matches have had the wbc world champion title at stake", 
    "id": 255
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:martial_arts.martial_arts_certification.qualification fb:en.black_belt . FILTER (?x1 != fb:en.black_belt) . ?x1 fb:martial_arts.martial_arts_certification.person fb:en.christopher_adams . FILTER (?x1 != fb:en.christopher_adams) . ?x1 fb:martial_arts.martial_arts_certification.art ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Judo"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_arts_certification.art (and ((lambda x (fb:martial_arts.martial_arts_certification.qualification (var x))) fb:en.black_belt) ((lambda x (fb:martial_arts.martial_arts_certification.person (var x))) fb:en.christopher_adams)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:martial_arts.martial_arts_certification.qualification fb:m.02gss8 . FILTER (?x1 != fb:m.02gss8) . ?x1 fb:martial_arts.martial_arts_certification.person fb:m.05lc_4 . FILTER (?x1 != fb:m.05lc_4) . ?x1 fb:martial_arts.martial_arts_certification.art ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "in what martial art does christopher adams have a black belt", 
    "id": 256
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:en.mozilla_firefox fb:computer.software.compatible_oses ?x1 . ?x1 fb:computer.software_compatibility.operating_system ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "GNU/Linux", 
      "OS X", 
      "Unix-like", 
      "Cross-platform", 
      "Microsoft Windows", 
      "Linux kernel", 
      "Android", 
      "OpenBSD"
    ], 
    "targetFormula": "(!fb:computer.software_compatibility.operating_system (!fb:computer.software.compatible_oses fb:en.mozilla_firefox))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.01dyhm fb:computer.software.compatible_oses ?x1 . ?x1 fb:computer.software_compatibility.operating_system ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what versions of mac os x is mozilla firefox compatible with", 
    "id": 257
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.08mpny fb:tv.tv_series_episode.season ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Stargate SG-1 - Season 2"
    ], 
    "targetFormula": "(!fb:tv.tv_series_episode.season fb:m.08mpny)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.08mpny fb:tv.tv_series_episode.season ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what season of stargate sg-1 is the episode show and tell", 
    "id": 258
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0jb4_0h fb:projects.project.actual_completion_date ?x1 } LIMIT 9999", 
    "result": [
      "1990"
    ], 
    "targetFormula": "(!fb:projects.project.actual_completion_date fb:m.0jb4_0h)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0jb4_0h fb:projects.project.actual_completion_date ?x1 } LIMIT 9999", 
    "utterance": "when was the construction of new steubenville bridge finished", 
    "id": 259
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0j24b7h fb:boxing.boxing_match.decision ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Split decision"
    ], 
    "targetFormula": "(!fb:boxing.boxing_match.decision fb:m.0j24b7h)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0j24b7h fb:boxing.boxing_match.decision ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what decision did manny pacquiao vs. timothy bradley end with", 
    "id": 260
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_athlete_affiliation.athlete fb:m.04dnjr9 . FILTER (?x1 != fb:m.04dnjr9) . ?x1 fb:olympics.olympic_athlete_affiliation.olympics fb:en.1992_summer_olympics . FILTER (?x1 != fb:en.1992_summer_olympics) . ?x1 fb:olympics.olympic_athlete_affiliation.sport ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Field hockey"
    ], 
    "targetFormula": "(!fb:olympics.olympic_athlete_affiliation.sport (and ((lambda x (fb:olympics.olympic_athlete_affiliation.athlete (var x))) fb:m.04dnjr9) ((lambda x (fb:olympics.olympic_athlete_affiliation.olympics (var x))) fb:en.1992_summer_olympics)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_athlete_affiliation.athlete fb:m.04dnjr9 . FILTER (?x1 != fb:m.04dnjr9) . ?x1 fb:olympics.olympic_athlete_affiliation.olympics fb:m.0l6m5 . FILTER (?x1 != fb:m.0l6m5) . ?x1 fb:olympics.olympic_athlete_affiliation.sport ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what sport did scott anderson play in the 1992 summer olympics", 
    "id": 261
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:protected_sites.natural_or_cultural_site_listing.designation fb:en.national_register_of_historic_places . FILTER (?x2 != fb:en.national_register_of_historic_places) . ?x2 fb:protected_sites.natural_or_cultural_site_listing.listed_site ?x1 } } } LIMIT 9999", 
    "result": [
      "37078"
    ], 
    "targetFormula": "(count (!fb:protected_sites.natural_or_cultural_site_listing.listed_site ( (lambda x (fb:protected_sites.natural_or_cultural_site_listing.designation (var x))) fb:en.national_register_of_historic_places)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:protected_sites.natural_or_cultural_site_listing.designation fb:m.0h52w . FILTER (?x2 != fb:m.0h52w) . ?x2 fb:protected_sites.natural_or_cultural_site_listing.listed_site ?x1 } } } LIMIT 9999", 
    "utterance": "how many sites are on the national register of historic places", 
    "id": 262
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.national_wildlife_refuge fb:protected_sites.park_system.member_parks ?x1 } } } LIMIT 9999", 
    "result": [
      "31"
    ], 
    "targetFormula": "(count (!fb:protected_sites.park_system.member_parks fb:en.national_wildlife_refuge))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01y63s fb:protected_sites.park_system.member_parks ?x1 } } } LIMIT 9999", 
    "utterance": "how many national parks does the national wildlife refuge have", 
    "id": 263
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:baseball.baseball_roster_position.team fb:en.new_york_mets . FILTER (?x2 != fb:en.new_york_mets) . ?x2 fb:baseball.baseball_roster_position.player ?x1 } } } LIMIT 9999", 
    "result": [
      "36"
    ], 
    "targetFormula": "(count (!fb:baseball.baseball_roster_position.player ((lambda x (fb:baseball.baseball_roster_position.team (var x))) fb:en.new_york_mets)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:baseball.baseball_roster_position.team fb:m.05g76 . FILTER (?x2 != fb:m.05g76) . ?x2 fb:baseball.baseball_roster_position.player ?x1 } } } LIMIT 9999", 
    "utterance": "how many players are in the current roster of the new york mets", 
    "id": 264
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.batman_the_dark_knight_returns fb:comic_books.comic_book_series.featured_characters ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Batman", 
      "Superman", 
      "James Gordon", 
      "Joker", 
      "Robin", 
      "Green Arrow"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_series.featured_characters fb:en.batman_the_dark_knight_returns)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jp9r fb:comic_books.comic_book_series.featured_characters ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what characters are featured in batman: the dark knight returns", 
    "id": 265
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_honor.honored_for fb:en.sgt_peppers_lonely_hearts_club_band . FILTER (?x1 != fb:en.sgt_peppers_lonely_hearts_club_band) . ?x1 fb:award.award_honor.year ?x2 } LIMIT 9999", 
    "result": [
      "1967"
    ], 
    "targetFormula": "(!fb:award.award_honor.year ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.sgt_peppers_lonely_hearts_club_band))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_honor.honored_for fb:m.0hcr6 . FILTER (?x1 != fb:m.0hcr6) . ?x1 fb:award.award_honor.year ?x2 } LIMIT 9999", 
    "utterance": "what year did sgt. pepper's lonely hearts club band win a grammy", 
    "id": 266
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_medal_honor.olympics fb:en.2004_summer_olympics . FILTER (?x1 != fb:en.2004_summer_olympics) . ?x1 fb:olympics.olympic_medal_honor.medalist fb:en.ian_thorpe . FILTER (?x1 != fb:en.ian_thorpe) . ?x1 fb:olympics.olympic_medal_honor.event ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Swimming at the 2004 Summer Olympics \u2013 Men's 4 \u00d7 200 metre freestyle relay", 
      "Swimming at the 2004 Summer Olympics \u2013 Men's 200 metre freestyle", 
      "Swimming at the 2004 Summer Olympics \u2013 Men's 100 metre freestyle", 
      "Swimming at the 2004 Summer Olympics \u2013 Men's 400 metre freestyle"
    ], 
    "targetFormula": "(!fb:olympics.olympic_medal_honor.event (and ((lambda x (fb:olympics.olympic_medal_honor.olympics (var x))) fb:en.2004_summer_olympics) ((lambda x (fb:olympics.olympic_medal_honor.medalist (var x))) fb:en.ian_thorpe)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_medal_honor.olympics fb:m.0kbvb . FILTER (?x1 != fb:m.0kbvb) . ?x1 fb:olympics.olympic_medal_honor.medalist fb:m.012vrz . FILTER (?x1 != fb:m.012vrz) . ?x1 fb:olympics.olympic_medal_honor.event ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "in what events did ian thorpe compete in the 2004 summer olympics", 
    "id": 267
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06gj5j3 fb:media_common.quotation.author ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Neil Armstrong"
    ], 
    "targetFormula": "(!fb:media_common.quotation.author fb:m.06gj5j3)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06gj5j3 fb:media_common.quotation.author ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who said that_s one small step for man, one giant leap for mankind", 
    "id": 268
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_athlete_affiliation.olympics fb:en.2000_summer_olympics . FILTER (?x1 != fb:en.2000_summer_olympics) . ?x1 fb:olympics.olympic_athlete_affiliation.athlete fb:en.bernard_lagat . FILTER (?x1 != fb:en.bernard_lagat) . ?x1 fb:olympics.olympic_athlete_affiliation.country ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kenya"
    ], 
    "targetFormula": "(!fb:olympics.olympic_athlete_affiliation.country (and ((lambda x (fb:olympics.olympic_athlete_affiliation.olympics (var x))) fb:en.2000_summer_olympics) ((lambda x (fb:olympics.olympic_athlete_affiliation.athlete (var x))) fb:en.bernard_lagat)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_athlete_affiliation.olympics fb:m.0jdk_ . FILTER (?x1 != fb:m.0jdk_) . ?x1 fb:olympics.olympic_athlete_affiliation.athlete fb:m.03h_lh . FILTER (?x1 != fb:m.03h_lh) . ?x1 fb:olympics.olympic_athlete_affiliation.country ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "for what country did bernard lagat play in the 2000 summer olympics", 
    "id": 269
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.national_park_service fb:protected_sites.governing_body_of_protected_sites.protected_sites_governed ?x1 } } } LIMIT 9999", 
    "result": [
      "564"
    ], 
    "targetFormula": "(count (!fb:protected_sites.governing_body_of_protected_sites.protected_sites_governed fb:en.national_park_service))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.015dvh fb:protected_sites.governing_body_of_protected_sites.protected_sites_governed ?x1 } } } LIMIT 9999", 
    "utterance": "how many protected sites does the u.s. national park service govern", 
    "id": 270
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.atlantic_division fb:ice_hockey.hockey_division.teams ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:ice_hockey.hockey_division.teams fb:en.atlantic_division))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0c79j9 fb:ice_hockey.hockey_division.teams ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams are in the atlantic division of the eastern conference", 
    "id": 271
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:sports.sports_team_season_record.season fb:en.2008_nfl_season . FILTER (?x2 != fb:en.2008_nfl_season) . ?x2 fb:sports.sports_team_season_record.team fb:en.philadelphia_eagles . FILTER (?x2 != fb:en.philadelphia_eagles) . ?x2 fb:sports.sports_team_season_record.wins ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:sports.sports_team_season_record.wins (and ((lambda x (fb:sports.sports_team_season_record.season (var x))) fb:en.2008_nfl_season) ((lambda x (fb:sports.sports_team_season_record.team (var x))) fb:en.philadelphia_eagles))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:sports.sports_team_season_record.season fb:m.03gqdq7 . FILTER (?x2 != fb:m.03gqdq7) . ?x2 fb:sports.sports_team_season_record.team fb:m.05tg3 . FILTER (?x2 != fb:m.05tg3) . ?x2 fb:sports.sports_team_season_record.wins ?x1 } } } LIMIT 9999", 
    "utterance": "how many wins did the philadelphia eagles have in the 2008 nfl season", 
    "id": 272
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1982\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1983\"^^xsd:datetime)) . ?x1 fb:award.award_nomination.year ?x2 . FILTER (?x1 != \"1982\"^^xsd:datetime) . ?x1 fb:award.award_nomination.award fb:en.primetime_emmy_award_for_outstanding_comedy_series . FILTER (?x1 != fb:en.primetime_emmy_award_for_outstanding_comedy_series) . ?x1 fb:award.award_nomination.award_nominee ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "John Rappaport", 
      "Burt Metcalfe", 
      "Howard Gewirtz", 
      "Frank Dungan", 
      "Thad Mumford", 
      "James L. Brooks", 
      "Stan Daniels", 
      "Ed. Weinberger", 
      "Richard Sakai", 
      "Steve Marshall", 
      "Glen Charles", 
      "Les Charles", 
      "Hugh Wilson", 
      "Blake Hunter", 
      "Ken Estin", 
      "Jeff Stein", 
      "April Kelly", 
      "Dennis Koenig", 
      "Mel Tolkin", 
      "George Eckstein", 
      "Ernest Chambers", 
      "Jim Parker", 
      "Bob Brunner", 
      "Ken Hecht", 
      "Peter Torokvei", 
      "Danny Arnold", 
      "Roland Kibbee", 
      "Dan Guntzelman", 
      "Gary Shaw", 
      "Ian Praiser", 
      "Dan Wilcox"
    ], 
    "targetFormula": "(!fb:award.award_nomination.award_nominee (and ((lambda x (fb:award.award_nomination.year (var x))) (date 1982 -1 -1)) ( (lambda x (fb:award.award_nomination.award (var x))) fb:en.primetime_emmy_award_for_outstanding_comedy_series)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1982\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1983\"^^xsd:datetime)) . ?x1 fb:award.award_nomination.year ?x2 . FILTER (?x1 != \"1982\"^^xsd:datetime) . ?x1 fb:award.award_nomination.award fb:m.0cjyzs . FILTER (?x1 != fb:m.0cjyzs) . ?x1 fb:award.award_nomination.award_nominee ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "in 1982 who were the primetieme emmy award for comedy series nominees", 
    "id": 273
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.los_angeles_convention_center fb:conferences.conference_venue.conferences ?x1 } } } LIMIT 9999", 
    "result": [
      "5"
    ], 
    "targetFormula": "(count (!fb:conferences.conference_venue.conferences fb:en.los_angeles_convention_center))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06057j fb:conferences.conference_venue.conferences ?x1 } } } LIMIT 9999", 
    "utterance": "how many conferences have been held at the los angeles convention center", 
    "id": 274
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:wine.grape_variety_composition.wine fb:en.1966_chateau_latour . FILTER (?x1 != fb:en.1966_chateau_latour) . ?x1 fb:wine.grape_variety_composition.grape_variety fb:en.merlot . FILTER (?x1 != fb:en.merlot) . ?x1 fb:wine.grape_variety_composition.percentage ?x2 } LIMIT 9999", 
    "result": [
      "20"
    ], 
    "targetFormula": "(!fb:wine.grape_variety_composition.percentage (and ((lambda x (fb:wine.grape_variety_composition.wine (var x))) fb:en.1966_chateau_latour) ((lambda x (fb:wine.grape_variety_composition.grape_variety (var x))) fb:en.merlot)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:wine.grape_variety_composition.wine fb:m.02wsg9z . FILTER (?x1 != fb:m.02wsg9z) . ?x1 fb:wine.grape_variety_composition.grape_variety fb:m.04sr0 . FILTER (?x1 != fb:m.04sr0) . ?x1 fb:wine.grape_variety_composition.percentage ?x2 } LIMIT 9999", 
    "utterance": "what percentage of the grapes in a 1966 chateau latour grand vin are merlot", 
    "id": 275
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:projects.project_participation.project fb:en.design_and_construction_of_the_plymouth_breakwater . FILTER (?x2 != fb:en.design_and_construction_of_the_plymouth_breakwater) . ?x2 fb:projects.project_participation.role fb:en.engineer . FILTER (?x2 != fb:en.engineer) . ?x2 fb:projects.project_participation.participant ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:projects.project_participation.participant (and ( (lambda x (fb:projects.project_participation.project (var x))) fb:en.design_and_construction_of_the_plymouth_breakwater) ((lambda x (fb:projects.project_participation.role (var x))) fb:en.engineer))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:projects.project_participation.project fb:m.05g_y0y . FILTER (?x2 != fb:m.05g_y0y) . ?x2 fb:projects.project_participation.role fb:m.09j9h . FILTER (?x2 != fb:m.09j9h) . ?x2 fb:projects.project_participation.participant ?x1 } } } LIMIT 9999", 
    "utterance": "how many engineers worked on the design and construction of the plymouth breakwater", 
    "id": 276
  }
]
