[
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.wxpn fb:broadcast.radio_station.owner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "University of Pennsylvania"
    ], 
    "targetFormula": "(!fb:broadcast.radio_station.owner fb:en.wxpn)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.068395 fb:broadcast.radio_station.owner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who owns wxpn", 
    "id": 1
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.flickr fb:internet.website.owner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Yahoo!"
    ], 
    "targetFormula": "(!fb:internet.website.owner fb:en.flickr)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04dtx9 fb:internet.website.owner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who owns flickr", 
    "id": 2
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.nivea fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.nivea)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03vzwk fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who founded nivea", 
    "id": 3
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.girl_scouts_of_the_usa fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Juliette Gordon Low"
    ], 
    "targetFormula": "(!fb:organization.organization.founders fb:en.girl_scouts_of_the_usa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01r3kd fb:organization.organization.founders ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who founded gsusa", 
    "id": 4
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.doritos . FILTER (?x1 != fb:en.doritos) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Frito-Lay"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.doritos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0160jl . FILTER (?x1 != fb:m.0160jl) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who owned doritos", 
    "id": 5
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.rna_binding fb:biology.gene_ontology_group.description ?x1 } LIMIT 9999", 
    "result": [
      "Interacting selectively with an RNA molecule or a portion thereof."
    ], 
    "targetFormula": "(!fb:biology.gene_ontology_group.description fb:en.rna_binding)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02l2hm7 fb:biology.gene_ontology_group.description ?x1 } LIMIT 9999", 
    "utterance": "what is rna binding", 
    "id": 6
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tomkat fb:celebrities.supercouple.partners ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Cruise", 
      "Katie Holmes"
    ], 
    "targetFormula": "(!fb:celebrities.supercouple.partners fb:en.tomkat)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vkczn fb:celebrities.supercouple.partners ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who makes up tomkat", 
    "id": 7
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.neon fb:chemistry.chemical_element.discoverer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Morris Travers", 
      "William Ramsay"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.discoverer fb:en.neon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.025s4r0 fb:chemistry.chemical_element.discoverer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who discovered neon", 
    "id": 8
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.superman fb:comic_books.comic_book_character.created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Joe Shuster", 
      "Jerry Siegel"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_character.created_by fb:en.superman)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.070vn fb:comic_books.comic_book_character.created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who created superman", 
    "id": 9
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pauwel_kwak fb:food.beer.brewery_brand ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brewery Bosteels"
    ], 
    "targetFormula": "(!fb:food.beer.brewery_brand fb:en.pauwel_kwak)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0f7987 fb:food.beer.brewery_brand ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who brews pauwel kwak", 
    "id": 10
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.scrabble fb:law.invention.inventor ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Alfred Mosher Butts"
    ], 
    "targetFormula": "(!fb:law.invention.inventor fb:en.scrabble)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06ynv fb:law.invention.inventor ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who invented scrabble", 
    "id": 11
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.omarion_grandberry fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1984-11-12"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.019g40 fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when was omarion born", 
    "id": 12
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.spock fb:fictional_universe.fictional_character.species ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Human", 
      "Vulcan"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_character.species fb:en.spock)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0f13t fb:fictional_universe.fictional_character.species ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what species is spock", 
    "id": 13
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.africa fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "30221532"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.africa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dg3n1 fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is africa 's area", 
    "id": 14
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0flmt0 fb:amusement_parks.ride.opened ?x1 } LIMIT 9999", 
    "result": [
      "1999-04-17"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.opened fb:m.0flmt0)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0flmt0 fb:amusement_parks.ride.opened ?x1 } LIMIT 9999", 
    "utterance": "when did invertigo open", 
    "id": 15
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:organization.leadership.role fb:en.chief_executive_officer . FILTER (?x1 != fb:en.chief_executive_officer) . ?x1 fb:organization.leadership.organization fb:en.apple_inc . FILTER (?x1 != fb:en.apple_inc) . ?x1 fb:organization.leadership.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "John Sculley", 
      "Michael Scott", 
      "Gil Amelio", 
      "Timothy D. Cook", 
      "Mike Markkula", 
      "Steve Jobs", 
      "Michael Spindler"
    ], 
    "targetFormula": "(!fb:organization.leadership.person (and ((lambda x (fb:organization.leadership.role (var x))) fb:en.chief_executive_officer) ((lambda x (fb:organization.leadership.organization (var x))) fb:en.apple_inc)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:organization.leadership.role fb:m.0dq_5 . FILTER (?x1 != fb:m.0dq_5) . ?x1 fb:organization.leadership.organization fb:m.0k8z . FILTER (?x1 != fb:m.0k8z) . ?x1 fb:organization.leadership.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the ceo of apple", 
    "id": 16
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.big_daddy fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "PG-13 (USA)"
    ], 
    "targetFormula": "(!fb:film.film.rating fb:en.big_daddy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02hxhz fb:film.film.rating ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is big daddy rated", 
    "id": 17
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.iphone fb:computer.computer.key_designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jonathan Ive"
    ], 
    "targetFormula": "(!fb:computer.computer.key_designers fb:en.iphone)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.027lnzs fb:computer.computer.key_designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the iphone", 
    "id": 18
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.seabiscuit fb:biology.organism.height_meters ?x1 } LIMIT 9999", 
    "result": [
      "1.57"
    ], 
    "targetFormula": "(!fb:biology.organism.height_meters fb:en.seabiscuit)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01g14f fb:biology.organism.height_meters ?x1 } LIMIT 9999", 
    "utterance": "how tall was seabiscuit", 
    "id": 19
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.capri_sun . FILTER (?x1 != fb:en.capri_sun) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Wild"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.capri_sun))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.03zqhj . FILTER (?x1 != fb:m.03zqhj) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who developed capri sun", 
    "id": 20
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.sigmod fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.sigmod)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fcglc fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was sigmod founded", 
    "id": 21
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_hobbit fb:fictional_universe.work_of_fiction.setting ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Mirkwood"
    ], 
    "targetFormula": "(!fb:fictional_universe.work_of_fiction.setting fb:en.the_hobbit)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07g75 fb:fictional_universe.work_of_fiction.setting ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is the hobbit set", 
    "id": 22
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.target_corporation fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1902"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.target_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01b39j fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was target founded", 
    "id": 23
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_team_management_tenure.team fb:en.fulham_fc . FILTER (?x1 != fb:en.fulham_fc) . ?x1 fb:soccer.football_team_management_tenure.manager ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Roy Hodgson", 
      "Martin Jol"
    ], 
    "targetFormula": "(!fb:soccer.football_team_management_tenure.manager ((lambda x (fb:soccer.football_team_management_tenure.team (var x))) fb:en.fulham_fc))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_team_management_tenure.team fb:m.02_lt . FILTER (?x1 != fb:m.02_lt) . ?x1 fb:soccer.football_team_management_tenure.manager ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who manages fulham f. c.", 
    "id": 24
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.borders_group fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1971"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.borders_group)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0mdv8 fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was borders founded", 
    "id": 25
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:internet.blog.language fb:en.german_language . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Oslog.tv", 
      "www.behmel.de", 
      "neusprech.org", 
      "interaktionsblog.de"
    ], 
    "targetFormula": "(fb:internet.blog.language fb:en.german_language)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:internet.blog.language fb:m.04306rv . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what blogs are in german", 
    "id": 26
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.doonesbury fb:comic_strips.comic_strip.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Politics", 
      "Satire", 
      "Humour"
    ], 
    "targetFormula": "(!fb:comic_strips.comic_strip.genre fb:en.doonesbury)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0299q fb:comic_strips.comic_strip.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genre is doonesbury", 
    "id": 27
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.secretariat fb:biology.deceased_organism.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "1989-10-04"
    ], 
    "targetFormula": "(!fb:biology.deceased_organism.date_of_death fb:en.secretariat)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0gv_l fb:biology.deceased_organism.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did secretariat die", 
    "id": 28
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.honored_for fb:en.lost . FILTER (?x1 != fb:en.lost) . ?x1 fb:award.award_honor.award ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Peabody Award", 
      "Screen Actors Guild Award for Outstanding Performance by an Ensemble in a Drama Series", 
      "Primetime Emmy Award for Outstanding Casting for a Drama Series", 
      "Primetime Emmy Award for Outstanding Special Visual Effects For A Series", 
      "Primetime Emmy Award for Outstanding Drama Series", 
      "Primetime Emmy Award for Outstanding Supporting Actor - Drama Series", 
      "Golden Globe Award for Best Television Series \u2013 Drama", 
      "Norman Felton Producer of the Year Award in Episodic Television - Drama", 
      "Primetime Emmy Award for Outstanding Music Composition for a Series", 
      "Primetime Emmy Award for Outstanding Single-Camera Picture Editing for a Drama Series", 
      "Primetime Emmy Award for Outstanding Directing for a Drama Series", 
      "Primetime Emmy Award for Outstanding Sound Mixing For A Comedy Or Drama Series (One Hour)", 
      "Satellite Award for Best Actor \u2013 Television Series Drama"
    ], 
    "targetFormula": "(!fb:award.award_honor.award ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.lost))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.honored_for fb:m.0828jw . FILTER (?x1 != fb:m.0828jw) . ?x1 fb:award.award_honor.award ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what awards has lost won", 
    "id": 29
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.tutankhamun fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "-1322"
    ], 
    "targetFormula": "(!fb:people.deceased_person.date_of_death fb:en.tutankhamun)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07hcc fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did tutankhamun die", 
    "id": 30
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.country_time . FILTER (?x1 != fb:en.country_time) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.country_time))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.04wg3q . FILTER (?x1 != fb:m.04wg3q) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who produced country time", 
    "id": 31
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.02r3cjp . FILTER (?x1 != fb:m.02r3cjp) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:m.02r3cjp))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.02r3cjp . FILTER (?x1 != fb:m.02r3cjp) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was scope introduced", 
    "id": 32
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.niagara_falls fb:geography.waterfall.height ?x1 } LIMIT 9999", 
    "result": [
      "51"
    ], 
    "targetFormula": "(!fb:geography.waterfall.height fb:en.niagara_falls)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dpk_ fb:geography.waterfall.height ?x1 } LIMIT 9999", 
    "utterance": "how high is niagara falls", 
    "id": 33
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:base.dinosaur.dinosaur_location.dinosaur_s fb:en.barosaurus . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Africa"
    ], 
    "targetFormula": "(fb:base.dinosaur.dinosaur_location.dinosaur_s fb:en.barosaurus)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:base.dinosaur.dinosaur_location.dinosaur_s fb:m.04ssfz . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did barosaurus live", 
    "id": 34
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.serge fb:fashion.textile.fiber ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Wool"
    ], 
    "targetFormula": "(!fb:fashion.textile.fiber fb:en.serge)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02mgxp fb:fashion.textile.fiber ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is serge made out of", 
    "id": 35
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.kifm fb:broadcast.radio_station.serves_area ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:broadcast.radio_station.serves_area fb:en.kifm)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.076mqq fb:broadcast.radio_station.serves_area ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what area does kifm serve", 
    "id": 36
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.j_c_penney fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1902"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.j_c_penney)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.026h1w fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was jcpenney founded", 
    "id": 37
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mount_everest fb:geography.mountain.elevation ?x1 } LIMIT 9999", 
    "result": [
      "8848"
    ], 
    "targetFormula": "(!fb:geography.mountain.elevation fb:en.mount_everest)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0blbd fb:geography.mountain.elevation ?x1 } LIMIT 9999", 
    "utterance": "how tall is mount everest", 
    "id": 38
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.save-a-lot fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1977"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.save-a-lot)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0209r2 fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was savealot founded", 
    "id": 39
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:architecture.occupancy.building fb:en.fallingwater . FILTER (?x1 != fb:en.fallingwater) . ?x1 fb:architecture.occupancy.occupant ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Edgar J. Kaufmann"
    ], 
    "targetFormula": "(!fb:architecture.occupancy.occupant ((lambda x (fb:architecture.occupancy.building (var x))) fb:en.fallingwater))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:architecture.occupancy.building fb:m.01zh2s . FILTER (?x1 != fb:m.01zh2s) . ?x1 fb:architecture.occupancy.occupant ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who lived in fallingwater", 
    "id": 40
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.chips_ahoy . FILTER (?x1 != fb:en.chips_ahoy) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.chips_ahoy))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.08l5vh . FILTER (?x1 != fb:m.08l5vh) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when did chips ahoy debut", 
    "id": 41
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ford_motor_company fb:automotive.company.make_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ford", 
      "Edsel", 
      "Lincoln", 
      "Mercury", 
      "Rover", 
      "Ford of Britain"
    ], 
    "targetFormula": "(!fb:automotive.company.make_s fb:en.ford_motor_company)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02zs4 fb:automotive.company.make_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what makes does ford have", 
    "id": 42
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.earth fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:location.location.area fb:en.earth)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02j71 fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is the earth 's area", 
    "id": 43
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.bmw fb:organization.organization.slogan ?x1 } LIMIT 9999", 
    "result": [
      "Freude am Fahren", 
      "Sheer Driving Pleasure", 
      "The Ultimate Driving Machine."
    ], 
    "targetFormula": "(!fb:organization.organization.slogan fb:en.bmw)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.017yh fb:organization.organization.slogan ?x1 } LIMIT 9999", 
    "utterance": "what is the slogan of bmw", 
    "id": 44
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mona_lisa fb:visual_art.artwork.artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Leonardo da Vinci"
    ], 
    "targetFormula": "(!fb:visual_art.artwork.artist fb:en.mona_lisa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jbg2 fb:visual_art.artwork.artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who painted the mona lisa", 
    "id": 45
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlie_brown fb:fictional_universe.fictional_character.character_created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Charles M. Schulz"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_character.character_created_by fb:en.charlie_brown)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.011j44 fb:fictional_universe.fictional_character.character_created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who created charlie brown", 
    "id": 46
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sesame_street fb:tv.tv_program.program_creator ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Joan Ganz Cooney", 
      "Lloyd Morrisett"
    ], 
    "targetFormula": "(!fb:tv.tv_program.program_creator fb:en.sesame_street)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cwrr fb:tv.tv_program.program_creator ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who created sesame street", 
    "id": 47
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.starbucks fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1971"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.starbucks)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.018c_r fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was starbucks founded", 
    "id": 48
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.uss_nautilus fb:boats.ship.ship_builder ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "General Dynamics Electric Boat"
    ], 
    "targetFormula": "(!fb:boats.ship.ship_builder fb:en.uss_nautilus)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01tckg fb:boats.ship.ship_builder ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who built the uss nautilus", 
    "id": 49
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.techvibes fb:internet.blog.started ?x1 } LIMIT 9999", 
    "result": [
      "2002"
    ], 
    "targetFormula": "(!fb:internet.blog.started fb:en.techvibes)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.04sxf7k fb:internet.blog.started ?x1 } LIMIT 9999", 
    "utterance": "when was techvibes started", 
    "id": 50
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.target_corporation fb:business.business_operation.industry ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Variety Stores", 
      "Retail"
    ], 
    "targetFormula": "(!fb:business.business_operation.industry fb:en.target_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01b39j fb:business.business_operation.industry ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is target 's industry", 
    "id": 51
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01v7z fb:dining.cuisine.dishes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Bisque", 
      "Gumbo", 
      "Jambalaya", 
      "\u00c9touff\u00e9e"
    ], 
    "targetFormula": "(!fb:dining.cuisine.dishes fb:m.01v7z)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01v7z fb:dining.cuisine.dishes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some cajun dishes", 
    "id": 52
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.nathan_smith_1770 fb:people.deceased_person.place_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Washington, D.C."
    ], 
    "targetFormula": "(!fb:people.deceased_person.place_of_death fb:en.nathan_smith_1770)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0bf9j1 fb:people.deceased_person.place_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did nathan smith die", 
    "id": 53
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.roe_v_wade fb:law.legal_case.subject ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Forced abortion", 
      "Privacy"
    ], 
    "targetFormula": "(!fb:law.legal_case.subject fb:en.roe_v_wade)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0hx5v fb:law.legal_case.subject ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was roe v. wade about", 
    "id": 54
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.germany fb:food.beer_country_region.beers_from_here ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Augustiner Dunkel", 
      "Kloster Andechs Andechser Doppelbock Dunkel", 
      "Krombacher Pils", 
      "Aktien Brauerei Kaufbeuren Jubilaums Pils", 
      "Oderland Frankfurter Premium Export", 
      "Kaiserdom-Privatbrauerei Weizenland Weissbier Kristallklar", 
      "Pinkus M\u00fcller Organic", 
      "Schneider & Sohn Weissen Edel-Weisse", 
      "Hacker-Pschorr Weisse", 
      "Dortmunder Actien Brauerei Diat Pils", 
      "Br\u00e4u im Moos Hefe-Weizen", 
      "Henninger Kaiser Premium Bier", 
      "Frankenheim Alt", 
      "Bitburger Premium Beer", 
      "Oschen Brau Ulm Gold Oschen", 
      "Rother Brau Oko Ur Weizen", 
      "Darmstadter", 
      "Weihenstephaner Festbier", 
      "Jever Pilsener", 
      "Bier-Company Turn", 
      "Sailerbr\u00e4u Franz Josef Urig-Schwarz", 
      "Goldhand Vertriebsellschaftges Felsgold Pils", 
      "Kronenbrauerei Karl Karlskrone Premium Pilsner", 
      "Kauzen Pils", 
      "Sch\u00f6fferhofer Dunkles Hefeweizen", 
      "Erdinger Weissbier Dunkel", 
      "Hannen Alt", 
      "Bayer-Br\u00e4u Rothenfelser Raubritter", 
      "Br\u00e4u im Moos Dunkle Weisse", 
      "Hofmann Dunkles Landbier", 
      "Spaten Pils", 
      "Schlappeseppel", 
      "Weltenburger Kloster Asam-Bock", 
      "Weltenburger Kloster Urtyp Hell", 
      "Spaten M\u00fcnchner Hell", 
      "Riedenburger Weisse", 
      "Allgauer Brauhaus St. Magnus Heller Bock", 
      "Tegernseer Special", 
      "Weltenburger Kloster Winter-Traum", 
      "Schneider Weisse Original", 
      "Lidl Neckarsulm Grafenwalder Strong Beer", 
      "Schwaben Br\u00e4u Meister Pils", 
      "Clausthaler", 
      "Brauerei L\u00fcbz L\u00fcbzer Urkraft", 
      "K\u00f6stritzer Schwarzbier", 
      "Gutmann Dunkles Hefeweizen", 
      "Privatbrauerei H\u00f6ss Weisser Hirsch Allg\u00e4uer Weizen", 
      "Thurn & Taxis Postmeister Doppel Bock", 
      "Spaten Franziskaner Hefe-Weissbier", 
      "Thurn & Taxis Roggen", 
      "L\u00f6wenbr\u00e4u Premium Pils Feinherb", 
      "Fassa Gold Pils", 
      "Kaiserdom-Privatbrauerei Weizenland Weissbier Hefetr\u00fcb", 
      "Herrnbr\u00e4u Schneewalter Winterweisse", 
      "Br\u00e4u im Moos Export Hell", 
      "Leikeim Premium", 
      "Krombacher Rhenania Alt", 
      "Beck & Co. Beck's Oktoberfest", 
      "Bergquell-Brauerei Loebau Lausitzer Porter", 
      "Bamberger Weisse Bock", 
      "Mittenwald Jager Dunkel", 
      "Berliner Kindl Original Weisse Schankbier", 
      "Schmucker Hefe-Weizen", 
      "Augustiner Helles", 
      "Radeberger Pilsner", 
      "Pearce Boltens Landbier", 
      "Hof Hefe Weissbier (Sainsbury's)", 
      "Riedenburger Organic Lager", 
      "Paulaner Original M\u00fcnchner Premium Lager", 
      "Burgerbr\u00e4u Bamberg Pils", 
      "Dortmunder Union Export", 
      "L\u00f6wenWeisse Hefe-Weissbier", 
      "Privatbrauerei H\u00f6ss Doppel Hirsch Allg\u00e4uer Doppelbock", 
      "Brinkhoffs No. 1", 
      "Neumarkter Lammsbr\u00e4u Dunkel", 
      "Ritter St Georgen Brauerei Keller Bier", 
      "Hofbrauhaus Freising Huber Weisses Original", 
      "Arcobrau (Co-op) Wheat Beer", 
      "Aldersbacher Ursprung Export Hell", 
      "Bucher \u00d6ko-Pilsner", 
      "Heller-Trum Aecht Schlenkerla Rauchbier M\u00e4rzen", 
      "Aldersbacher Kloster Weisse Hell", 
      "Erdinger Schneeweisse - Das Winterbier", 
      "Hofbrauhaus M\u00fcnchen SchwarzeWeisse", 
      "Hopf Dunkel Weisse", 
      "Ritter St. Georgen Brauerei Helles Vollbier", 
      "Erdinger Pikantus Dunkler Weizenbock", 
      "Altenburger Premium", 
      "Ayinger Altbairisch Dunkel", 
      "Beck & Co. Beck's Vier", 
      "Privatbrauerei H\u00f6ss Dunkler Hirsch Allg\u00e4uer Weizen", 
      "Dortmunder Union Siegel Pils", 
      "Rheinische B\u00fcrgerbr\u00e4u B\u00fcrger K\u00f6lsch", 
      "Sch\u00f6fferhofer Hefeweizen", 
      "Burgerbra\u00fc Augsburg AG Musicus Dunkler Weizenbock", 
      "Augustiner Maximator", 
      "Augustiner Edelstoff", 
      "Augustiner Vollbier", 
      "Tucher Helles Hefe Weizen", 
      "Gatzweiler Gatz Alt", 
      "Bergische L\u00f6wen Sion K\u00f6lsch", 
      "Fuerstenberg Premium Lager", 
      "Eichbaum Premium Pils", 
      "Paderborner Isenbeck Brauerei Isenbeck Premium Dark", 
      "Waldhaus Diplom Pils", 
      "Flensburger Pilsener", 
      "Veltins Pilsener", 
      "Oettinger Original Dunkles Hefeweizen Naturtr\u00fcb", 
      "Brauerei Schl\u00f6sser Maternus Premium Pilsener", 
      "Schwaben Brau Pilsner", 
      "Anon (Sainsbury's) Diat Pils", 
      "Berliner Kindl Bock Dunkel", 
      "Erdinger Weizen Crystal Clear", 
      "Erdinger Weissbier", 
      "Erdinger Octoberfest", 
      "G\u00f6ller Dunkel", 
      "Schlossbrauerei Reckendorf Recken Edel-Pils", 
      "Privatbrauerei H\u00f6ss Holzar-Bier", 
      "Warsteiner Premium Verum", 
      "Privatbrauerei Franz Joseph Sailer Altenmunster Premium", 
      "Privatbrauerei H\u00f6ss Allg\u00e4uer \u00d6ko Bier", 
      "Maisel's Weisse", 
      "Boltens Ur-Alt", 
      "Rothaus Pils", 
      "Stumpf Keiler Weissbier Hell", 
      "Einbecker Mai-Ur-Bock", 
      "Licher Pilsner", 
      "Anon (Waitrose) Hefe-Weiss Bier", 
      "Oschenfurter Kauzen Helles", 
      "Unertl Gourmet Weisse", 
      "Reissdorf K\u00f6lsch", 
      "Schussenrieder Schwarzbier", 
      "Dortmunder Premium Lager", 
      "Z\u00f6tler Privat-Braurei Hefe-weizen", 
      "Einbecker Ur-Bock Dunkel", 
      "Hacker-Pschorr Hefe Weisse", 
      "Schwanen Brauerei Steinhauser Wheat Beer", 
      "Mittenwalder Josefi Bock", 
      "Heller-Trum Aecht Schlenkerla Rauchbier Weizen", 
      "Gaffel K\u00f6lsch", 
      "Brauerei Gebr. Roehrl Straubinger Blauweiss", 
      "Pyraser Angewirts Weizen", 
      "Ayinger Winter Bock", 
      "Ayinger Celebrator", 
      "Kaiserdom Privatbrauerei Pilsener", 
      "Ayinger Ur-Weisse", 
      "Ayinger Jahrundert", 
      "Aktien Brauerei St. Martin Dunkler Doppelbock", 
      "Dupetit Natural Products Cannabia", 
      "Lammsbrau Neumarkter Urstoff", 
      "Hasenbrau AG Augsburg Scheyern Kloster Doppelbock", 
      "Hacklberg Hefeweizen", 
      "Gessner Premium Pils", 
      "Ayinger Brau-Weisse", 
      "Finkbr\u00e4u Hefe Weissbier", 
      "Boltens Ur-Weizen", 
      "Hofbrauhaus M\u00fcnchen M\u00fcnchner Fest-Bier", 
      "Mauritius Zwickauer Bock Dunkel", 
      "Schmucker Doppel-Bock Dunkel", 
      "Oettinger Hefeweissbier Naturtr\u00fcb", 
      "Berliner Kindl M\u00e4rkischer Landmann Schwarzbier", 
      "Beck & Co. Beck's Light", 
      "Schlossbrauerei Kaltenberg K\u00f6nig Ludwig Dunkel", 
      "Friedrich Dull Krautheimer Urtyp Dunkel", 
      "Unertl M\u00fchldorfer Weissbier", 
      "Alpirsbacher Klosterbrau Pils", 
      "Oettinger Pils", 
      "Lauterbacher Bayrischer Hiasl (Weizen)", 
      "Kneitinger Dunkel Export", 
      "Binding R\u00f6mer Pils", 
      "Herforder Pils", 
      "Apoldaer Maibock", 
      "Spaten Octoberfest", 
      "Oettinger Alt", 
      "Krombacher Radler", 
      "Stumpf Keiler Weissbier Dunkel", 
      "Hasseroder Premium Pils", 
      "Private Landbrauerei Sch\u00f6nram Original Altbayrisch Dunkel", 
      "Kloster Andechs Andechser Dunkel", 
      "Gilde Brewery Bergadler Premium Pils", 
      "Kronenbrauerei \u00d6koKrone Organic Pilsner", 
      "Dortmunder Union Original", 
      "Erzquell Pils", 
      "Kulmbacher M\u00f6nchshof Maingold Landbier", 
      "Heller-Trum Aecht Schlenkerla Rauchbier Urbock", 
      "Kloster Andechs Andechser Bergbock Hell", 
      "Warbacher Hefe Weissbier", 
      "Maisel's Weisse Dunkel", 
      "Augustiner Weissbier", 
      "Arcobrau Festbier", 
      "Brauerei L\u00fcbz L\u00fcbzer Pils", 
      "Wernesgruener Pils Legende", 
      "Weihenstephaner Pilsner", 
      "Schlossbrauerei Kaltenberg Pils", 
      "Schlossbrauerei Kaltenberg Konigl Festtaggs Bier", 
      "Schlossbrauerei Kaltenberg Hell", 
      "Schlossbrauerei Kaltenberg Prizregent Luitpold Weissbier Hell", 
      "Schlossbrauerei Kaltenberg K\u00f6nig Ludwig Weissbier", 
      "Berliner Schultheiss Brauerei Original Berliner Weisse Schankbier", 
      "L\u00f6wenbr\u00e4u Premium", 
      "Berliner Kindl Original Weisse mit Schuss: Himbeere", 
      "Paulaner Salvator", 
      "Denninghoff Giessner Pils", 
      "Denninghoff Weiss", 
      "Denninghoff Giessner Export Pils", 
      "Tegernseer Heller Bock", 
      "Erste Kulmbacher Actienbrauerei EKU 28", 
      "Eichbaum Ureich Premium Pils", 
      "Ritter St. Georgen Brauerei Schwarz Bock", 
      "Beck & Co. Beck's Dark", 
      "Schneider & Sohn Aventinus Weizen-Eisbock", 
      "Weihenstephaner Hefe Weissbier", 
      "Weihenstephaner Hefeweissbier Dunkel", 
      "Binding Export", 
      "Bayer-Br\u00e4u Schwarzes R\u00f6slein", 
      "Weihenstephaner Kristall Weissbier", 
      "Weihenstephaner Tradition Bayrisch Dunkel", 
      "Beck & Co. Beck's Gold", 
      "Tegernseer Dunkel Export", 
      "Rothaus Tannen Z\u00e4pfle", 
      "Oechsner Schwarzbier", 
      "Oettinger Winterbier", 
      "Traun Heinz Von Stein Bio Lagerbier", 
      "Lammsbrau Neumarkter Weisse", 
      "Karg Weissbier", 
      "Binding Kutscher Alt", 
      "Ettaler Currator Doppelbock", 
      "Binding Diat Pils", 
      "Erzquell Brauerei Bielstein Zunft K\u00f6lsch", 
      "Ritter St. Georgen Brauerei Weisser Franke", 
      "Fuerstenberg Premium Pilsener", 
      "Schneider & Sohn Aventinus", 
      "Kloster Andechs Hell", 
      "Anon (Waitrose) Hefe-Weiss Dunkel", 
      "Spaten Franziskaner Weissbier Kristallklar", 
      "Paulaner Roggen", 
      "Berliner Schultheiss Brauerei Lager Schwarz", 
      "Sch\u00f6fferhofer Kristallweizen", 
      "Spaten Franziskaner Hefe-Weissbier Dunkel", 
      "Schlossbrauerei Grunbach Grunbacher Altweiser Gold", 
      "Hacker-Pschorr Edelhell", 
      "Unertl Weissbier", 
      "Spaten Premium Bock", 
      "Beck & Co. Beck's", 
      "Schweiger Helles Export", 
      "Hacker-Pschorr Anno 1417 Naturtr\u00fcbes Kellerbier", 
      "Schneider Weisse Weizen Hell", 
      "Holsten Duckstein", 
      "Darmstadter Privatbrauerei Wilhelm Rummel Weissbier Hefe Hell", 
      "Kloster Andechs Andechser Spezial Hell", 
      "Hacker-Pschorr Original Oktoberfest", 
      "Malzm\u00fchlen K\u00f6lsch", 
      "Schl\u00fcssel Original Schl\u00fcssel", 
      "Spaten Optimator", 
      "Berliner Burgerbrau Bernauer Schwarzbier", 
      "K\u00fcppers K\u00f6lsch", 
      "Spaten Premium Lager", 
      "Tegernsee Quirinus Donkler Doppelbock", 
      "Holsten Pils", 
      "Bender Brauerei Arnstein Herzog von Franken", 
      "Riedenburger Michaeli Dunkel Hefeweizen", 
      "H\u00f6vels Original Bitterbier", 
      "Br\u00e4u im Moos Dunkel", 
      "Beck & Co. St. Pauli Girl Lager", 
      "Holsten Export", 
      "Erbacher Premium Pils", 
      "Landskron Pupen-Schultzes Schwarzbier", 
      "P J Fruh Fruh K\u00f6lsch", 
      "Privatbrauerei Franz Joseph Sailer Altenmunster Rauchenfelser Steinbier", 
      "Berliner Kindl Original Weisse mit Schuss: Waldmeister", 
      "Landskron Wurzig-Frisch Hell", 
      "Landskron Extra-Hell", 
      "Sailerbr\u00e4u Altenm\u00fcnster Brauer Bier", 
      "Maisel's RedLight Super Premium Beer"
    ], 
    "targetFormula": "(!fb:food.beer_country_region.beers_from_here fb:en.germany)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0345h fb:food.beer_country_region.beers_from_here ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some german beers", 
    "id": 55
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.jerry_seinfeld fb:people.person.height_meters ?x1 } LIMIT 9999", 
    "result": [
      "1.803"
    ], 
    "targetFormula": "(!fb:people.person.height_meters fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0q5hw fb:people.person.height_meters ?x1 } LIMIT 9999", 
    "utterance": "how tall is jerry seinfeld", 
    "id": 56
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.henry_iii_of_england fb:people.deceased_person.place_of_burial ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Westminster Abbey"
    ], 
    "targetFormula": "(!fb:people.deceased_person.place_of_burial fb:en.henry_iii_of_england)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cl53 fb:people.deceased_person.place_of_burial ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was henry iii buried", 
    "id": 57
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_honor.award fb:en.academy_award_for_best_picture . FILTER (?x1 != fb:en.academy_award_for_best_picture) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2010\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2011\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"2010\"^^xsd:datetime) . ?x1 fb:award.award_honor.award_winner ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Emile Sherman", 
      "Iain Canning", 
      "Gareth Unwin"
    ], 
    "targetFormula": "(!fb:award.award_honor.award_winner (and ((lambda x (fb:award.award_honor.award (var x))) fb:en.academy_award_for_best_picture) ((lambda x (fb:award.award_honor.year (var x))) (date 2010 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_honor.award fb:m.0gq9h . FILTER (?x1 != fb:m.0gq9h) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2010\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2011\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"2010\"^^xsd:datetime) . ?x1 fb:award.award_honor.award_winner ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who won best movie of 2010", 
    "id": 58
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.japanese_yen fb:finance.currency.prefix_symbol ?x1 } LIMIT 9999", 
    "result": [
      "\u00a5"
    ], 
    "targetFormula": "(!fb:finance.currency.prefix_symbol fb:en.japanese_yen)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.088n7 fb:finance.currency.prefix_symbol ?x1 } LIMIT 9999", 
    "utterance": "what is the symbol for yen", 
    "id": 59
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.coronet_peak fb:skiing.ski_area.opening_date ?x1 } LIMIT 9999", 
    "result": [
      "1947"
    ], 
    "targetFormula": "(!fb:skiing.ski_area.opening_date fb:en.coronet_peak)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.044f85 fb:skiing.ski_area.opening_date ?x1 } LIMIT 9999", 
    "utterance": "when did coronet peak open", 
    "id": 60
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:government.us_president.presidency_number 22.0 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Grover Cleveland"
    ], 
    "targetFormula": "(fb:government.us_president.presidency_number (number 22.0 fb:en.unitless))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:government.us_president.presidency_number 22.0 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the 22nd president", 
    "id": 61
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.b12 fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Electronic music", 
      "Techno", 
      "Intelligent dance music"
    ], 
    "targetFormula": "(!fb:music.artist.genre fb:en.b12)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07sxww fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genre of music is b12", 
    "id": 62
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_doctor fb:fictional_universe.fictional_character.species ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Time Lord"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_character.species fb:en.the_doctor)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03thkf fb:fictional_universe.fictional_character.species ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what species is the doctor", 
    "id": 63
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.samuel_beckett fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Emphysema"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.samuel_beckett)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06whf fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "how did samuel beckett die", 
    "id": 64
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_dabble_blog fb:internet.blog.blogger ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Avi Bryant"
    ], 
    "targetFormula": "(!fb:internet.blog.blogger fb:en.the_dabble_blog)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04sxg_l fb:internet.blog.blogger ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who writes the dabble blog", 
    "id": 65
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.nbc_meet_the_press_video fb:broadcast.content.producer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "MSNBC"
    ], 
    "targetFormula": "(!fb:broadcast.content.producer fb:en.nbc_meet_the_press_video)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.041w8j2 fb:broadcast.content.producer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who produces meet the press", 
    "id": 66
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.13_going_on_30 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gary Winick"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vzpb fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed 13 going on 30", 
    "id": 67
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.hat fb:fashion.garment.more_specialized_forms ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Toque", 
      "Baseball cap", 
      "Tam o' Shanter", 
      "Square academic cap", 
      "Kippah", 
      "Bowler hat", 
      "Fedora", 
      "Beanie", 
      "Straw hat", 
      "Shtreimel", 
      "Spodik", 
      "Kalimavkion", 
      "Kolpik", 
      "Helmet"
    ], 
    "targetFormula": "(!fb:fashion.garment.more_specialized_forms fb:en.hat)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02dl1y fb:fashion.garment.more_specialized_forms ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some types of hats", 
    "id": 68
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mark_mckinney fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1959-06-26"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.mark_mckinney)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.04bt9q fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when was mark mckinney born", 
    "id": 69
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.syphillis fb:medicine.infectious_disease.transmission ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Vertical transmission", 
      "Sex"
    ], 
    "targetFormula": "(!fb:medicine.infectious_disease.transmission fb:en.syphillis)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.074m2 fb:medicine.infectious_disease.transmission ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "how is syphilis transmitted", 
    "id": 70
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.jack_albertson fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "1981-11-25"
    ], 
    "targetFormula": "(!fb:people.deceased_person.date_of_death fb:en.jack_albertson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0hw6_ fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did jack albertson die", 
    "id": 71
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.titanic_special_edition_dvd fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Cameron", 
      "Jon Landau"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dr_4 fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was titanic produced by", 
    "id": 72
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_thinker fb:visual_art.artwork.media ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Bronze", 
      "Marble"
    ], 
    "targetFormula": "(!fb:visual_art.artwork.media fb:en.the_thinker)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.030ljv fb:visual_art.artwork.media ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the thinker made of", 
    "id": 73
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.john_f_kennedy fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "result": [
      "1963-11-22"
    ], 
    "targetFormula": "(!fb:people.deceased_person.date_of_death fb:en.john_f_kennedy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0d3k14 fb:people.deceased_person.date_of_death ?x1 } LIMIT 9999", 
    "utterance": "when did john f kennedy die", 
    "id": 74
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.leukemia fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Mutation"
    ], 
    "targetFormula": "(!fb:medicine.disease.causes fb:en.leukemia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04psf fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what diseases cause leukemia", 
    "id": 75
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.windows_live_search fb:internet.website.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Search engine", 
      "Web search engine"
    ], 
    "targetFormula": "(!fb:internet.website.category fb:en.windows_live_search)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0bx7rw fb:internet.website.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what kind of website is bing", 
    "id": 76
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.euro fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "33"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.euro))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02l6h fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries use euros", 
    "id": 77
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.wells_fargo fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1852-03-18"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.wells_fargo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01kdws fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was wells fargo founded", 
    "id": 78
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.walden_pond fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Massachusetts", 
      "Middlesex County", 
      "Concord"
    ], 
    "targetFormula": "(!fb:location.location.containedby fb:en.walden_pond)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02lzfx fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is walden pond located", 
    "id": 79
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.tostitos . FILTER (?x1 != fb:en.tostitos) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.tostitos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.050s87 . FILTER (?x1 != fb:m.050s87) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was tostitos introduced", 
    "id": 80
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.taekwondo fb:martial_arts.martial_art.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Korea"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_art.origin fb:en.taekwondo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07gyv fb:martial_arts.martial_art.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did taekwondo originate", 
    "id": 81
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.westminster_abbey fb:architecture.structure.height_meters ?x1 } LIMIT 9999", 
    "result": [
      "68.7"
    ], 
    "targetFormula": "(!fb:architecture.structure.height_meters fb:en.westminster_abbey)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0bvqq fb:architecture.structure.height_meters ?x1 } LIMIT 9999", 
    "utterance": "how tall is westminster abbey", 
    "id": 82
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jerry_seinfeld fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brooklyn"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0q5hw fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was jerry seinfeld born", 
    "id": 83
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jay Roach"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed meet the parents", 
    "id": 84
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ron_glass fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Buddhism"
    ], 
    "targetFormula": "(!fb:people.person.religion fb:en.ron_glass)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03h82p fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is ron glass 's religion", 
    "id": 85
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:food.nutrition_fact.food fb:en.quinoa . FILTER (?x1 != fb:en.quinoa) . ?x1 fb:food.nutrition_fact.nutrient fb:en.protein . FILTER (?x1 != fb:en.protein) . ?x1 fb:food.nutrition_fact.quantity ?x2 } LIMIT 9999", 
    "result": [
      "4.4"
    ], 
    "targetFormula": "(!fb:food.nutrition_fact.quantity (and ((lambda x (fb:food.nutrition_fact.food (var x))) fb:en.quinoa) ((lambda x (fb:food.nutrition_fact.nutrient (var x))) fb:en.protein)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:food.nutrition_fact.food fb:m.0f07x . FILTER (?x1 != fb:m.0f07x) . ?x1 fb:food.nutrition_fact.nutrient fb:m.05wvs . FILTER (?x1 != fb:m.05wvs) . ?x1 fb:food.nutrition_fact.quantity ?x2 } LIMIT 9999", 
    "utterance": "how much protein is in quinoa", 
    "id": 86
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.026lz95 fb:biology.fossil_specimen.found_at_site ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Kleine Feldhofer Grotte"
    ], 
    "targetFormula": "(!fb:biology.fossil_specimen.found_at_site fb:m.026lz95)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.026lz95 fb:biology.fossil_specimen.found_at_site ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was neanderthal 1 found", 
    "id": 87
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.australia fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "7692024"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.australia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0chghy fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is the area of australia", 
    "id": 88
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ceratopsia fb:base.dinosaur.dinosaur.diet ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Herbivore"
    ], 
    "targetFormula": "(!fb:base.dinosaur.dinosaur.diet fb:en.ceratopsia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04qb56 fb:base.dinosaur.dinosaur.diet ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what diet did ceratopsia have", 
    "id": 89
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.plastiki fb:boats.ship.means_of_propulsion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Wind power"
    ], 
    "targetFormula": "(!fb:boats.ship.means_of_propulsion fb:en.plastiki)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05c15_j fb:boats.ship.means_of_propulsion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "how is the plastiki propelled", 
    "id": 90
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.car_talk fb:broadcast.content.artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom and Ray Magliozzi", 
      "Tom Magliozzi"
    ], 
    "targetFormula": "(!fb:broadcast.content.artist fb:en.car_talk)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01_zz fb:broadcast.content.artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are the hosts of car talk", 
    "id": 91
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jupiter fb:astronomy.orbital_relationship.orbited_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Callisto", 
      "Callirrhoe", 
      "Chaldene", 
      "Himalia", 
      "Elara", 
      "Ananke", 
      "Pasiphae", 
      "Sinope", 
      "Carme", 
      "Themisto", 
      "Kale", 
      "Isonoe", 
      "Harpalyke", 
      "Hermippe", 
      "Praxidike", 
      "Iocaste", 
      "Pasithee", 
      "Euporie", 
      "Orthosie", 
      "Euanthe", 
      "Thyone", 
      "Aitne", 
      "Erinome", 
      "Taygete", 
      "Kalyke", 
      "Eurydome", 
      "Sponde", 
      "Autonoe", 
      "Megaclite", 
      "Aoede", 
      "S/2000 J 11", 
      "Arche", 
      "Eukelade", 
      "S/2003 J 2", 
      "S/2003 J 3", 
      "S/2003 J 4", 
      "S/2003 J 5", 
      "Helike", 
      "Hegemone", 
      "S/2003 J 9", 
      "S/2003 J 10", 
      "Kallichore", 
      "S/2003 J 12", 
      "Cyllene", 
      "Kore", 
      "S/2003 J 15", 
      "S/2003 J 16", 
      "Herse", 
      "S/2003 J 18", 
      "S/2003 J 19", 
      "Carpo", 
      "Mneme", 
      "Thelxinoe", 
      "S/2003 J 23", 
      "Lysithea", 
      "Adrastea", 
      "Europa", 
      "Metis", 
      "Amalthea", 
      "Ganymede", 
      "Thebe", 
      "Leda", 
      "Io", 
      "S/2010 J 1", 
      "S/2010 J 2", 
      "S/2011 J 1", 
      "S/2011 J 2"
    ], 
    "targetFormula": "(!fb:astronomy.orbital_relationship.orbited_by fb:en.jupiter)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09q84 fb:astronomy.orbital_relationship.orbited_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the moons of jupiter", 
    "id": 92
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.illinois fb:location.location.time_zones ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Central Time Zone", 
      "UTC\u221206:00"
    ], 
    "targetFormula": "(!fb:location.location.time_zones fb:en.illinois)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03v0t fb:location.location.time_zones ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what time zone is illinois", 
    "id": 93
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:interests.collection.collector fb:en.elizabeth_ii_of_the_united_kingdom . FILTER (?x1 != fb:en.elizabeth_ii_of_the_united_kingdom) . ?x1 fb:interests.collection.category ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Postage stamp"
    ], 
    "targetFormula": "(!fb:interests.collection.category ((lambda x (fb:interests.collection.collector (var x))) fb:en.elizabeth_ii_of_the_united_kingdom))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:interests.collection.collector fb:m.0d1_f . FILTER (?x1 != fb:m.0d1_f) . ?x1 fb:interests.collection.category ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what did elizabeth ii collect", 
    "id": 94
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.luke_skywalker fb:fictional_universe.fictional_character.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Polis Massa"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_character.place_of_birth fb:en.luke_skywalker)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0f1bg fb:fictional_universe.fictional_character.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was luke skywalker born", 
    "id": 95
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.macintosh fb:computer.computer.introduced ?x1 } LIMIT 9999", 
    "result": [
      "1984-01-24"
    ], 
    "targetFormula": "(!fb:computer.computer.introduced fb:en.macintosh)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0zd6 fb:computer.computer.introduced ?x1 } LIMIT 9999", 
    "utterance": "when was macintosh introduced", 
    "id": 96
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_game_of_life fb:games.game.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Reuben Klamer"
    ], 
    "targetFormula": "(!fb:games.game.designer fb:en.the_game_of_life)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.025sm93 fb:games.game.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the game of life", 
    "id": 97
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.2_fast_2_furious fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John Singleton"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.2_fast_2_furious)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.024lff fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed 2 fast 2 furious", 
    "id": 98
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09hvx fb:opera.opera.language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "German Language"
    ], 
    "targetFormula": "(!fb:opera.opera.language fb:m.09hvx)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09hvx fb:opera.opera.language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what language is lohengrin in", 
    "id": 99
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.coal fb:geology.rock_type.sub_types ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sub-bituminous coal", 
      "Lignite", 
      "Anthracite", 
      "Cannel coal", 
      "Bituminous coal"
    ], 
    "targetFormula": "(!fb:geology.rock_type.sub_types fb:en.coal)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01sy7 fb:geology.rock_type.sub_types ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the sub-types of coal", 
    "id": 100
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tagliablog fb:internet.blog.language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Italian Language"
    ], 
    "targetFormula": "(!fb:internet.blog.language fb:en.tagliablog)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04clgrg fb:internet.blog.language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what language is tagliablog in", 
    "id": 101
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.god fb:religion.deity.deity_of ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:religion.deity.deity_of fb:en.god))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0d05l6 fb:religion.deity.deity_of ?x1 } } } LIMIT 9999", 
    "utterance": "how many religions worship god", 
    "id": 102
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mount_fuji fb:geography.mountain.last_eruption ?x1 } LIMIT 9999", 
    "result": [
      "1707-12-16"
    ], 
    "targetFormula": "(!fb:geography.mountain.last_eruption fb:en.mount_fuji)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cks0 fb:geography.mountain.last_eruption ?x1 } LIMIT 9999", 
    "utterance": "when did mount fuji last erupt", 
    "id": 103
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.wells_fargo fb:business.customer.supplier ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "CompuCom"
    ], 
    "targetFormula": "(!fb:business.customer.supplier fb:en.wells_fargo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01kdws fb:business.customer.supplier ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is wells fargo 's supplier", 
    "id": 104
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.asia fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.asia) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "436000000", 
      "4164252000", 
      "243000000", 
      "947000000", 
      "800000000", 
      "1402000000", 
      "4140336501", 
      "3879000000", 
      "3634000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.asia))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0j0k fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.0j0k) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population of asia", 
    "id": 105
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.antarctica fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "14000000"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.antarctica)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0jfx fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is the area of antarctica", 
    "id": 106
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.positron fb:physics.particle.spin ?x1 } LIMIT 9999", 
    "result": [
      "0.5"
    ], 
    "targetFormula": "(!fb:physics.particle.spin fb:en.positron)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.065sn fb:physics.particle.spin ?x1 } LIMIT 9999", 
    "utterance": "what is the spin of a positron", 
    "id": 107
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0b_h31m fb:boats.ship.length_overall ?x1 } LIMIT 9999", 
    "result": [
      "15.25"
    ], 
    "targetFormula": "(!fb:boats.ship.length_overall fb:m.0b_h31m)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0b_h31m fb:boats.ship.length_overall ?x1 } LIMIT 9999", 
    "utterance": "how long overall is the tahina", 
    "id": 108
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.country_time . FILTER (?x1 != fb:en.country_time) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.country_time))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.04wg3q . FILTER (?x1 != fb:m.04wg3q) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was country time produced", 
    "id": 109
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.hurricane_andrew fb:meteorology.tropical_cyclone.formed ?x1 } LIMIT 9999", 
    "result": [
      "1992-08-16"
    ], 
    "targetFormula": "(!fb:meteorology.tropical_cyclone.formed fb:en.hurricane_andrew)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01f01h fb:meteorology.tropical_cyclone.formed ?x1 } LIMIT 9999", 
    "utterance": "when did hurricane andrew form", 
    "id": 110
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:en.the_three_doctors fb:tv.tv_series_episode.producers ?x1 . ?x1 fb:tv.tv_producer_episode_credit.producer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Barry Letts"
    ], 
    "targetFormula": "(!fb:tv.tv_producer_episode_credit.producer (!fb:tv.tv_series_episode.producers fb:en.the_three_doctors))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.0201f8 fb:tv.tv_series_episode.producers ?x1 . ?x1 fb:tv.tv_producer_episode_credit.producer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who produced the three doctors", 
    "id": 111
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:en.titanic_special_edition_dvd . FILTER (?x1 != fb:en.titanic_special_edition_dvd) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "result": [
      "194", 
      "195"
    ], 
    "targetFormula": "(!fb:film.film_cut.runtime ((lambda x (fb:film.film_cut.film (var x))) fb:en.titanic_special_edition_dvd))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:m.0dr_4 . FILTER (?x1 != fb:m.0dr_4) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "utterance": "how long is titanic 's runtime", 
    "id": 112
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.stephen_fry fb:influence.influence_node.influenced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Oscar Wilde", 
      "Douglas Adams", 
      "Edward Frederic Benson", 
      "Christopher Hitchens"
    ], 
    "targetFormula": "(!fb:influence.influence_node.influenced_by fb:en.stephen_fry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0h0yt fb:influence.influence_node.influenced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who has influenced stephen fry", 
    "id": 113
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.denver_spurs fb:sports.sports_team.arena_stadium ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "McNichols Sports Arena"
    ], 
    "targetFormula": "(!fb:sports.sports_team.arena_stadium fb:en.denver_spurs)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.068nsv fb:sports.sports_team.arena_stadium ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where do the denver spurs play", 
    "id": 114
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.iowa fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.iowa) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "2818401", 
      "2791969", 
      "2891119", 
      "2858615", 
      "3062309", 
      "2931997", 
      "2929067", 
      "2953635", 
      "2934234", 
      "2907985", 
      "2850746", 
      "2941999", 
      "3032870", 
      "2888190", 
      "2902872", 
      "2829684", 
      "2999212", 
      "2781018", 
      "3049883", 
      "2768393", 
      "2880000", 
      "2770590", 
      "2964454", 
      "2917634", 
      "3016734", 
      "2797613", 
      "2867373", 
      "2767006", 
      "3074186", 
      "2382000", 
      "2439000", 
      "2301000", 
      "2756000", 
      "2880847", 
      "2742000", 
      "2227000", 
      "2217000", 
      "2428000", 
      "2543000", 
      "2708000", 
      "2223000", 
      "2249000", 
      "2305000", 
      "2475000", 
      "2679000", 
      "2729000", 
      "2495000", 
      "2625000", 
      "2747000", 
      "2509000", 
      "2214000", 
      "2220000", 
      "2366000", 
      "2441000", 
      "2494000", 
      "2746000", 
      "2918069", 
      "2425000", 
      "2228000", 
      "2450000", 
      "2629000", 
      "2825368", 
      "2915739", 
      "2460000", 
      "2537000", 
      "2334000", 
      "2703000", 
      "2805000", 
      "2222000", 
      "2279000", 
      "2578000", 
      "2626000", 
      "2212000", 
      "2903082", 
      "2338000", 
      "2420000", 
      "2432000", 
      "2750000", 
      "2400000", 
      "2407000", 
      "2482000", 
      "2510000", 
      "2467000", 
      "2308000", 
      "2803000", 
      "2867530", 
      "2913573", 
      "2231000", 
      "2211000", 
      "2379000", 
      "2427000", 
      "2489000", 
      "2498000", 
      "2520000", 
      "2860287", 
      "2863715", 
      "2224771", 
      "2404021", 
      "674913", 
      "2231853", 
      "192214", 
      "2621073", 
      "2538268", 
      "2470939", 
      "1194020", 
      "2757537", 
      "2824376", 
      "1624615", 
      "2913808", 
      "1912297", 
      "43112", 
      "2870547", 
      "2836972", 
      "2982644", 
      "2851705", 
      "2524000", 
      "2351000", 
      "2762000", 
      "2793000", 
      "2491000", 
      "2617000", 
      "2716000", 
      "2376000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.iowa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.03s0w fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.03s0w) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population in iowa", 
    "id": 115
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.renaissance fb:time.event.start_date ?x1 } LIMIT 9999", 
    "result": [
      "1300"
    ], 
    "targetFormula": "(!fb:time.event.start_date fb:en.renaissance)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06cvx fb:time.event.start_date ?x1 } LIMIT 9999", 
    "utterance": "when did the renaissance begin", 
    "id": 116
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.titanic_special_edition_dvd fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Horner"
    ], 
    "targetFormula": "(!fb:film.film.music fb:en.titanic_special_edition_dvd)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dr_4 fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the music by in titanic", 
    "id": 117
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.067y_k7 fb:book.written_work.author ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Julian Lloyd Webber"
    ], 
    "targetFormula": "(!fb:book.written_work.author fb:m.067y_k7)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.067y_k7 fb:book.written_work.author ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who wrote travels with my cello", 
    "id": 118
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.judaism fb:religion.religion.includes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jewish Renewal", 
      "Hasidic Judaism", 
      "Reconstructionist Judaism", 
      "Orthodox Judaism", 
      "Conservative Judaism", 
      "Sephardic Judaism", 
      "Reform Judaism", 
      "Haredi Judaism", 
      "Modern Orthodox Judaism", 
      "Karaite Judaism", 
      "Rabbinic Judaism", 
      "Gitit"
    ], 
    "targetFormula": "(!fb:religion.religion.includes fb:en.judaism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03_gx fb:religion.religion.includes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what types of judaism are there", 
    "id": 119
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pablo_picasso fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atheism"
    ], 
    "targetFormula": "(!fb:people.person.religion fb:en.pablo_picasso)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.060_7 fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what religion was pablo picasso", 
    "id": 120
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.new_york_state fb:common.topic.alias ?x1 } LIMIT 9999", 
    "result": [
      "NY", 
      "The Empire State", 
      "New York State"
    ], 
    "targetFormula": "(!fb:common.topic.alias fb:en.new_york_state)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.059rby fb:common.topic.alias ?x1 } LIMIT 9999", 
    "utterance": "what are nicknames for new york", 
    "id": 121
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mike_brown_1970 fb:basketball.basketball_coach.team ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cleveland Cavaliers"
    ], 
    "targetFormula": "(!fb:basketball.basketball_coach.team fb:en.mike_brown_1970)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.08lcnf fb:basketball.basketball_coach.team ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what team does mike brown coach", 
    "id": 122
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.uk fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.uk))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01nv4h fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries use uk money", 
    "id": 123
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.london_stock_exchange fb:finance.stock_exchange.primary_regions ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "United Kingdom"
    ], 
    "targetFormula": "(!fb:finance.stock_exchange.primary_regions fb:en.london_stock_exchange)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01c3gj fb:finance.stock_exchange.primary_regions ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what regions does the lse cover", 
    "id": 124
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cs96 fb:meteorology.cloud.appearance ?x1 } LIMIT 9999", 
    "result": [
      "Thin, wisplike strands"
    ], 
    "targetFormula": "(!fb:meteorology.cloud.appearance fb:m.0cs96)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cs96 fb:meteorology.cloud.appearance ?x1 } LIMIT 9999", 
    "utterance": "what do cirrus clouds look like", 
    "id": 125
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.danny_devito fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1944-11-17"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.danny_devito)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0q9kd fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "what year was danny devito born", 
    "id": 126
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:amusement_parks.park.rides fb:en.splash_mountain . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Disneyland"
    ], 
    "targetFormula": "(fb:amusement_parks.park.rides fb:en.splash_mountain)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:amusement_parks.park.rides fb:m.05086j . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what park is splash mountain", 
    "id": 127
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.t-38_talon fb:aviation.aircraft_model.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Northrop Corporation"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_model.manufacturer fb:en.t-38_talon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01_2_2 fb:aviation.aircraft_model.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who manufactures the t-38 talon", 
    "id": 128
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.polio_vaccine fb:medicine.vaccine.developed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jonas Salk", 
      "Albert Sabin"
    ], 
    "targetFormula": "(!fb:medicine.vaccine.developed_by fb:en.polio_vaccine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01b90_ fb:medicine.vaccine.developed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who developed the polio vaccine", 
    "id": 129
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.syphillis fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Treponema pallidum"
    ], 
    "targetFormula": "(!fb:medicine.disease.causes fb:en.syphillis)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.074m2 fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the causes of syphilis", 
    "id": 130
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.international_style fb:architecture.architectural_style.architects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Richard Neutra", 
      "Rudolph Schindler", 
      "Ludwig Mies van der Rohe", 
      "Le Corbusier", 
      "Berthold Lubetkin", 
      "Clarence W. W. Mayhew"
    ], 
    "targetFormula": "(!fb:architecture.architectural_style.architects fb:en.international_style)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01tq62 fb:architecture.architectural_style.architects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are some bauhaus architects", 
    "id": 131
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.easy_cheese . FILTER (?x1 != fb:en.easy_cheese) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kraft Foods"
    ], 
    "targetFormula": "(!fb:business.company_brand_relationship.company ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.easy_cheese))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.07kf0v . FILTER (?x1 != fb:m.07kf0v) . ?x1 fb:business.company_brand_relationship.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the owner of easy cheese", 
    "id": 132
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:en.titanic_special_edition_dvd . FILTER (?x2 != fb:en.titanic_special_edition_dvd) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "75"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.titanic_special_edition_dvd)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:m.0dr_4 . FILTER (?x2 != fb:m.0dr_4) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many awards did titanic win", 
    "id": 133
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.hinduism fb:religion.religion.deities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Krishna", 
      "Murugan", 
      "Jagaddhatri", 
      "Devi", 
      "Durga", 
      "Guardians of the directions", 
      "Nandi", 
      "Radha", 
      "Ganesha", 
      "Lakshmi", 
      "Adimurti", 
      "Garuda", 
      "Hanuman", 
      "Indra", 
      "Varuna", 
      "Vayu", 
      "Saraswati", 
      "Khatushyam", 
      "Shakti", 
      "Agni", 
      "Balarama", 
      "Rohini", 
      "Kamadeva", 
      "Brahman", 
      "Prajapati", 
      "Jagannath", 
      "Kalki", 
      "Deva", 
      "N\u0101ga", 
      "Ayyappan", 
      "Vishnu", 
      "Pashupati", 
      "Rama", 
      "Vishvakarman", 
      "Aru\u1e47a", 
      "Dhara", 
      "Nirrta", 
      "Yama", 
      "Daksha", 
      "Shiva", 
      "Kali", 
      "Bhadra", 
      "Surya", 
      "Harihara", 
      "Anala", 
      "Radha Krishna", 
      "Apam Napat", 
      "Revanta", 
      "Bhaga", 
      "Maruts", 
      "Trimurti", 
      "B\u1e5bhaspati", 
      "Bhagavan", 
      "Mariamman", 
      "Lakshmana", 
      "Savitr", 
      "Ribhus", 
      "Nara-Narayana", 
      "Dhatri", 
      "Rishabha", 
      "Yama", 
      "Anila", 
      "Tvastar", 
      "Bhumiya", 
      "Mitravinda", 
      "Brahma"
    ], 
    "targetFormula": "(!fb:religion.religion.deities fb:en.hinduism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03j6c fb:religion.religion.deities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the deities of hinduism", 
    "id": 134
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02z3r fb:dining.cuisine.restaurant ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Fleur de Lys", 
      "Gregoire", 
      "Le Champlain", 
      "Voulez-Vous", 
      "Ultra Supper Club", 
      "Scaramouche Restaurant", 
      "Daniel", 
      "Biff's Bistro", 
      "Le Gavroche", 
      "Pontus by the sea", 
      "The Smoking Dog Bistro", 
      "Mas", 
      "Jeanty @ Jack's", 
      "Floataway Cafe", 
      "103 West", 
      "Babette's Cafe", 
      "The Big Red Tomato Bistro", 
      "Brasserie Le Coze", 
      "Cafe Diem", 
      "La Petite Auberge", 
      "Le Saint Amour", 
      "Nikolai's Roof", 
      "South of France", 
      "Violette", 
      "Brasserie Jo", 
      "Louis XVI", 
      "Cafe Rouge", 
      "La Note", 
      "La Poubelle Restaurant & Bar", 
      "La Conversation", 
      "Pastis", 
      "Fleur de Cocoa", 
      "Manresa", 
      "The Girl and the Fig, Petaluma, CA", 
      "California Culinary Academy", 
      "Pacific", 
      "Restaurant Lulu", 
      "Tommy Toy's Cuisine Chinoise", 
      "The Girl and the Fig", 
      "Lucques", 
      "Balthazar Restaurant", 
      "Aquarelle", 
      "Belgian Restaurant", 
      "Ventana", 
      "Girl and the Fig Cafe", 
      "Girl and the Fig", 
      "Girl and the Fig Pantry", 
      "Three Mountain Inn", 
      "The Old Newfane Inn", 
      "The Parker House Inn and Restaurant", 
      "Eva", 
      "Pierre", 
      "Lut\u00e8ce", 
      "Jean-Georges", 
      "Moulin de Mougins", 
      "Domaine Chandon California", 
      "Caf\u00e9 du Monde", 
      "Bistro Moncur", 
      "Bistrot Bistro", 
      "Bistro Pastis", 
      "Trafalgars Bistro", 
      "Chouchou", 
      "Masa's Restaurant", 
      "Chez Spencer", 
      "Bushi-tei", 
      "Le Zinc", 
      "Coi", 
      "Cote Sud", 
      "Le Montmartre", 
      "Restaurant Gordon Ramsay", 
      "L\u2019Atelier de Joel Robuchon", 
      "Hand and Flowers", 
      "Bistro Francais", 
      "Lumiere", 
      "Cassis", 
      "Jules Bistro", 
      "Le Gavroche", 
      "Mistral French Bistro", 
      "Parkside", 
      "The William Tell Restaurant", 
      "Boneta", 
      "Elixir", 
      "Auberge du Pommier", 
      "Azure Restaurant & Bar", 
      "Bodega", 
      "C\u00e9lestin", 
      "Chez Victor", 
      "Tati Bistro", 
      "Truffles Restaurant - Four Seasons Toronto", 
      "Central Michel Richard", 
      "Marcel's", 
      "Cafe MoZU", 
      "Bistrot du Coin", 
      "Perigee", 
      "Absinthe", 
      "Le Baccara", 
      "Signatures", 
      "Chez Papa Resto", 
      "The Butler & The Chef Bistro", 
      "Everest", 
      "Le Bec-Fin", 
      "Bistro 990", 
      "Le Continental", 
      "L'\u00c9chaud\u00e9", 
      "La Tani\u00e8re", 
      "Le Canard Hupp\u00e9", 
      "Le Marie-Clarisse", 
      "Le Panache", 
      "Le Galopin", 
      "Monte Cristo", 
      "Le Cercle", 
      "Le Clocher Pench\u00e9", 
      "Restaurant Initiale", 
      "Brasserie Les Halles", 
      "Tom Aikens Restaurant", 
      "Applebee's", 
      "Bistrot la Minette", 
      "Picasso", 
      "Solo", 
      "Cordial", 
      "Fred", 
      "FG", 
      "Latour", 
      "Masa's", 
      "Pastis", 
      "PlumpJack Cafe", 
      "Rubicon", 
      "French Laundry", 
      "Bistro 330", 
      "L'appart Resto", 
      "Au Bon Pain", 
      "Le Saint-Amour", 
      "Chanterelle", 
      "Le Bernardin", 
      "Chez Papa Bistrot", 
      "Galatoire's", 
      "Benitz Bistro", 
      "Pied a Terre", 
      "TCBY San Anselmo", 
      "Antoine's", 
      "Caf\u00e9 des Artistes", 
      "Z", 
      "La Fenouilli\u00e8re", 
      "Restaurante Martin Berasategui", 
      "The Capital", 
      "Blueberry Hill", 
      "Alain Ducasse", 
      "Chapeau", 
      "Le Crocodile", 
      "m.04yjvnx"
    ], 
    "targetFormula": "(!fb:dining.cuisine.restaurant fb:m.02z3r)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02z3r fb:dining.cuisine.restaurant ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some french restaurants", 
    "id": 135
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.danny_devito fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Judaism", 
      "Catholicism"
    ], 
    "targetFormula": "(!fb:people.person.religion fb:en.danny_devito)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0q9kd fb:people.person.religion ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is danny devito 's religion", 
    "id": 136
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.bruce_almighty fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2003-05-23"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01jft4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was bruce almighty released", 
    "id": 137
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:opera.opera.language fb:en.french } } } LIMIT 9999", 
    "result": [
      "304"
    ], 
    "targetFormula": "(count (fb:opera.opera.language fb:en.french))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:opera.opera.language fb:m.064_8sq } } } LIMIT 9999", 
    "utterance": "how many french operas are there", 
    "id": 138
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.michael_jackson fb:music.artist.active_start ?x1 } LIMIT 9999", 
    "result": [
      "1967"
    ], 
    "targetFormula": "(!fb:music.artist.active_start fb:en.michael_jackson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.09889g fb:music.artist.active_start ?x1 } LIMIT 9999", 
    "utterance": "when did michael jackson go solo", 
    "id": 139
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.green_party fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "2001"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.green_party)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07k5l fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was the green party founded", 
    "id": 140
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bertrand_russell fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Influenza"
    ], 
    "targetFormula": "(!fb:people.deceased_person.cause_of_death fb:en.bertrand_russell)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01bpn fb:people.deceased_person.cause_of_death ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what did bertrand russell die of", 
    "id": 141
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_guardian fb:book.newspaper.circulation_areas ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "London", 
      "United Kingdom"
    ], 
    "targetFormula": "(!fb:book.newspaper.circulation_areas fb:en.the_guardian)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cnn5 fb:book.newspaper.circulation_areas ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is the guardian circulated", 
    "id": 142
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.miller_lite fb:food.beer.beer_style ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lite American Lager"
    ], 
    "targetFormula": "(!fb:food.beer.beer_style fb:en.miller_lite)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04747g fb:food.beer.beer_style ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of beer is miller lite", 
    "id": 143
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.hawker_sea_hawk fb:aviation.aircraft_model.designed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sydney Camm"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_model.designed_by fb:en.hawker_sea_hawk)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.032d2y fb:aviation.aircraft_model.designed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the hawker sea hawk", 
    "id": 144
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.fifth_amendment_to_the_united_states_constitution fb:law.constitutional_amendment.proposed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Madison"
    ], 
    "targetFormula": "(!fb:law.constitutional_amendment.proposed_by fb:en.fifth_amendment_to_the_united_states_constitution)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07sjg fb:law.constitutional_amendment.proposed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who proposed the fifth amendment", 
    "id": 145
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.uss_cobia fb:boats.ship.ship_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gato-class submarine"
    ], 
    "targetFormula": "(!fb:boats.ship.ship_class fb:en.uss_cobia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05wfjz fb:boats.ship.ship_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what ship class is the uss cobia", 
    "id": 146
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:business.company_brand_relationship.company fb:en.sara_lee . FILTER (?x2 != fb:en.sara_lee) . ?x2 fb:business.company_brand_relationship.brand ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:business.company_brand_relationship.brand ((lambda x (fb:business.company_brand_relationship.company (var x))) fb:en.sara_lee)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:business.company_brand_relationship.company fb:m.04pfks . FILTER (?x2 != fb:m.04pfks) . ?x2 fb:business.company_brand_relationship.brand ?x1 } } } LIMIT 9999", 
    "utterance": "how many brands does sara lee own", 
    "id": 147
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.employment_tenure.company fb:en.gap_inc . FILTER (?x1 != fb:en.gap_inc) . ?x1 fb:business.employment_tenure.title fb:en.president . FILTER (?x1 != fb:en.president) . ?x1 fb:business.employment_tenure.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Millard Drexler", 
      "Marka Hansen", 
      "Paul Pressler", 
      "Robert J. Fisher", 
      "Dawn Robertson"
    ], 
    "targetFormula": "(!fb:business.employment_tenure.person (and ((lambda x (fb:business.employment_tenure.company (var x))) fb:en.gap_inc) ((lambda x (fb:business.employment_tenure.title (var x))) fb:en.president)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.employment_tenure.company fb:m.01yfp7 . FILTER (?x1 != fb:m.01yfp7) . ?x1 fb:business.employment_tenure.title fb:m.060c4 . FILTER (?x1 != fb:m.060c4) . ?x1 fb:business.employment_tenure.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the president of gap, inc.", 
    "id": 148
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.uss_croaker fb:boats.ship.launched ?x1 } LIMIT 9999", 
    "result": [
      "1943-12-19"
    ], 
    "targetFormula": "(!fb:boats.ship.launched fb:en.uss_croaker)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0444f9 fb:boats.ship.launched ?x1 } LIMIT 9999", 
    "utterance": "when was the uss croaker launched", 
    "id": 149
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bengali_script fb:language.language_writing_system.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Arabic Language", 
      "Sanskrit Language", 
      "Sylheti Language", 
      "Bengali Language", 
      "Meitei Language", 
      "Assamese Language"
    ], 
    "targetFormula": "(!fb:language.language_writing_system.languages fb:en.bengali_script)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01xrpc fb:language.language_writing_system.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what languages use bengali script", 
    "id": 150
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.oracle_corporation fb:computer.software_developer.software ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Java", 
      "NetBeans", 
      "OpenGrok", 
      "Solaris Operating System", 
      "Oracle Media Objects", 
      "MySQL", 
      "Berkeley DB", 
      "OpenOffice.org", 
      "Network Security Services", 
      "OpenOffice Draw", 
      "Oracle iPlanet Web Server", 
      "BEA WebLogic", 
      "Oracle Application Server", 
      "GlassFish", 
      "JavaFX", 
      "Oracle Application Express", 
      "TopLink", 
      "dbx", 
      "Sun Java System Web Proxy Server", 
      "OpenOffice Impress", 
      "VirtualBox", 
      "Apache OpenOffice Writer", 
      "OpenOffice Calc", 
      "InnoDB", 
      "Oracle Database", 
      "OC4J", 
      "Hyperion Planning", 
      "OpenOffice Base", 
      "StarOffice", 
      "OpenSolaris", 
      "MySQL Cluster", 
      "MyISAM", 
      "MySQL Enterprise", 
      "Oracle Data Mining", 
      "Oracle Spatial and Graph", 
      "Oracle Database", 
      "MySQL Workbench", 
      "JBuilder", 
      "Apache OpenOffice Math"
    ], 
    "targetFormula": "(!fb:computer.software_developer.software fb:en.oracle_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05njw fb:computer.software_developer.software ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what software has oracle designed", 
    "id": 151
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.8_mile fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Drama", 
      "Coming of age", 
      "Musical Drama", 
      "Musical", 
      "Hip hop film"
    ], 
    "targetFormula": "(!fb:film.film.genre fb:en.8_mile)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.017d93 fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genres did 8 mile consist of", 
    "id": 152
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.north_america fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "24709000"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.north_america)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.059g4 fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is the area of north america", 
    "id": 153
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.psychology fb:education.field_of_study.journals_in_this_discipline ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Journal of Abnormal Child Psychology", 
      "The Journal of Psychology", 
      "American Imago", 
      "Cultic Studies Review", 
      "Children, Youth and Environments", 
      "Journal of Neuroscience, Psychology, and Economics", 
      "Professional Psychology: Research and Practice", 
      "American Psychologist", 
      "Philosophy, Psychiatry, & Psychology", 
      "American Journal of Psychology", 
      "Journal of Vision", 
      "Work & Stress", 
      "Radical Psychology", 
      "Multivariate Behavioral Research", 
      "Journal of Autism and Developmental Disorders", 
      "Review of Philosophy and Psychology", 
      "Psychoanalytic Psychology", 
      "Psychological Medicine", 
      "Psychological Bulletin", 
      "Journal of Abnormal Psychology", 
      "Psychological Review", 
      "Journal of Occupational Health Psychology", 
      "Psychology of Addictive Behaviors", 
      "Developmental Psychobiology", 
      "Journal of Occupational and Organizational Psychology", 
      "African Journal for the Psychological Study of Social Issues", 
      "Journal of Personnel Psychology", 
      "Psychophysiology"
    ], 
    "targetFormula": "(!fb:education.field_of_study.journals_in_this_discipline fb:en.psychology)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05qfh fb:education.field_of_study.journals_in_this_discipline ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some psychology journals", 
    "id": 154
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.peanuts fb:comic_strips.comic_strip.characters ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Little Red-Haired Girl", 
      "Linus van Pelt", 
      "Rerun van Pelt", 
      "Olaf", 
      "Lucy van Pelt", 
      "Sally Brown", 
      "Charlie Brown", 
      "Woodstock", 
      "Snoopy", 
      "Schroeder", 
      "Shermy", 
      "Violet Gray", 
      "Frieda", 
      "Pig-Pen", 
      "Patty", 
      "Peppermint Patty", 
      "The Great Pumpkin", 
      "Franklin", 
      "Peggy Jean", 
      "Charlotte Braun", 
      "Kite-Eating Tree", 
      "Marcie"
    ], 
    "targetFormula": "(!fb:comic_strips.comic_strip.characters fb:en.peanuts)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0blh2 fb:comic_strips.comic_strip.characters ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are the characters in peanuts", 
    "id": 155
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.025rs2z fb:chemistry.chemical_element.melting_point ?x1 } LIMIT 9999", 
    "result": [
      "1064.18"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.melting_point fb:m.025rs2z)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.025rs2z fb:chemistry.chemical_element.melting_point ?x1 } LIMIT 9999", 
    "utterance": "what is the melting point of gold", 
    "id": 156
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:chess.chess_game_participation.outcome fb:m.0454vkd . FILTER (?x1 != fb:m.0454vkd) . ?x1 fb:chess.chess_game_participation.game ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Immortal Zugzwang Game", 
      "Immortal Losing Game", 
      "Deep Blue versus Kasparov, 1997, Game 6", 
      "Poole versus HAL 9000", 
      "Kasparov versus the World", 
      "Lasker versus Bauer, Amsterdam, 1889", 
      "Evergreen Game", 
      "Immortal Game", 
      "Morphy versus the Duke of Brunswick and Count Isouard", 
      "The Game of the Century", 
      "Deep Blue versus Kasparov, 1996, Game 1", 
      "Polish Immortal", 
      "Peruvian Immortal"
    ], 
    "targetFormula": "(!fb:chess.chess_game_participation.game ((lambda x (fb:chess.chess_game_participation.outcome (var x))) fb:m.0454vkd))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:chess.chess_game_participation.outcome fb:m.0454vkd . FILTER (?x1 != fb:m.0454vkd) . ?x1 fb:chess.chess_game_participation.game ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what games has garry kasparov won", 
    "id": 157
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.hey_arnold fb:tv.tv_program.air_date_of_final_episode ?x1 } LIMIT 9999", 
    "result": [
      "2004-06-08"
    ], 
    "targetFormula": "(!fb:tv.tv_program.air_date_of_final_episode fb:en.hey_arnold)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01d98n fb:tv.tv_program.air_date_of_final_episode ?x1 } LIMIT 9999", 
    "utterance": "when did hey arnold! stop running", 
    "id": 158
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.gunpowder_tea fb:food.tea.tea_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Green tea"
    ], 
    "targetFormula": "(!fb:food.tea.tea_type fb:en.gunpowder_tea)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05q6nq fb:food.tea.tea_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of tea is gunpowder tea", 
    "id": 159
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_lee fb:martial_arts.martial_artist.martial_arts_students ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jesse Glover", 
      "Lee Marvin", 
      "Larry Hartsell"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_artist.martial_arts_students fb:en.bruce_lee)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.099d4 fb:martial_arts.martial_artist.martial_arts_students ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are the students of bruce lee", 
    "id": 160
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.doom fb:cvg.computer_videogame.gameplay_modes fb:en.multiplayer_game . FILTER (?x1 = fb:en.doom) . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Doom"
    ], 
    "targetFormula": "(and fb:en.doom (fb:cvg.computer_videogame.gameplay_modes fb:en.multiplayer_game))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02ckk fb:cvg.computer_videogame.gameplay_modes fb:m.01z747 . FILTER (?x1 = fb:m.02ckk) . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "does doom have a multiplayer mode", 
    "id": 161
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sikhism fb:religion.religion.practices ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Vegetarianism", 
      "The Five Ks", 
      "Kirat Karo", 
      "Naam Japo", 
      "Vand Chhako", 
      "Lacto vegetarianism", 
      "Langar", 
      "Kirtan", 
      "Charhdi Kala", 
      "Simran", 
      "Dasvand", 
      "Amrit Sanskar", 
      "Ard\u0101s", 
      "Three pillars of Sikhism"
    ], 
    "targetFormula": "(!fb:religion.religion.practices fb:en.sikhism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06yyp fb:religion.religion.practices ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the practices of sikhism", 
    "id": 162
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.claris fb:computer.software_developer.software ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "FileMaker", 
      "MacPaint", 
      "MacDraw", 
      "MacProject"
    ], 
    "targetFormula": "(!fb:computer.software_developer.software fb:en.claris)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01st38 fb:computer.software_developer.software ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what software has claris developed", 
    "id": 163
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.william_shakespeare fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Stratford-upon-Avon"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.william_shakespeare)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.081k8 fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was william shakespeare born", 
    "id": 164
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kjyrc7 fb:astronomy.star.temperature_k ?x1 } LIMIT 9999", 
    "result": [
      "7200"
    ], 
    "targetFormula": "(!fb:astronomy.star.temperature_k fb:m.0kjyrc7)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kjyrc7 fb:astronomy.star.temperature_k ?x1 } LIMIT 9999", 
    "utterance": "what is the temperature of polaris", 
    "id": 165
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.angelina_jolie fb:celebrities.celebrity.net_worth ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "120000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (!fb:celebrities.celebrity.net_worth fb:en.angelina_jolie))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0f4vbz fb:celebrities.celebrity.net_worth ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what is angelina jolie's net worth", 
    "id": 166
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.ritz_cracker . FILTER (?x1 != fb:en.ritz_cracker) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.ritz_cracker))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01kkd6 . FILTER (?x1 != fb:m.01kkd6) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when were ritz crackers introduced", 
    "id": 167
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:basketball.basketball_roster_position.player fb:en.lamarcus_aldridge . FILTER (?x1 != fb:en.lamarcus_aldridge) . ?x1 fb:basketball.basketball_roster_position.number ?x2 } LIMIT 9999", 
    "result": [
      "12"
    ], 
    "targetFormula": "(!fb:basketball.basketball_roster_position.number ((lambda x (fb:basketball.basketball_roster_position.player (var x))) fb:en.lamarcus_aldridge))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:basketball.basketball_roster_position.player fb:m.094hjr . FILTER (?x1 != fb:m.094hjr) . ?x1 fb:basketball.basketball_roster_position.number ?x2 } LIMIT 9999", 
    "utterance": "what is lamarcus aldridge's number", 
    "id": 168
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.australian_dollar fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "AUD"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.australian_dollar)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kz1h fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is the australian dollar code", 
    "id": 169
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.syphillis fb:medicine.infectious_disease.infectious_agent_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Pathogenic bacteria"
    ], 
    "targetFormula": "(!fb:medicine.infectious_disease.infectious_agent_type fb:en.syphillis)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.074m2 fb:medicine.infectious_disease.infectious_agent_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of infection is syphilis", 
    "id": 170
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06zh9s fb:media_common.quotation.spoken_by_character ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The Terminator"
    ], 
    "targetFormula": "(!fb:media_common.quotation.spoken_by_character fb:m.06zh9s)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06zh9s fb:media_common.quotation.spoken_by_character ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what character says \"i'll be back\"", 
    "id": 171
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.jerry_seinfeld fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1954-04-29"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.jerry_seinfeld)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0q5hw fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when is jerry seinfeld 's birthday", 
    "id": 172
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.robert_scoble fb:internet.blogger.blog ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Scobleizer", 
      "Scobleizer", 
      "scobleizer"
    ], 
    "targetFormula": "(!fb:internet.blogger.blog fb:en.robert_scoble)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04xmcj fb:internet.blogger.blog ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what blog does robert scoble write", 
    "id": 173
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:media_common.dedication.work_dedicated fb:en.invisible_man . FILTER (?x1 != fb:en.invisible_man) . ?x1 fb:media_common.dedication.dedicated_to ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Ida Millsap"
    ], 
    "targetFormula": "(!fb:media_common.dedication.dedicated_to ((lambda x (fb:media_common.dedication.work_dedicated (var x))) fb:en.invisible_man))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:media_common.dedication.work_dedicated fb:m.023cpd . FILTER (?x1 != fb:m.023cpd) . ?x1 fb:media_common.dedication.dedicated_to ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "to whom is invisible man dedicated", 
    "id": 174
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.ron_glass . FILTER (?x2 != fb:en.ron_glass) . ?x2 fb:tv.regular_tv_appearance.series ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.series ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.ron_glass)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.03h82p . FILTER (?x2 != fb:m.03h82p) . ?x2 fb:tv.regular_tv_appearance.series ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv shows was ron glass in", 
    "id": 175
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.cotton fb:fashion.fiber.textiles_made_from_this_fiber ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Voile", 
      "Crinoline", 
      "Denim", 
      "Moleskin"
    ], 
    "targetFormula": "(!fb:fashion.fiber.textiles_made_from_this_fiber fb:en.cotton)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.095zt fb:fashion.fiber.textiles_made_from_this_fiber ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what textiles are made from cotton", 
    "id": 176
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:fashion.designer_label_association.label fb:en.bill_blass_limited . FILTER (?x1 != fb:en.bill_blass_limited) . ?x1 fb:fashion.designer_label_association.designer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Michael Bastian", 
      "Bill Blass", 
      "Peter Som", 
      "Jose Solis"
    ], 
    "targetFormula": "(!fb:fashion.designer_label_association.designer ((lambda x (fb:fashion.designer_label_association.label (var x))) fb:en.bill_blass_limited))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:fashion.designer_label_association.label fb:m.02qkgwj . FILTER (?x1 != fb:m.02qkgwj) . ?x1 fb:fashion.designer_label_association.designer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who designs for bill blass limited", 
    "id": 177
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.charlies_angels fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2000-10-22"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01y9jr fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when did charlie_s angels come out", 
    "id": 178
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.judo fb:martial_arts.martial_art.well_known_practitioner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jason DeLucia", 
      "Yushin Okami", 
      "Danielli Yuri", 
      "G\u014dz\u014d Shioda", 
      "Morihei Ueshiba", 
      "Vladimir Putin", 
      "Steven Seagal", 
      "Koichi Tohei", 
      "Doug Williams", 
      "Fedor Emelianenko", 
      "Jigoro Kano", 
      "Demian Maia", 
      "Erik Paulson", 
      "Keiko Fukuda", 
      "Tsuyoshi Kohsaka", 
      "Oleg Taktarov", 
      "Kyung Sun Shin", 
      "Sokoudjou", 
      "H\u00e9lio Gracie", 
      "Chris Adams", 
      "Nam Phan", 
      "Ronda Rousey", 
      "Chang Kyun Yu", 
      "Paulo Thiago", 
      "Lee So-yeon", 
      "Carlos Gracie", 
      "Kristof Midoux", 
      "Yun Dukan", 
      "Roxanne Modafferi", 
      "Matthew Jago", 
      "William Durbin", 
      "Megumi Fujii", 
      "Hector Lombard"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_art.well_known_practitioner fb:en.judo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03_8r fb:martial_arts.martial_art.well_known_practitioner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are some practitioners of judo", 
    "id": 179
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.independence_hall fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Philadelphia"
    ], 
    "targetFormula": "(!fb:location.location.containedby fb:en.independence_hall)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01_yh5 fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is independence hall located", 
    "id": 180
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.golden_gate_bridge fb:transportation.bridge.total_length ?x1 } LIMIT 9999", 
    "result": [
      "2737"
    ], 
    "targetFormula": "(!fb:transportation.bridge.total_length fb:en.golden_gate_bridge)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.035p3 fb:transportation.bridge.total_length ?x1 } LIMIT 9999", 
    "utterance": "how long is the golden gate bridge", 
    "id": 181
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.kingda_ka fb:amusement_parks.ride.max_speed ?x1 } LIMIT 9999", 
    "result": [
      "206"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.max_speed fb:en.kingda_ka)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.040f6g fb:amusement_parks.ride.max_speed ?x1 } LIMIT 9999", 
    "utterance": "what is the max speed of kingda ka", 
    "id": 182
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01482f fb:food.cheese.texture ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Soft-ripened"
    ], 
    "targetFormula": "(!fb:food.cheese.texture fb:m.01482f)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01482f fb:food.cheese.texture ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the texture of brie cheese", 
    "id": 183
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.aspirin fb:medicine.medical_treatment.used_to_treat ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Fever", 
      "Gout", 
      "Stroke", 
      "Inflammation", 
      "Pain", 
      "Rheumatoid arthritis", 
      "Osteoarthritis", 
      "Rheumatic fever"
    ], 
    "targetFormula": "(!fb:medicine.medical_treatment.used_to_treat fb:en.aspirin)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0qkc fb:medicine.medical_treatment.used_to_treat ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what conditions does aspirin treat", 
    "id": 184
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.competitive_space_mediator.space fb:en.smartphone . FILTER (?x1 != fb:en.smartphone) . ?x1 fb:business.competitive_space_mediator.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Motorola", 
      "Nokia", 
      "Apple Inc.", 
      "BlackBerry Limited", 
      "Palm", 
      "Sony Mobile Communications"
    ], 
    "targetFormula": "(!fb:business.competitive_space_mediator.company ((lambda x (fb:business.competitive_space_mediator.space (var x))) fb:en.smartphone))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.competitive_space_mediator.space fb:m.0169zh . FILTER (?x1 != fb:m.0169zh) . ?x1 fb:business.competitive_space_mediator.company ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what companies produce smartphones", 
    "id": 185
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.sponsorship.sponsored_by fb:en.gatorade . FILTER (?x1 != fb:en.gatorade) . ?x1 fb:business.sponsorship.sponsored_recipient ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Coco Ho", 
      "Michael Jordan"
    ], 
    "targetFormula": "(!fb:business.sponsorship.sponsored_recipient ((lambda x (fb:business.sponsorship.sponsored_by (var x))) fb:en.gatorade))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:business.sponsorship.sponsored_by fb:m.01ghgx . FILTER (?x1 != fb:m.01ghgx) . ?x1 fb:business.sponsorship.sponsored_recipient ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are gatorade 's major sponsors", 
    "id": 186
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.art_deco fb:book.book_subject.works ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Art Deco New York", 
      "Streamline", 
      "The Art of Rockefeller Center", 
      "Art deco style", 
      "Art Deco, 1910-1939", 
      "French modern", 
      "Italian art deco", 
      "Deco type", 
      "Euro deco", 
      "Art deco furniture: the French designers"
    ], 
    "targetFormula": "(!fb:book.book_subject.works fb:en.art_deco)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0tyq fb:book.book_subject.works ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some books about art deco", 
    "id": 187
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.cpd_c00001_h2o fb:chemistry.chemical_compound.boiling_point ?x1 } LIMIT 9999", 
    "result": [
      "99.98"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_compound.boiling_point fb:en.cpd_c00001_h2o)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0838f fb:chemistry.chemical_compound.boiling_point ?x1 } LIMIT 9999", 
    "utterance": "what is the boiling point of water", 
    "id": 188
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.category fb:en.automobile . FILTER (?x2 != fb:en.automobile) . ?x2 fb:interests.collection.collector ?x1 } } } LIMIT 9999", 
    "result": [
      "20"
    ], 
    "targetFormula": "(count (!fb:interests.collection.collector ((lambda x (fb:interests.collection.category (var x))) fb:en.automobile)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.category fb:m.0k4j . FILTER (?x2 != fb:m.0k4j) . ?x2 fb:interests.collection.collector ?x1 } } } LIMIT 9999", 
    "utterance": "how many people collect automobiles", 
    "id": 189
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03d5yt5 fb:broadcast.content.location ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atlanta metropolitan area"
    ], 
    "targetFormula": "(!fb:broadcast.content.location fb:m.03d5yt5)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03d5yt5 fb:broadcast.content.location ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is between the lines produced", 
    "id": 190
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.craig_adams_1977 fb:ice_hockey.hockey_player.hockey_position ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Right wing"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_player.hockey_position fb:en.craig_adams_1977)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01z39d fb:ice_hockey.hockey_player.hockey_position ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what position does craig adams play", 
    "id": 191
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02knmd5 fb:music.composition.composer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jerry Garcia"
    ], 
    "targetFormula": "(!fb:music.composition.composer fb:m.02knmd5)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02knmd5 fb:music.composition.composer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who composed the song ship of fools", 
    "id": 192
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.toronto_maple_leafs fb:ice_hockey.hockey_team.coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Randy Carlyle"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_team.coach fb:en.toronto_maple_leafs)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0j6tr fb:ice_hockey.hockey_team.coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who coaches the toronto maple leafs", 
    "id": 193
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.gato_class_submarine fb:boats.ship_class.ships_in_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "USS Bluefish", 
      "USS Cobia", 
      "USS Wahoo", 
      "USS Gabilan", 
      "USS Cavalla", 
      "USS Dorado (SS-248)", 
      "USS Albacore", 
      "USS Greenling", 
      "USS Dace", 
      "USS Flounder", 
      "USS Growler", 
      "USS Corvina", 
      "USS Drum (SS-228)", 
      "USS Tullibee (SS-284)", 
      "USS Croaker", 
      "USS Silversides", 
      "USS Pargo (SS-264)", 
      "USS Paddle (SS-263)", 
      "USS Cod", 
      "USS Muskallunge", 
      "USS Ray", 
      "USS Guavina", 
      "USS Pompon", 
      "USS Steelhead (SS-280)", 
      "USS Snook (SS-279)", 
      "USS Lapon", 
      "USS Sawfish (SS-276)", 
      "USS Guardfish", 
      "USS Blackfish", 
      "USS Flying Fish", 
      "USS Bashaw", 
      "USS Tinosa (SS-283)", 
      "USS Halibut", 
      "USS Raton", 
      "USS Angler", 
      "USS Herring", 
      "USS Haddock", 
      "USS Kingfish", 
      "USS Harder", 
      "USS Trigger", 
      "USS Gurnard (SSN-662)", 
      "USS Bream", 
      "USS Whale", 
      "USS Rock", 
      "USS Shad", 
      "USS Rasher", 
      "USS Amberjack", 
      "USS Redfin", 
      "USS Scorpion (SS-278)", 
      "USS Golet (SS-361)", 
      "USS Gunnel", 
      "USS Runner (SS-275)", 
      "USS Peto (SS-265)", 
      "USS Sunfish (SSN-649)", 
      "USS Haddo", 
      "USS Hoe", 
      "USS Gato (SS-212)", 
      "USS Jack", 
      "USS Mingo", 
      "USS Grouper", 
      "USS Flasher (SS-249)", 
      "USS Sunfish (SS-281)", 
      "USS Bonefish", 
      "USS Scamp (SS-277)", 
      "USS Flier", 
      "USS Hake", 
      "USS Barb", 
      "USS Grunion", 
      "USS Darter (SS-227)", 
      "USS Bluegill", 
      "USS Gurnard", 
      "USS Pogy (SS-266)", 
      "USS Hammerhead (SS-364)", 
      "USS Cero", 
      "USS Robalo (SS-273)", 
      "USS Tunny", 
      "USS Guitarro (SS-363)", 
      "USS Finback", 
      "USS Puffer (SS-268)", 
      "USS Pargo (SSN-650)", 
      "USS Puffer (SSN-652)"
    ], 
    "targetFormula": "(!fb:boats.ship_class.ships_in_class fb:en.gato_class_submarine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.016w97 fb:boats.ship_class.ships_in_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some gato class submarines", 
    "id": 194
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.us fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "USD"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.us)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.09nqf fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is the usa money currency code", 
    "id": 195
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.united_nations fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1945-10-24"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.united_nations)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07t65 fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was the united nations founded", 
    "id": 196
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0glzm0h fb:rail.locomotive.locomotive_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Victorian Railways H class"
    ], 
    "targetFormula": "(!fb:rail.locomotive.locomotive_class fb:m.0glzm0h)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0glzm0h fb:rail.locomotive.locomotive_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what class of train was heavy harry", 
    "id": 197
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.borders_group fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:business.employment_tenure.person (!fb:business.employer.employees fb:en.borders_group)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.0mdv8 fb:business.employer.employees ?x2 . ?x2 fb:business.employment_tenure.person ?x1 } } } LIMIT 9999", 
    "utterance": "how many people does borders employ", 
    "id": 198
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tamora_pierce fb:book.author.series_written_or_contributed_to ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Provost's Dog", 
      "Wild Magic/The Immortals", 
      "Daughter of the Lioness", 
      "The Song of the Lioness", 
      "The Circle Opens", 
      "Circle of Magic (Tamora Pierce)", 
      "Circle of Magic Universe", 
      "Protector of the Small", 
      "The Circle Opens Quartet", 
      "Protector of the Small", 
      "Beka Cooper/Provost's Dog", 
      "Circle Of Magic Quartet"
    ], 
    "targetFormula": "(!fb:book.author.series_written_or_contributed_to fb:en.tamora_pierce)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gm5z fb:book.author.series_written_or_contributed_to ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what series did tamora pierce write", 
    "id": 199
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02qvdc fb:ice_hockey.hockey_position.players ?x1 } } } LIMIT 9999", 
    "result": [
      "1367"
    ], 
    "targetFormula": "(count (!fb:ice_hockey.hockey_position.players fb:m.02qvdc))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02qvdc fb:ice_hockey.hockey_position.players ?x1 } } } LIMIT 9999", 
    "utterance": "how many hockey players play center", 
    "id": 200
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ron_glass fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Evansville"
    ], 
    "targetFormula": "(!fb:people.person.place_of_birth fb:en.ron_glass)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03h82p fb:people.person.place_of_birth ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is ron glass 's place of birth", 
    "id": 201
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:media_common.completion_of_unfinished_work.finisher fb:en.anthony_payne . FILTER (?x1 != fb:en.anthony_payne) . ?x1 fb:media_common.completion_of_unfinished_work.unfinished_work ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Symphony No. 3"
    ], 
    "targetFormula": "(!fb:media_common.completion_of_unfinished_work.unfinished_work ((lambda x (fb:media_common.completion_of_unfinished_work.finisher (var x))) fb:en.anthony_payne))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:media_common.completion_of_unfinished_work.finisher fb:m.0cvnsb . FILTER (?x1 != fb:m.0cvnsb) . ?x1 fb:media_common.completion_of_unfinished_work.unfinished_work ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what works did anthony payne finish", 
    "id": 202
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.tokyu_tamagawa_line fb:rail.railway.length ?x1 } LIMIT 9999", 
    "result": [
      "5.6"
    ], 
    "targetFormula": "(!fb:rail.railway.length fb:en.tokyu_tamagawa_line)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05xk19 fb:rail.railway.length ?x1 } LIMIT 9999", 
    "utterance": "how long is the tokyu tamagawa line", 
    "id": 203
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:exhibitions.exhibition_run.exhibition fb:en.armory_show . FILTER (?x1 != fb:en.armory_show) . ?x1 fb:exhibitions.exhibition_run.venue ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Art Institute of Chicago Building", 
      "69th Regiment Armory", 
      "Copley Society of Art"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibition_run.venue ((lambda x (fb:exhibitions.exhibition_run.exhibition (var x))) fb:en.armory_show))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:exhibitions.exhibition_run.exhibition fb:m.01_ggr . FILTER (?x1 != fb:m.01_ggr) . ?x1 fb:exhibitions.exhibition_run.venue ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "where was the armory show exhibited", 
    "id": 204
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tungsten fb:chemistry.chemical_element.chemical_series ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Transition metal"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.chemical_series fb:en.tungsten)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.025sk79 fb:chemistry.chemical_element.chemical_series ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what chemical series is tungsten in", 
    "id": 205
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.apple_ii fb:computer.computer.processor ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "MOS Technology 6502"
    ], 
    "targetFormula": "(!fb:computer.computer.processor fb:en.apple_ii)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0wxp fb:computer.computer.processor ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what processor did the apple ii use", 
    "id": 206
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.fa_cup_final_1973 fb:soccer.football_match.teams ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sunderland A.F.C.", 
      "Leeds United A.F.C."
    ], 
    "targetFormula": "(!fb:soccer.football_match.teams fb:en.fa_cup_final_1973)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d4bd_ fb:soccer.football_match.teams ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who played in the 1973 fa cup final", 
    "id": 207
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bmw fb:automotive.company.manufacturing_plants ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cowley Car Factory"
    ], 
    "targetFormula": "(!fb:automotive.company.manufacturing_plants fb:en.bmw)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.017yh fb:automotive.company.manufacturing_plants ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are bmw's manufacturing plants", 
    "id": 208
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.oreo . FILTER (?x1 != fb:en.oreo) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.oreo))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01k18d . FILTER (?x1 != fb:m.01k18d) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was the oreo cookie introduced", 
    "id": 209
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.alta_ski_area fb:skiing.ski_area.lodges ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Rustler Lodge", 
      "Goldminer's Daughter Lodge", 
      "Alta Lodge", 
      "Alta Peruvian Lodge", 
      "Alf's Restaurant", 
      "Watson Shelter", 
      "Albion Day Lodge", 
      "Snowpine Lodge"
    ], 
    "targetFormula": "(!fb:skiing.ski_area.lodges fb:en.alta_ski_area)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03pdkw fb:skiing.ski_area.lodges ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what lodges are in the alta ski area", 
    "id": 210
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.performance.character fb:m.0clpml . FILTER (?x1 != fb:m.0clpml) . ?x1 fb:film.performance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Barry Nelson", 
      "Bob Simmons", 
      "Pierce Brosnan", 
      "Roger Moore", 
      "Timothy Dalton", 
      "Daniel Craig", 
      "Sean Connery", 
      "George Lazenby", 
      "David Niven"
    ], 
    "targetFormula": "(!fb:film.performance.actor ((lambda x (fb:film.performance.character (var x))) fb:m.0clpml))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.performance.character fb:m.0clpml . FILTER (?x1 != fb:m.0clpml) . ?x1 fb:film.performance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who has portrayed james bond in film", 
    "id": 211
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0280hsm fb:tv.tv_program.episode_running_time ?x1 } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(!fb:tv.tv_program.episode_running_time fb:m.0280hsm)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0280hsm fb:tv.tv_program.episode_running_time ?x1 } LIMIT 9999", 
    "utterance": "how long are adventure time episodes", 
    "id": 212
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.footwear fb:fashion.garment.more_specialized_forms ?x1 } } } LIMIT 9999", 
    "result": [
      "12"
    ], 
    "targetFormula": "(count (!fb:fashion.garment.more_specialized_forms fb:en.footwear))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.09j5n fb:fashion.garment.more_specialized_forms ?x1 } } } LIMIT 9999", 
    "utterance": "how many kinds of footwear are there", 
    "id": 213
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:ice_hockey.hockey_roster_position.player fb:en.fedor_tyutin . FILTER (?x1 != fb:en.fedor_tyutin) . ?x1 fb:ice_hockey.hockey_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Columbus Blue Jackets"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_roster_position.team ((lambda x (fb:ice_hockey.hockey_roster_position.player (var x))) fb:en.fedor_tyutin))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:ice_hockey.hockey_roster_position.player fb:m.09v904 . FILTER (?x1 != fb:m.09v904) . ?x1 fb:ice_hockey.hockey_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "for what team does fedor tyutin play", 
    "id": 214
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sarah_jessica_parker fb:interests.hobbyist.hobbies ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Knitting"
    ], 
    "targetFormula": "(!fb:interests.hobbyist.hobbies fb:en.sarah_jessica_parker)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0m66w fb:interests.hobbyist.hobbies ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is sarah jessica parker's hobby", 
    "id": 215
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ferdinand_ii_holy_roman_emperor fb:people.person.parents ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Charles II, Archduke of Austria", 
      "Maria Anna of Bavaria"
    ], 
    "targetFormula": "(!fb:people.person.parents fb:en.ferdinand_ii_holy_roman_emperor)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.013lkn fb:people.person.parents ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who were the parents of ferdinand ii", 
    "id": 216
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.u_army fb:military.armed_force.units ?x1 } } } LIMIT 9999", 
    "result": [
      "44"
    ], 
    "targetFormula": "(count (!fb:military.armed_force.units fb:en.u_army))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07wh1 fb:military.armed_force.units ?x1 } } } LIMIT 9999", 
    "utterance": "how many units does the us army have", 
    "id": 217
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.antilles fb:geography.island_group.islands_in_group ?x1 } } } LIMIT 9999", 
    "result": [
      "133"
    ], 
    "targetFormula": "(count (!fb:geography.island_group.islands_in_group fb:en.antilles))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01l3lx fb:geography.island_group.islands_in_group ?x1 } } } LIMIT 9999", 
    "utterance": "how many islands are in the antilles", 
    "id": 218
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.google fb:conferences.conference_sponsor.conferences ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "FOSDEM", 
      "O'Reilly Open Source Convention", 
      "Google I/O", 
      "PyCon", 
      "GOTO", 
      "OSCON 2012"
    ], 
    "targetFormula": "(!fb:conferences.conference_sponsor.conferences fb:en.google)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.045c7b fb:conferences.conference_sponsor.conferences ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what conferences does google sponsor", 
    "id": 219
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.j_c_penney fb:business.business_operation.operating_income ?x1 . FILTER (?x1 != fb:en.j_c_penney) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "2277000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:business.business_operation.operating_income (var x))) fb:en.j_c_penney))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.026h1w fb:business.business_operation.operating_income ?x1 . FILTER (?x1 != fb:m.026h1w) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what is jcpenney 's operating income", 
    "id": 220
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.rolls-royce_welland fb:engineering.engine.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Frank Whittle"
    ], 
    "targetFormula": "(!fb:engineering.engine.designer fb:en.rolls-royce_welland)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05cq_9 fb:engineering.engine.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the rolls-royce welland", 
    "id": 221
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:rail.railway_operator_relationship.railway fb:m.04rsv0 . FILTER (?x1 != fb:m.04rsv0) . ?x1 fb:rail.railway_operator_relationship.operator ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Amtrak"
    ], 
    "targetFormula": "(!fb:rail.railway_operator_relationship.operator ((lambda x (fb:rail.railway_operator_relationship.railway (var x))) fb:m.04rsv0))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:rail.railway_operator_relationship.railway fb:m.04rsv0 . FILTER (?x1 != fb:m.04rsv0) . ?x1 fb:rail.railway_operator_relationship.operator ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who operates the silver star railway", 
    "id": 222
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.uss_constitution fb:boats.ship.place_built ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Boston Navy Yard"
    ], 
    "targetFormula": "(!fb:boats.ship.place_built fb:en.uss_constitution)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07y14 fb:boats.ship.place_built ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was the uss constitution built", 
    "id": 223
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award_winner fb:en.danny_devito . FILTER (?x2 != fb:en.danny_devito) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.danny_devito)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award_winner fb:m.0q9kd . FILTER (?x2 != fb:m.0q9kd) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many awards did danny devito win", 
    "id": 224
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:base.famouspets.pet_ownership.owner fb:en.john_f_kennedy . FILTER (?x2 != fb:en.john_f_kennedy) . ?x2 fb:base.famouspets.pet_ownership.pet ?x1 } } } LIMIT 9999", 
    "result": [
      "21"
    ], 
    "targetFormula": "(count (!fb:base.famouspets.pet_ownership.pet ((lambda x (fb:base.famouspets.pet_ownership.owner (var x))) fb:en.john_f_kennedy)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:base.famouspets.pet_ownership.owner fb:m.0d3k14 . FILTER (?x2 != fb:m.0d3k14) . ?x2 fb:base.famouspets.pet_ownership.pet ?x1 } } } LIMIT 9999", 
    "utterance": "how many pets did john f kennedy own", 
    "id": 225
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:event.speech_or_presentation.presented_work fb:en.gettysburg_address . FILTER (?x1 != fb:en.gettysburg_address) . ?x1 fb:event.speech_or_presentation.speaker_s ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Abraham Lincoln"
    ], 
    "targetFormula": "(!fb:event.speech_or_presentation.speaker_s ((lambda x (fb:event.speech_or_presentation.presented_work (var x))) fb:en.gettysburg_address))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:event.speech_or_presentation.presented_work fb:m.037yx . FILTER (?x1 != fb:m.037yx) . ?x1 fb:event.speech_or_presentation.speaker_s ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who presented the gettysburg address", 
    "id": 226
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.apple_i fb:computer.computer.discontinued ?x1 } LIMIT 9999", 
    "result": [
      "1977-10"
    ], 
    "targetFormula": "(!fb:computer.computer.discontinued fb:en.apple_i)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0n_v fb:computer.computer.discontinued ?x1 } LIMIT 9999", 
    "utterance": "when did the apple i stop being sold", 
    "id": 227
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.philadelphia_phillies fb:sports.sports_team.arena_stadium ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Citizens Bank Park"
    ], 
    "targetFormula": "(!fb:sports.sports_team.arena_stadium fb:en.philadelphia_phillies)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05xvj fb:sports.sports_team.arena_stadium ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what stadium do the phillies play in", 
    "id": 228
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.karl_marx fb:influence.influence_node.influenced_by ?x1 } } } LIMIT 9999", 
    "result": [
      "31"
    ], 
    "targetFormula": "(count (!fb:influence.influence_node.influenced_by fb:en.karl_marx))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.048cl fb:influence.influence_node.influenced_by ?x1 } } } LIMIT 9999", 
    "utterance": "how many people influenced karl marx", 
    "id": 229
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.manhattan_project fb:projects.project.project_focus ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atomic bombings of Hiroshima and Nagasaki", 
      "Nuclear weapon"
    ], 
    "targetFormula": "(!fb:projects.project.project_focus fb:en.manhattan_project)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04yp5 fb:projects.project.project_focus ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the manhattan project about", 
    "id": 230
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.dravidian_languages fb:language.language_family.geographic_distribution ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "India", 
      "Indian subcontinent"
    ], 
    "targetFormula": "(!fb:language.language_family.geographic_distribution fb:en.dravidian_languages)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.026kj fb:language.language_family.geographic_distribution ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where are dravidian languages spoken", 
    "id": 231
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.glutamine fb:biology.amino_acid.codons ?x1 } LIMIT 9999", 
    "result": [
      "CAA", 
      "CAG"
    ], 
    "targetFormula": "(!fb:biology.amino_acid.codons fb:en.glutamine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0h1xy fb:biology.amino_acid.codons ?x1 } LIMIT 9999", 
    "utterance": "what are the dna codons of glutamine", 
    "id": 232
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.silicon fb:chemistry.chemical_element.atomic_number ?x1 } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_element.atomic_number fb:en.silicon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.025sf80 fb:chemistry.chemical_element.atomic_number ?x1 } LIMIT 9999", 
    "utterance": "what is the atomic number of silicon", 
    "id": 233
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sunni_islam fb:religion.religion.sacred_sites ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jerusalem", 
      "Medina", 
      "Mecca"
    ], 
    "targetFormula": "(!fb:religion.religion.sacred_sites fb:en.sunni_islam)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.078tg fb:religion.religion.sacred_sites ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are sacred sites in sunni islam", 
    "id": 234
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:food.beer fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:freebase.type_profile.instance_count fb:food.beer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:food.beer fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "utterance": "how many beers are there on freebase", 
    "id": 235
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.014v3t fb:tv.tv_program.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "English Language", 
      "Standard Mandarin"
    ], 
    "targetFormula": "(!fb:tv.tv_program.languages fb:m.014v3t)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.014v3t fb:tv.tv_program.languages ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what languages are spoken in firefly", 
    "id": 236
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01vvf fb:cvg.computer_videogame.release_date ?x1 } LIMIT 9999", 
    "result": [
      "1991"
    ], 
    "targetFormula": "(!fb:cvg.computer_videogame.release_date fb:m.01vvf)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01vvf fb:cvg.computer_videogame.release_date ?x1 } LIMIT 9999", 
    "utterance": "when was civilization first released", 
    "id": 237
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05v47f_ fb:radio.radio_program.first_broadcast ?x1 } LIMIT 9999", 
    "result": [
      "1988"
    ], 
    "targetFormula": "(!fb:radio.radio_program.first_broadcast fb:m.05v47f_)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05v47f_ fb:radio.radio_program.first_broadcast ?x1 } LIMIT 9999", 
    "utterance": "when was kid_s corner first broadcast", 
    "id": 238
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.microsoft_corporation fb:computer.programming_language_designer.languages_designed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "C#", 
      "QuickBASIC", 
      "QBasic", 
      "Visual Basic .NET", 
      "J#", 
      "Visual Basic", 
      "Microsoft BASIC", 
      "Abstract State Machine Language", 
      "Applesoft BASIC"
    ], 
    "targetFormula": "(!fb:computer.programming_language_designer.languages_designed fb:en.microsoft_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04sv4 fb:computer.programming_language_designer.languages_designed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what languages has microsoft designed", 
    "id": 239
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.2003_cricket_world_cup fb:cricket.cricket_tournament_event.host ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "South Africa", 
      "Zimbabwe", 
      "Kenya"
    ], 
    "targetFormula": "(!fb:cricket.cricket_tournament_event.host fb:en.2003_cricket_world_cup)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.015blr fb:cricket.cricket_tournament_event.host ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who hosted the 2003 cricket world cup", 
    "id": 240
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.gruta_das_torres fb:geology.geological_formation.type_of_rock ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Basalt"
    ], 
    "targetFormula": "(!fb:geology.geological_formation.type_of_rock fb:en.gruta_das_torres)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04112qf fb:geology.geological_formation.type_of_rock ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what rock is gruta das torres made of", 
    "id": 241
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.the_band fb:music.artist.track ?x1 } } } LIMIT 9999", 
    "result": [
      "741"
    ], 
    "targetFormula": "(count (!fb:music.artist.track fb:en.the_band))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07m4c fb:music.artist.track ?x1 } } } LIMIT 9999", 
    "utterance": "how many tracks has the band recorded", 
    "id": 242
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.morphine fb:medicine.medical_treatment.side_effects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Dizziness", 
      "Headache", 
      "Pruritus", 
      "Constipation"
    ], 
    "targetFormula": "(!fb:medicine.medical_treatment.side_effects fb:en.morphine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.055pr fb:medicine.medical_treatment.side_effects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the side effects of morphine", 
    "id": 243
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_almighty fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John Debney"
    ], 
    "targetFormula": "(!fb:film.film.music fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jft4 fb:film.film.music ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the music by in bruce almighty", 
    "id": 244
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.martin_luther fb:religion.founding_figure.religion_founded ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lutheranism", 
      "Protestantism"
    ], 
    "targetFormula": "(!fb:religion.founding_figure.religion_founded fb:en.martin_luther)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04yd_ fb:religion.founding_figure.religion_founded ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what religion did martin luther found", 
    "id": 245
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.princetown_railway fb:rail.railway.closed ?x1 } LIMIT 9999", 
    "result": [
      "1956-03-03"
    ], 
    "targetFormula": "(!fb:rail.railway.closed fb:en.princetown_railway)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.09v5s9x fb:rail.railway.closed ?x1 } LIMIT 9999", 
    "utterance": "when did the princetown railway close", 
    "id": 246
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07sbkfb fb:computer.programming_language.developers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Martin Odersky"
    ], 
    "targetFormula": "(!fb:computer.programming_language.developers fb:m.07sbkfb)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07sbkfb fb:computer.programming_language.developers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the developer of java language", 
    "id": 247
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.road_bicycle fb:bicycles.bicycle_type.bicycle_models_of_this_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Avanti Cadent 3.0 2009", 
      "Avanti Giro 2009", 
      "Panasonic DX3000", 
      "Avanti Cadent 1.0 2009", 
      "Avanti Cadent 2.0 2009", 
      "Avanti Cadent Team 2009", 
      "Avanti Corsa 2009", 
      "Avanti Monza", 
      "Avanti Prima", 
      "Avanti Quantum 1.0", 
      "Avanti Quantum 2.0 2009", 
      "Avanti Quantum 3.0", 
      "Avanti Quantum Team 2009", 
      "Avanti Sprint 2009", 
      "Giant CRX Four 2008", 
      "Giant CRX Four 2007", 
      "Giant CRX Four 2009"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_type.bicycle_models_of_this_type fb:en.road_bicycle)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09rgp fb:bicycles.bicycle_type.bicycle_models_of_this_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some examples of a road bike", 
    "id": 248
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:en.sesame_street . FILTER (?x2 != fb:en.sesame_street) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "149"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.sesame_street)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.honored_for fb:m.0cwrr . FILTER (?x2 != fb:m.0cwrr) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many awards did sesame street win", 
    "id": 249
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.first_amendment_to_the_united_states_constitution fb:law.constitutional_amendment.ratification_completed_on ?x1 } LIMIT 9999", 
    "result": [
      "1791-12-15"
    ], 
    "targetFormula": "(!fb:law.constitutional_amendment.ratification_completed_on fb:en.first_amendment_to_the_united_states_constitution)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07sgz fb:law.constitutional_amendment.ratification_completed_on ?x1 } LIMIT 9999", 
    "utterance": "when was the first amendment ratified", 
    "id": 250
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.agnosticism fb:religion.religion.notable_figures ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Bertrand Russell", 
      "Robert G. Ingersoll"
    ], 
    "targetFormula": "(!fb:religion.religion.notable_figures fb:en.agnosticism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0kq2 fb:religion.religion.notable_figures ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are some notable agnostic figures", 
    "id": 251
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:medicine.disease.symptoms fb:en.fatigue . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Stomach cancer", 
      "Diabetes mellitus", 
      "Multiple sclerosis", 
      "Pneumonia", 
      "Parkinson's disease", 
      "Myocardial infarction", 
      "Primary aldosteronism", 
      "Leukemia", 
      "AIDS", 
      "Anxiety disorder", 
      "Hypoparathyroidism", 
      "Prediabetes", 
      "Thyroiditis", 
      "Tertiary hyperparathyroidism", 
      "Diabetes insipidus", 
      "Polymyalgia rheumatica", 
      "Hodgkin's lymphoma", 
      "Alcoholic hepatitis", 
      "Vitamin B12 deficiency anemia", 
      "Syphilis", 
      "Hepatitis E", 
      "Food poisoning", 
      "Salmonellosis", 
      "Heart valve disease", 
      "Carbuncle", 
      "Myocarditis", 
      "Endocarditis", 
      "Pericarditis", 
      "Hyperparathyroidism", 
      "Systemic lupus erythematosus", 
      "Inflammatory heart disease", 
      "Primary hyperparathyroidism", 
      "Meningitis", 
      "Hypothyroidism", 
      "Colorectal cancer", 
      "Cardiovascular disease", 
      "Lung cancer", 
      "Rhinitis", 
      "Liver failure", 
      "Hyperthyroidism", 
      "Dermatomyositis", 
      "Renal failure", 
      "Chronic myelogenous leukemia", 
      "HIV", 
      "Tuberculosis", 
      "Dehydration", 
      "Hepatitis A", 
      "Pre-eclampsia", 
      "Kidney cancer", 
      "Gestational diabetes", 
      "Hepatitis", 
      "Jaundice", 
      "Type 1 diabetes", 
      "Cardiomyopathy", 
      "Chronic fatigue syndrome", 
      "Hepatitis C", 
      "West Nile fever", 
      "Duchenne muscular dystrophy", 
      "Pityriasis rosea", 
      "Morgellons", 
      "Obesity", 
      "Seasonal affective disorder", 
      "Typhoid fever", 
      "Atrial septal defect", 
      "Chronic renal failure", 
      "Bipolar disorder", 
      "Acute myeloid leukemia", 
      "Cirrhosis", 
      "Obstructive sleep apnea", 
      "Acromegaly", 
      "Jet lag", 
      "Pulmonary valve stenosis", 
      "Abdominal aortic aneurysm", 
      "Pelvic inflammatory disease", 
      "Sickle cell disease", 
      "Iron deficiency anemia", 
      "Folic Acid Deficiency Anemia", 
      "Anemia", 
      "Sinusitis", 
      "Astigmatism", 
      "Anorexia nervosa", 
      "Pectus excavatum", 
      "Glomerulonephritis", 
      "Ovarian cancer", 
      "Liver tumour", 
      "B-cell chronic lymphocytic leukemia", 
      "Non-Hodgkin lymphoma", 
      "Peptic ulcer", 
      "Type 2 diabetes", 
      "Ankylosing spondylitis", 
      "Kyphosis", 
      "Cushing's syndrome", 
      "Crohn's disease", 
      "Celiac disease", 
      "Scleroderma", 
      "Lupus erythematosus", 
      "Cyclosporiasis", 
      "Graves' disease", 
      "Hepatitis B", 
      "Aplastic anemia", 
      "Amoebiasis", 
      "Hepatitis D", 
      "Gastric dumping syndrome", 
      "Pyoderma gangrenosum", 
      "Arthritis", 
      "Pyelonephritis", 
      "Pharyngitis", 
      "Viral meningitis", 
      "Premenstrual syndrome", 
      "Multiple myeloma", 
      "Generalized anxiety disorder", 
      "Rheumatic Heart Disease", 
      "Meningeal Tuberculosis", 
      "Hashimoto's thyroiditis", 
      "Ebstein's anomaly", 
      "Sunburn", 
      "Chronic bronchitis", 
      "Colorectal polyp", 
      "Angina Pectoris", 
      "Common cold", 
      "Scoliosis", 
      "Major depression", 
      "Atrial fibrillation", 
      "Bulimia nervosa", 
      "Acute lymphoblastic leukemia", 
      "Iron overload", 
      "Sarcoma", 
      "Dilated cardiomyopathy"
    ], 
    "targetFormula": "(fb:medicine.disease.symptoms fb:en.fatigue)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:medicine.disease.symptoms fb:m.01j6t0 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what diseases is fatigue a symptom of", 
    "id": 252
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.us_interstate_5 fb:transportation.road.major_cities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Portland", 
      "Los Angeles", 
      "Sacramento", 
      "Redding", 
      "San Diego", 
      "Seattle"
    ], 
    "targetFormula": "(!fb:transportation.road.major_cities fb:en.us_interstate_5)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0kd_x fb:transportation.road.major_cities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what cities does us interstate 5 pass", 
    "id": 253
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.columbia_university fb:education.educational_institution.colors ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "White", 
      "Columbia blue"
    ], 
    "targetFormula": "(!fb:education.educational_institution.colors fb:en.columbia_university)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01w5m fb:education.educational_institution.colors ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are columbia university's colors", 
    "id": 254
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.keyon_dooling fb:basketball.basketball_player.position_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Shooting guard", 
      "Point guard"
    ], 
    "targetFormula": "(!fb:basketball.basketball_player.position_s fb:en.keyon_dooling)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07f3by fb:basketball.basketball_player.position_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what position does keyon dooling play", 
    "id": 255
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.beyond_robson fb:internet.blog.blogger ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:internet.blog.blogger fb:en.beyond_robson))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.04_65ty fb:internet.blog.blogger ?x1 } } } LIMIT 9999", 
    "utterance": "how many people blog on beyond robson", 
    "id": 256
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.big_daddy fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "1999-06-25"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.big_daddy)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02hxhz fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was the movie big daddy released", 
    "id": 257
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.batman_477 fb:book.magazine_issue.cover_artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Taggart"
    ], 
    "targetFormula": "(!fb:book.magazine_issue.cover_artist fb:en.batman_477)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03dfh34 fb:book.magazine_issue.cover_artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who did the cover art for batman #477", 
    "id": 258
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:chess.chess_game_participation.game fb:en.the_game_of_the_century . FILTER (?x1 != fb:en.the_game_of_the_century) . ?x1 fb:chess.chess_game_participation.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Bobby Fischer", 
      "Donald Byrne"
    ], 
    "targetFormula": "(!fb:chess.chess_game_participation.player ((lambda x (fb:chess.chess_game_participation.game (var x))) fb:en.the_game_of_the_century))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:chess.chess_game_participation.game fb:m.01j1v2 . FILTER (?x1 != fb:m.01j1v2) . ?x1 fb:chess.chess_game_participation.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who played in the game of the century", 
    "id": 259
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.jonathan_miller fb:opera.opera_director.operas_directed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "La boh\u00e8me"
    ], 
    "targetFormula": "(!fb:opera.opera_director.operas_directed fb:en.jonathan_miller)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01m_c6 fb:opera.opera_director.operas_directed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what opera did jonathan miller direct", 
    "id": 260
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.mattel fb:business.consumer_company.products ?x2 . ?x2 fb:business.company_product_relationship.consumer_product ?x1 } } } LIMIT 9999", 
    "result": [
      "1051"
    ], 
    "targetFormula": "(count (!fb:business.company_product_relationship.consumer_product (!fb:business.consumer_company.products fb:en.mattel)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.055z7 fb:business.consumer_company.products ?x2 . ?x2 fb:business.company_product_relationship.consumer_product ?x1 } } } LIMIT 9999", 
    "utterance": "how many products has mattel produced", 
    "id": 261
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.heart_failure fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atherosclerosis", 
      "Embolism", 
      "Cocaine", 
      "Aneurysm", 
      "Amphetamine", 
      "Aortic dissection", 
      "Ventricular hypertrophy"
    ], 
    "targetFormula": "(!fb:medicine.disease.causes fb:en.heart_failure)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gk4g fb:medicine.disease.causes ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the causes of a heart attack", 
    "id": 262
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.13_going_on_30 fb:film.film.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Time travel", 
      "Body swap"
    ], 
    "targetFormula": "(!fb:film.film.subjects fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vzpb fb:film.film.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the subject of 13 going on 30", 
    "id": 263
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.arabic_language fb:language.human_language.dialects ?x1 } } } LIMIT 9999", 
    "result": [
      "18"
    ], 
    "targetFormula": "(count (!fb:language.human_language.dialects fb:en.arabic_language))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0jzc fb:language.human_language.dialects ?x1 } } } LIMIT 9999", 
    "utterance": "how many dialects of arabic are there", 
    "id": 264
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.dave_grohl fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Alternative rock", 
      "Doom metal", 
      "Death metal", 
      "Heavy metal", 
      "Post-hardcore", 
      "Post-grunge", 
      "Punk rock", 
      "Rock music", 
      "Grunge", 
      "Hardcore punk", 
      "Thrash metal", 
      "Hard rock", 
      "Stoner rock"
    ], 
    "targetFormula": "(!fb:music.artist.genre fb:en.dave_grohl)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0285c fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are dave grohl 's musical genres", 
    "id": 265
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.massive_attack fb:music.artist.active_start ?x1 } LIMIT 9999", 
    "result": [
      "1987"
    ], 
    "targetFormula": "(!fb:music.artist.active_start fb:en.massive_attack)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0jvy1 fb:music.artist.active_start ?x1 } LIMIT 9999", 
    "utterance": "when did the band massive attack form", 
    "id": 266
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:travel.transportation.travel_destination fb:en.paris . FILTER (?x1 != fb:en.paris) . ?x1 fb:travel.transportation.transport_operator ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "SNCF", 
      "Eurolines"
    ], 
    "targetFormula": "(!fb:travel.transportation.transport_operator ((lambda x (fb:travel.transportation.travel_destination (var x))) fb:en.paris))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:travel.transportation.travel_destination fb:m.05qtj . FILTER (?x1 != fb:m.05qtj) . ?x1 fb:travel.transportation.transport_operator ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what bus operators run buses to paris", 
    "id": 267
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.euro fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "33"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.euro))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02l6h fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "in how many countries is the euro used", 
    "id": 268
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_league_participation.team fb:en.real_madrid . FILTER (?x1 != fb:en.real_madrid) . ?x1 fb:soccer.football_league_participation.league ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "La Liga"
    ], 
    "targetFormula": "(!fb:soccer.football_league_participation.league ((lambda x (fb:soccer.football_league_participation.team (var x))) fb:en.real_madrid))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_league_participation.team fb:m.06l22 . FILTER (?x1 != fb:m.06l22) . ?x1 fb:soccer.football_league_participation.league ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what league is real madrid a member of", 
    "id": 269
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:sports.sports_league_participation.league fb:en.uefa . FILTER (?x2 != fb:en.uefa) . ?x2 fb:sports.sports_league_participation.team ?x1 } } } LIMIT 9999", 
    "result": [
      "53"
    ], 
    "targetFormula": "(count (!fb:sports.sports_league_participation.team ((lambda x (fb:sports.sports_league_participation.league (var x))) fb:en.uefa)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:sports.sports_league_participation.league fb:m.07y9k . FILTER (?x2 != fb:m.07y9k) . ?x2 fb:sports.sports_league_participation.team ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams participate in the uefa", 
    "id": 270
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.stroke fb:medicine.disease.parent_disease ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cardiovascular disease", 
      "Nervous system disease", 
      "Central nervous system disease"
    ], 
    "targetFormula": "(!fb:medicine.disease.parent_disease fb:en.stroke)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02y0js fb:medicine.disease.parent_disease ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the parent disease of a stroke", 
    "id": 271
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.moon fb:astronomy.orbital_relationship.orbital_period ?x1 } LIMIT 9999", 
    "result": [
      "27.321582"
    ], 
    "targetFormula": "(!fb:astronomy.orbital_relationship.orbital_period fb:en.moon)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.04wv_ fb:astronomy.orbital_relationship.orbital_period ?x1 } LIMIT 9999", 
    "utterance": "what is the orbital period of the moon", 
    "id": 272
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.gotham_city fb:fictional_universe.fictional_setting.fictional_characters_born_here ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Batman"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_setting.fictional_characters_born_here fb:en.gotham_city)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03fdg fb:fictional_universe.fictional_setting.fictional_characters_born_here ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what character was born in gotham city", 
    "id": 273
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sdhc_card fb:digicams.camera_storage_type.compatible_cameras ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ricoh GR Digital II", 
      "Panasonic Lumix DMC-GF1", 
      "Panasonic Lumix DMC-GF2", 
      "Panasonic Lumix DMC-GH2", 
      "Panasonic Lumix DMC-G2", 
      "Olympus PEN E-P3", 
      "Olympus E-PL3", 
      "Panasonic Lumix DMC-GF3", 
      "Canon Powershot SX1 IS", 
      "Samsung L201", 
      "Kodak EasyShare C1013", 
      "Nikon Coolpix S210", 
      "Samsung L77", 
      "Samsung L73", 
      "Samsung NV20", 
      "Samsung NV15", 
      "Pentax Optio A30", 
      "Nikon D40", 
      "Canon EOS-1D Mark III", 
      "Nikon D40x", 
      "Panasonic Lumix DMC-L10", 
      "Pentax K20D", 
      "Canon EOS 450D", 
      "Nikon D60", 
      "Samsung GX-10", 
      "Pentax Optio M40", 
      "Pentax K100D Super", 
      "Nikon Coolpix P5000", 
      "Nikon Coolpix P5100", 
      "Pentax K200D", 
      "Canon PowerShot A570 IS", 
      "Canon EOS 1000D", 
      "Nikon D90", 
      "Nikon Coolpix P6000", 
      "Canon PowerShot SD890 IS", 
      "Canon PowerShot A460", 
      "Canon Powershot A580", 
      "Canon PowerShot A560", 
      "Canon PowerShot SD1000", 
      "Canon PowerShot SD800 IS", 
      "Canon Powershot A1000 IS", 
      "Canon PowerShot SD950 IS", 
      "Canon Powershot E1", 
      "Canon Powershot SD1100 IS", 
      "Canon Powershot A590 IS", 
      "Canon PowerShot A450", 
      "Canon PowerShot A550", 
      "Canon PowerShot SD850 IS", 
      "Sigma SD15", 
      "Samsung GX-20", 
      "Pentax KM", 
      "Canon PowerShot SD990 IS", 
      "Canon PowerShot A650 IS", 
      "Canon Powershot G10", 
      "Canon PowerShot G9", 
      "Canon PowerShot SD770 IS", 
      "Leica M8.2", 
      "Leica M8", 
      "Nikon D80", 
      "Canon EOS 600D", 
      "Pentax K10D", 
      "Nikon D800", 
      "Samsung L730", 
      "Nikon Coolpix P60", 
      "Pentax Optio M50", 
      "Nikon Coolpix S200", 
      "Fujifilm FinePix F60fd", 
      "Samsung i8", 
      "Samsung L83T", 
      "Nikon Coolpix S50", 
      "Casio Exilim EX-V8", 
      "Ricoh Caplio R8", 
      "Panasonic Lumix DMC-FX55", 
      "Panasonic Lumix DMC-LX3", 
      "Casio Exilim EX-FH20", 
      "Panasonic Lumix DMC-LZ6", 
      "Ricoh Caplio R6", 
      "Panasonic Lumix DMC-LX2", 
      "Panasonic Lumix DMC-FX12", 
      "Panasonic LUMIX DMC-FS5", 
      "Fujifilm FinePix F100fd", 
      "Ricoh Caplio GX100", 
      "Nikon Coolpix S550", 
      "Casio Exilim EX-Z75", 
      "Casio Exilim EX-Z300", 
      "Pentax Optio Z10", 
      "Nikon Coolpix S610", 
      "Nikon Coolpix S610c", 
      "Panasonic Lumix DMC-FZ8", 
      "Panasonic LUMIX DMC-LS80", 
      "Nikon Coolpix S51", 
      "Kodak EasyShare Z8612 IS", 
      "Nikon Coolpix S52c", 
      "Samsung NV11", 
      "Samsung NV8", 
      "Kodak EasyShare M1073 IS", 
      "Casio Exilim EX-Z250", 
      "Samsung S1050", 
      "Panasonic Lumix DMC-FX07", 
      "Panasonic Lumix DMC-TZ2", 
      "Samsung NV40", 
      "Nikon Coolpix S500", 
      "Samsung NV9", 
      "Nikon Coolpix L15", 
      "Kodak EasyShare C913", 
      "Samsung S730", 
      "Nikon Coolpix S510", 
      "Samsung NV30", 
      "Samsung S830", 
      "Nikon Coolpix S50c", 
      "Nikon Coolpix L18", 
      "Nikon Coolpix S600", 
      "Samsung L830", 
      "Nikon Coolpix S520", 
      "Nikon Coolpix L16", 
      "Nikon Coolpix P50", 
      "Nikon Coolpix L14", 
      "Samsung L100", 
      "Nikon Coolpix S700", 
      "Samsung S630", 
      "Casio Exilim EX-Z1080", 
      "Samsung L210", 
      "Casio Exilim Pro EX-F1", 
      "Casio Exilim EX-Z200", 
      "Pentax Optio W60", 
      "Kodak EasyShare M1033", 
      "Samsung S1070", 
      "Samsung L310W", 
      "Samsung i100", 
      "Ricoh G600", 
      "Fujifilm FinePix F480 Zoom", 
      "Casio Exilim EX-Z100", 
      "Fujifilm FinePix J10", 
      "Fujifilm FinePix Z20fd", 
      "Fujifilm FinePix Z200FD", 
      "Fujifilm FinePix S2000HD", 
      "Kodak EasyShare Z1015 IS", 
      "Fujifilm FinePix Z100FD", 
      "Fujifilm FinePix J50", 
      "Kodak EasyShare M763", 
      "Kodak EasyShare V1273", 
      "Kodak EasyShare V1073", 
      "Kodak EasyShare M1063", 
      "Kodak EasyShare M1093 IS", 
      "Kodak EasyShare M863", 
      "Nikon Coolpix P80", 
      "Nikon Coolpix S560", 
      "Nikon Coolpix S710", 
      "Samsung L110", 
      "Leica M9", 
      "Panasonic Lumix DMC-FZ50", 
      "Samsung S1030", 
      "Panasonic Lumix DMC-G1", 
      "Sigma DP2", 
      "Fujifilm FinePix S100fs", 
      "Panasonic Lumix DMC-TZ3", 
      "Canon PowerShot S5 IS", 
      "Canon PowerShot TX1", 
      "Canon PowerShot SX100 IS", 
      "Canon PowerShot SD790 IS", 
      "Canon Powershot SX110 IS", 
      "Canon Powershot SX10 IS", 
      "Canon PowerShot SD870 IS", 
      "Canon PowerShot SD880 IS", 
      "Canon Powershot A2000 IS", 
      "Canon PowerShot SD750", 
      "Canon Powershot A470", 
      "Panasonic Lumix DMC-LS75", 
      "Pentax Optio E50", 
      "Samsung S85", 
      "Casio Exilim EX-Z1050", 
      "Panasonic Lumix DMC-TZ4", 
      "Samsung i85", 
      "Pentax Optio V10", 
      "Samsung NV4", 
      "Ricoh Caplio R7", 
      "Panasonic LUMIX DMC-FS3", 
      "Pentax Optio S7", 
      "Casio Exilim EX-S770", 
      "Pentax Optio S10", 
      "Panasonic LUMIX DMC-LZ8", 
      "Nikon Coolpix S51c", 
      "Casio Exilim EX-Z1200 SR", 
      "Casio Exilim EX-Z77", 
      "Panasonic Lumix DMC-FX3", 
      "Panasonic LUMIX DMC-FX35", 
      "Panasonic Lumix DMC-FX10", 
      "Panasonic Lumix DMC-LS60", 
      "Panasonic Lumix DMC-TZ5", 
      "Panasonic LUMIX DMC-LZ10", 
      "Pentax Optio S12", 
      "Samsung S850", 
      "Panasonic Lumix DMC-FX33", 
      "Samsung i7", 
      "Panasonic Lumix DMC-FX30", 
      "Samsung L700", 
      "Leica V-LUX 1", 
      "Casio Exilim EX-Z700", 
      "Panasonic LUMIX DMC-FS20", 
      "Panasonic Lumix DMC-LZ7", 
      "Samsung L74 Wide", 
      "Pentax Optio W30", 
      "Panasonic Lumix DMC-FX100", 
      "Panasonic Lumix DMC-FX50", 
      "Casio Exilim EX-Z70", 
      "Samsung S860", 
      "Panasonic Lumix DMC-FZ18", 
      "Casio Exilim EX-Z85", 
      "Casio Exilim EX-Z80", 
      "Leica D-LUX 4", 
      "Fujifilm FinePix S8100fd", 
      "Samsung i80", 
      "Samsung S760", 
      "Ricoh Caplio R10", 
      "Samsung NV24HD", 
      "Pentax Optio E60", 
      "Pentax Optio V20", 
      "Ricoh Caplio GX200", 
      "Pentax Optio A40", 
      "Pentax Optio M60", 
      "Panasonic Lumix DMC-TZ50", 
      "Panasonic Lumix DMC-FX500", 
      "Panasonic Lumix DMC-FX37", 
      "Panasonic Lumix DMC-FX150", 
      "Casio Exilim EX-Z9", 
      "Fujifilm FinePix J100", 
      "Fujifilm FinePix J150W", 
      "Kodak EasyShare Z1275", 
      "Fujifilm FinePix J120", 
      "Fujifilm FinePix S1000fd", 
      "Fujifilm FinePix J110W", 
      "Kodak EasyShare M893 IS", 
      "Kodak EasyShare Z1285", 
      "Kodak EasyShare Z1085 IS", 
      "Leica D-LUX 3", 
      "Nikon Coolpix S52", 
      "Leica C-LUX 3", 
      "Nikon Coolpix S60", 
      "Panasonic Lumix DMC-FZ28", 
      "Samsung TL34HD"
    ], 
    "targetFormula": "(!fb:digicams.camera_storage_type.compatible_cameras fb:en.sdhc_card)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0220vm1 fb:digicams.camera_storage_type.compatible_cameras ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what digital cameras take an sdhc card", 
    "id": 274
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.matsushita_electric_industrial_co fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1918-03"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.matsushita_electric_industrial_co)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0nk5b fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was panasonic corporation founded", 
    "id": 275
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02hqp38 fb:comic_books.comic_book_series.number_of_issues ?x1 } LIMIT 9999", 
    "result": [
      "141"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_series.number_of_issues fb:m.02hqp38)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02hqp38 fb:comic_books.comic_book_series.number_of_issues ?x1 } LIMIT 9999", 
    "utterance": "how many issues are there in the x-men", 
    "id": 276
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award_winner fb:en.jack_albertson . FILTER (?x2 != fb:en.jack_albertson) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.jack_albertson)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award_winner fb:m.0hw6_ . FILTER (?x2 != fb:m.0hw6_) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many awards did jack albertson win", 
    "id": 277
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.subjects fb:en.antarctica } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (fb:film.film.subjects fb:en.antarctica))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.subjects fb:m.0jfx } } } LIMIT 9999", 
    "utterance": "how many films are there on antarctica", 
    "id": 278
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.stove_top_stuffing . FILTER (?x1 != fb:en.stove_top_stuffing) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.stove_top_stuffing))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.0526nk . FILTER (?x1 != fb:m.0526nk) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was stove top stuffing introduced", 
    "id": 279
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.13_going_on_30 fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Donna Roth", 
      "Gina Matthews", 
      "Susan Arnold"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.13_going_on_30)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02vzpb fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the producer for 13 going on 30", 
    "id": 280
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.yip_man fb:martial_arts.martial_artist.martial_arts_students ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Bruce Lee", 
      "Leung Ting", 
      "Wong Shun Leung"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_artist.martial_arts_students fb:en.yip_man)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.014y87 fb:martial_arts.martial_artist.martial_arts_students ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who studied martial arts under yip man", 
    "id": 281
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.uluru fb:geology.geological_formation.formed_during_period ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Paleozoic"
    ], 
    "targetFormula": "(!fb:geology.geological_formation.formed_during_period fb:en.uluru)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0_5xc fb:geology.geological_formation.formed_during_period ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "during what time period did uluru form", 
    "id": 282
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:american_football.football_historical_roster_position.player fb:en.jim_thorpe . FILTER (?x2 != fb:en.jim_thorpe) . ?x2 fb:american_football.football_historical_roster_position.team ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:american_football.football_historical_roster_position.team ( (lambda x (fb:american_football.football_historical_roster_position.player (var x))) fb:en.jim_thorpe)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:american_football.football_historical_roster_position.player fb:m.0f2zc . FILTER (?x2 != fb:m.0f2zc) . ?x2 fb:american_football.football_historical_roster_position.team ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams did jim thorpe play for", 
    "id": 283
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:boats.ship_ownership.owner fb:en.navy_dept . FILTER (?x2 != fb:en.navy_dept) . ?x2 fb:boats.ship_ownership.ship ?x1 } } } LIMIT 9999", 
    "result": [
      "283"
    ], 
    "targetFormula": "(count (!fb:boats.ship_ownership.ship ((lambda x (fb:boats.ship_ownership.owner (var x))) fb:en.navy_dept)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:boats.ship_ownership.owner fb:m.06hhp . FILTER (?x2 != fb:m.06hhp) . ?x2 fb:boats.ship_ownership.ship ?x1 } } } LIMIT 9999", 
    "utterance": "how many boats does the royal navy own", 
    "id": 284
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.leukemia fb:medicine.disease.treatments ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Radiation therapy", 
      "Hematopoietic stem cell transplantation", 
      "Pipobroman", 
      "Methotrexate", 
      "Immunotherapy", 
      "Irinotecan", 
      "Isotretinoin", 
      "Doxorubicin", 
      "Vincristine", 
      "Cytarabine", 
      "Chemotherapy", 
      "Imatinib"
    ], 
    "targetFormula": "(!fb:medicine.disease.treatments fb:en.leukemia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04psf fb:medicine.disease.treatments ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what treatments are there for leukemia", 
    "id": 285
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_honor.award_winner fb:en.danny_devito . FILTER (?x1 != fb:en.danny_devito) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1981\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1982\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"1981\"^^xsd:datetime) . ?x1 fb:award.award_honor.award ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Primetime Emmy Award for Outstanding Supporting Actor - Comedy Series", 
      "Primetime Emmy Award for Outstanding Supporting Actor in a Comedy, Variety or Music Series"
    ], 
    "targetFormula": "(!fb:award.award_honor.award (and ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.danny_devito) ((lambda x (fb:award.award_honor.year (var x))) (date 1981 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_honor.award_winner fb:m.0q9kd . FILTER (?x1 != fb:m.0q9kd) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1981\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1982\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"1981\"^^xsd:datetime) . ?x1 fb:award.award_honor.award ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "in 1981 what award did danny devito win", 
    "id": 286
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.egypt fb:olympics.olympic_participating_country.olympics_participated_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "1936 Summer Olympics", 
      "2008 Summer Olympics", 
      "1952 Summer Olympics"
    ], 
    "targetFormula": "(!fb:olympics.olympic_participating_country.olympics_participated_in fb:en.egypt)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02k54 fb:olympics.olympic_participating_country.olympics_participated_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what olympics has egypt participated in", 
    "id": 287
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:food.beer_containment.beer fb:en.pilsner_urquell . FILTER (?x1 != fb:en.pilsner_urquell) . ?x1 fb:food.beer_containment.size ?x2 } LIMIT 9999", 
    "result": [
      "330", 
      "500"
    ], 
    "targetFormula": "(!fb:food.beer_containment.size ((lambda x (fb:food.beer_containment.beer (var x))) fb:en.pilsner_urquell))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:food.beer_containment.beer fb:m.031n3s . FILTER (?x1 != fb:m.031n3s) . ?x1 fb:food.beer_containment.size ?x2 } LIMIT 9999", 
    "utterance": "what sizes does pilsner urquell come in", 
    "id": 288
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09y2k2 fb:dining.cuisine.ingredients ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Marsala wine", 
      "Italian Integrale flour", 
      "Sage", 
      "Parmigiano-Reggiano", 
      "Ham", 
      "Tomato", 
      "Guanciale", 
      "Extra virgin olive oil", 
      "Pecorino Romano", 
      "Pasta"
    ], 
    "targetFormula": "(!fb:dining.cuisine.ingredients fb:m.09y2k2)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09y2k2 fb:dining.cuisine.ingredients ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what ingredients are in italian cuisine", 
    "id": 289
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lepton fb:physics.particle_family.particles ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Neutrino", 
      "Muon", 
      "Antimuon", 
      "Electron", 
      "Positron"
    ], 
    "targetFormula": "(!fb:physics.particle_family.particles fb:en.lepton)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gj2r fb:physics.particle_family.particles ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what particles are in the lepton family", 
    "id": 290
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.cape_may_lighthouse fb:architecture.lighthouse.construction ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brick"
    ], 
    "targetFormula": "(!fb:architecture.lighthouse.construction fb:en.cape_may_lighthouse)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.032w60 fb:architecture.lighthouse.construction ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the cape may lighthouse made of", 
    "id": 291
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:boxing.match_boxer_relationship.winner_won true . FILTER (?x1 != true) . ?x1 fb:boxing.match_boxer_relationship.match fb:en.ali-frazier_ii . FILTER (?x1 != fb:en.ali-frazier_ii) . ?x1 fb:boxing.match_boxer_relationship.boxer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Muhammad Ali"
    ], 
    "targetFormula": "(!fb:boxing.match_boxer_relationship.boxer (and ((lambda x (fb:boxing.match_boxer_relationship.winner_won (var x))) true) ((lambda x (fb:boxing.match_boxer_relationship.match (var x))) fb:en.ali-frazier_ii)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:boxing.match_boxer_relationship.winner_won true . FILTER (?x1 != true) . ?x1 fb:boxing.match_boxer_relationship.match fb:m.02_wyl . FILTER (?x1 != fb:m.02_wyl) . ?x1 fb:boxing.match_boxer_relationship.boxer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who won muhammad ali vs. joe frazier ii", 
    "id": 292
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:en.h_r_block fb:organization.organization.headquarters ?x1 . FILTER (?x1 != fb:en.h_r_block) . ?x1 fb:location.mailing_address.citytown ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Kansas City"
    ], 
    "targetFormula": "(!fb:location.mailing_address.citytown ((lambda x (!fb:organization.organization.headquarters (var x))) fb:en.h_r_block))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.02rdct fb:organization.organization.headquarters ?x1 . FILTER (?x1 != fb:m.02rdct) . ?x1 fb:location.mailing_address.citytown ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "in what city is h&r block headquartered", 
    "id": 293
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brian Grazer", 
      "Russell Simmons", 
      "Mark Lipsky"
    ], 
    "targetFormula": "(!fb:film.film.produced_by fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.produced_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the nutty professor produced by", 
    "id": 294
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.mclean_hospital fb:medicine.hospital.beds ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:measurement_unit.dated_integer.number (!fb:medicine.hospital.beds fb:en.mclean_hospital)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.09rfy fb:medicine.hospital.beds ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "utterance": "how many beds does mclean hospital have", 
    "id": 295
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.porgy_and_bess fb:opera.opera.date_of_first_performance ?x1 } LIMIT 9999", 
    "result": [
      "1935-09-30"
    ], 
    "targetFormula": "(!fb:opera.opera.date_of_first_performance fb:en.porgy_and_bess)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01g380 fb:opera.opera.date_of_first_performance ?x1 } LIMIT 9999", 
    "utterance": "when was porgy and bess first performed", 
    "id": 296
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bianchi_pista fb:bicycles.bicycle_model.bicycle_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Fixed-gear bicycle"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_model.bicycle_type fb:en.bianchi_pista)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05nm029 fb:bicycles.bicycle_model.bicycle_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of bicycle is a bianchi pista", 
    "id": 297
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.state_v_kelly fb:law.legal_case.judges ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Daniel Joseph O'Hern"
    ], 
    "targetFormula": "(!fb:law.legal_case.judges fb:en.state_v_kelly)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02qd60n fb:law.legal_case.judges ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what judge presided over state v. kelly", 
    "id": 298
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.six_flags_america fb:amusement_parks.park.rides ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Batwing", 
      "The Joker's Jinx", 
      "The Wild One", 
      "Mind Eraser", 
      "Two Face: The Flip Side", 
      "Ultra Twister", 
      "Great Chase", 
      "Roar", 
      "Superman \u2013 Ride of Steel"
    ], 
    "targetFormula": "(!fb:amusement_parks.park.rides fb:en.six_flags_america)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01ymk2 fb:amusement_parks.park.rides ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the rides at six flags america", 
    "id": 299
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.girl_scouts_of_the_usa fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1912"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.girl_scouts_of_the_usa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01r3kd fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was girl scouts of the usa founded", 
    "id": 300
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_roster_position.player fb:en.dennis_bergkamp . FILTER (?x1 != fb:en.dennis_bergkamp) . ?x1 fb:soccer.football_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Netherlands national football team", 
      "Arsenal F.C.", 
      "AFC Ajax", 
      "Inter Milan"
    ], 
    "targetFormula": "(!fb:soccer.football_roster_position.team ((lambda x (fb:soccer.football_roster_position.player (var x))) fb:en.dennis_bergkamp))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_roster_position.player fb:m.0ccbf . FILTER (?x1 != fb:m.0ccbf) . ?x1 fb:soccer.football_roster_position.team ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what team does dennis bergkamp play for", 
    "id": 301
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.goalkeeper_football fb:soccer.football_position.players ?x1 } } } LIMIT 9999", 
    "result": [
      "7028"
    ], 
    "targetFormula": "(count (!fb:soccer.football_position.players fb:en.goalkeeper_football))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0dgrmp fb:soccer.football_position.players ?x1 } } } LIMIT 9999", 
    "utterance": "how many soccer players are goalkeepers", 
    "id": 302
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.cardiology fb:medicine.medical_specialty.hospitals_with_this_specialty ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "UAB Hospital", 
      "Bakersfield Heart Hospital", 
      "St. Francis Hospital", 
      "Banner Baywood Heart Hospital", 
      "Veterans Affairs Medical Center", 
      "Arizona Heart Hospital", 
      "Lubbock Heart Hospital", 
      "Baylor Jack and Jane Hamilton Heart and Vascular Hospital", 
      "Glasgow Royal Infirmary", 
      "Montreal Heart Institute", 
      "Requena", 
      "Toronto General Hospital", 
      "Montreal Chest Institute", 
      "University of Ottawa Heart Institute"
    ], 
    "targetFormula": "(!fb:medicine.medical_specialty.hospitals_with_this_specialty fb:en.cardiology)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01nd8 fb:medicine.medical_specialty.hospitals_with_this_specialty ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what hospitals specialize in cardiology", 
    "id": 303
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.proton fb:physics.particle.electric_charge ?x1 } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(!fb:physics.particle.electric_charge fb:en.proton)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05t5p fb:physics.particle.electric_charge ?x1 } LIMIT 9999", 
    "utterance": "what is the electric charge of a proton", 
    "id": 304
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.indian_rupee fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.indian_rupee))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02gsvk fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries use the indian rupee", 
    "id": 305
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.hayden_panettiere . FILTER (?x2 != fb:en.hayden_panettiere) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "result": [
      "20"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.character ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.hayden_panettiere)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.02jyhv . FILTER (?x2 != fb:m.02jyhv) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "utterance": "how many shows was hayden panettiere on", 
    "id": 306
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.honored_for fb:en.the_english_patient . FILTER (?x1 != fb:en.the_english_patient) . ?x1 fb:award.award_honor.award ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Man Booker Prize", 
      "Governor General's Award for English-language fiction"
    ], 
    "targetFormula": "(!fb:award.award_honor.award ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.the_english_patient))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.honored_for fb:m.0c047 . FILTER (?x1 != fb:m.0c047) . ?x1 fb:award.award_honor.award ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what awards has the english patient won", 
    "id": 307
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.domesticated_horse fb:biology.organism_classification.scientific_name ?x1 } LIMIT 9999", 
    "result": [
      "Equus ferus caballus"
    ], 
    "targetFormula": "(!fb:biology.organism_classification.scientific_name fb:en.domesticated_horse)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03k3r fb:biology.organism_classification.scientific_name ?x1 } LIMIT 9999", 
    "utterance": "what is the scientific name for a horse", 
    "id": 308
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.universal_studios_japan fb:amusement_parks.park.opened ?x1 } LIMIT 9999", 
    "result": [
      "2001-03-31"
    ], 
    "targetFormula": "(!fb:amusement_parks.park.opened fb:en.universal_studios_japan)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0737x5 fb:amusement_parks.park.opened ?x1 } LIMIT 9999", 
    "utterance": "when was universal studios japan opened", 
    "id": 309
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.butane fb:chemistry.chemical_compound.formula ?x1 } LIMIT 9999", 
    "result": [
      "C4H10"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_compound.formula fb:en.butane)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dx4k fb:chemistry.chemical_compound.formula ?x1 } LIMIT 9999", 
    "utterance": "what is the chemical formula for butane", 
    "id": 310
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sesame_street fb:tv.tv_program.theme_song ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Can You Tell Me How to Get to Sesame Street?"
    ], 
    "targetFormula": "(!fb:tv.tv_program.theme_song fb:en.sesame_street)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cwrr fb:tv.tv_program.theme_song ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the theme song of sesame street", 
    "id": 311
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:location.us_county fb:freebase.type_profile.equivalent_topic ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:freebase.type_profile.equivalent_topic fb:location.us_county)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:location.us_county fb:freebase.type_profile.equivalent_topic ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what topics are equivalent to us county", 
    "id": 312
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.woodrow_wilson fb:government.us_president.vice_president ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Thomas R. Marshall"
    ], 
    "targetFormula": "(!fb:government.us_president.vice_president fb:en.woodrow_wilson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.083q7 fb:government.us_president.vice_president ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was vice president to woodrow wilson", 
    "id": 313
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.galileo_spacecraft fb:spaceflight.satellite.launch_date ?x1 } LIMIT 9999", 
    "result": [
      "1989-10-18"
    ], 
    "targetFormula": "(!fb:spaceflight.satellite.launch_date fb:en.galileo_spacecraft)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03f7r fb:spaceflight.satellite.launch_date ?x1 } LIMIT 9999", 
    "utterance": "when was the galileo spacecraft launched", 
    "id": 314
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:government.government_position_held.office_position_or_title fb:en.united_states_senator . FILTER (?x1 != fb:en.united_states_senator) . ?x1 fb:government.government_position_held.district_represented fb:en.colorado . FILTER (?x1 != fb:en.colorado) . ?x1 fb:government.government_position_held.office_holder ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Karl C. Schuyler", 
      "Hank Brown", 
      "Gary Hart", 
      "Thomas M. Patterson", 
      "Charles W. Waterman", 
      "Nathaniel P. Hill", 
      "Gordon L. Allott", 
      "Henry M. Teller", 
      "Charles J. Hughes, Jr.", 
      "Thomas M. Bowen", 
      "Edward O. Wolcott", 
      "Edward P. Costigan", 
      "Floyd K. Haskell", 
      "Tim Wirth", 
      "Peter H. Dominick", 
      "Wayne Allard", 
      "Ken Salazar", 
      "Edwin C. Johnson", 
      "Charles S. Thomas", 
      "John F. Shafroth", 
      "Alva B. Adams", 
      "George M. Chilcott", 
      "Simon Guggenheim", 
      "Ben Nighthorse Campbell", 
      "Mark Udall", 
      "Walter Walker", 
      "Jerome B. Chaffee", 
      "Michael Bennet", 
      "Horace Tabor", 
      "William L. Armstrong", 
      "Eugene Millikin", 
      "Lawrence C. Phipps", 
      "John A. Carroll", 
      "Rice W. Means", 
      "Samuel D. Nicholson"
    ], 
    "targetFormula": "(!fb:government.government_position_held.office_holder (and ( (lambda x (fb:government.government_position_held.office_position_or_title (var x))) fb:en.united_states_senator) ((lambda x (fb:government.government_position_held.district_represented (var x))) fb:en.colorado)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:government.government_position_held.office_position_or_title fb:m.02_7l8y . FILTER (?x1 != fb:m.02_7l8y) . ?x1 fb:government.government_position_held.district_represented fb:m.01n4w . FILTER (?x1 != fb:m.01n4w) . ?x1 fb:government.government_position_held.office_holder ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the current senators of colorado", 
    "id": 315
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.boston_red_sox fb:sports.sports_team.team_mascot ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Wally the Green Monster"
    ], 
    "targetFormula": "(!fb:sports.sports_team.team_mascot fb:en.boston_red_sox)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01d5z fb:sports.sports_team.team_mascot ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the mascot of the boston red sox", 
    "id": 316
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.prostate_cancer fb:medicine.disease.symptoms ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Urinary incontinence", 
      "Nocturia", 
      "Bone fracture", 
      "Erectile dysfunction", 
      "Urinary Frequency", 
      "Bone pain", 
      "Dysuria", 
      "Hematuria", 
      "Fecal incontinence", 
      "Urinary retention", 
      "Painful ejaculation", 
      "Difficulty starting and maintaining a steady stream of urine"
    ], 
    "targetFormula": "(!fb:medicine.disease.symptoms fb:en.prostate_cancer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0m32h fb:medicine.disease.symptoms ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the symptoms of prostate cancer", 
    "id": 317
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.charlies_angels fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John August", 
      "Ed Solomon", 
      "Ryan Rowe"
    ], 
    "targetFormula": "(!fb:film.film.written_by fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01y9jr fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the story of charlie_s angels by", 
    "id": 318
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.02ncllz fb:library.public_library.address ?x1 . FILTER (?x1 != fb:m.02ncllz) . ?x1 fb:location.mailing_address.citytown ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Mobile"
    ], 
    "targetFormula": "(!fb:location.mailing_address.citytown ((lambda x (!fb:library.public_library.address (var x))) fb:m.02ncllz))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.02ncllz fb:library.public_library.address ?x1 . FILTER (?x1 != fb:m.02ncllz) . ?x1 fb:location.mailing_address.citytown ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what city is the ben may main library in", 
    "id": 319
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:american_football.football_historical_coach_position.coach fb:en.curly_lambeau . FILTER (?x2 != fb:en.curly_lambeau) . ?x2 fb:american_football.football_historical_coach_position.team ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:american_football.football_historical_coach_position.team ( (lambda x (fb:american_football.football_historical_coach_position.coach (var x))) fb:en.curly_lambeau)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:american_football.football_historical_coach_position.coach fb:m.0136tm . FILTER (?x2 != fb:m.0136tm) . ?x2 fb:american_football.football_historical_coach_position.team ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams has curly lambeau coached", 
    "id": 320
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.fleet_foxes fb:music.artist.album ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:music.artist.album fb:en.fleet_foxes))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03qmrpl fb:music.artist.album ?x1 } } } LIMIT 9999", 
    "utterance": "how many albums has fleet foxes released", 
    "id": 321
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:book.author.series_written_or_contributed_to fb:en.a_series_of_unfortunate_events . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Daniel Handler"
    ], 
    "targetFormula": "(fb:book.author.series_written_or_contributed_to fb:en.a_series_of_unfortunate_events)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:book.author.series_written_or_contributed_to fb:m.02qxjy . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who wrote a series of unfortunate events", 
    "id": 322
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.moon fb:fictional_universe.fictional_setting.works_set_here ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:fictional_universe.fictional_setting.works_set_here fb:en.moon))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.04wv_ fb:fictional_universe.fictional_setting.works_set_here ?x1 } } } LIMIT 9999", 
    "utterance": "how many works have been set on the moon", 
    "id": 323
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.airspeed_oxford fb:aviation.aircraft_model.maiden_flight ?x1 } LIMIT 9999", 
    "result": [
      "1937-06-19"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_model.maiden_flight fb:en.airspeed_oxford)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02r0bv fb:aviation.aircraft_model.maiden_flight ?x1 } LIMIT 9999", 
    "utterance": "when was the airspeed oxford first flown", 
    "id": 324
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.knickerbockers fb:fashion.garment.specialization_of ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Trousers"
    ], 
    "targetFormula": "(!fb:fashion.garment.specialization_of fb:en.knickerbockers)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dmnzf fb:fashion.garment.specialization_of ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what type of clothing are knickerbockers", 
    "id": 325
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.nintendo_ds fb:cvg.cvg_platform.games_on_this_platform ?x1 } } } LIMIT 9999", 
    "result": [
      "1710"
    ], 
    "targetFormula": "(count (!fb:cvg.cvg_platform.games_on_this_platform fb:en.nintendo_ds))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.028jm0 fb:cvg.cvg_platform.games_on_this_platform ?x1 } } } LIMIT 9999", 
    "utterance": "how many games are there for nintendo ds", 
    "id": 326
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:location.location fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:freebase.type_profile.instance_count fb:location.location)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:location.location fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "utterance": "how many locations are there on freebase", 
    "id": 327
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_last_minute_blog fb:internet.blog.focus ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Photography", 
      "Video", 
      "Technology", 
      "Politics"
    ], 
    "targetFormula": "(!fb:internet.blog.focus fb:en.the_last_minute_blog)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02hykwc fb:internet.blog.focus ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what's the focus of the last minute blog", 
    "id": 328
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sonic_the_hedgehog fb:fictional_universe.fictional_character.powers_or_abilities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Superhuman speed", 
      "Superhuman strength", 
      "Teleportation", 
      "Chaos Control"
    ], 
    "targetFormula": "(!fb:fictional_universe.fictional_character.powers_or_abilities fb:en.sonic_the_hedgehog)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07656 fb:fictional_universe.fictional_character.powers_or_abilities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what powers does sonic the hedgehog have", 
    "id": 329
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award fb:en.peabody_award . FILTER (?x2 != fb:en.peabody_award) . ?x2 fb:award.award_honor.award_winner ?x1 } } } LIMIT 9999", 
    "result": [
      "2299"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award_winner ((lambda x (fb:award.award_honor.award (var x))) fb:en.peabody_award)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award fb:m.0m7yy . FILTER (?x2 != fb:m.0m7yy) . ?x2 fb:award.award_honor.award_winner ?x1 } } } LIMIT 9999", 
    "utterance": "how many peabody award winners are there", 
    "id": 330
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kk92b fb:common.image.size ?x1 } LIMIT 9999", 
    "result": [
      "m.0kjkn6"
    ], 
    "targetFormula": "(!fb:common.image.size fb:m.0kk92b)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kk92b fb:common.image.size ?x1 } LIMIT 9999", 
    "utterance": "how tall is the you only live once image", 
    "id": 331
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.canon fb:digicams.digital_camera_manufacturer.cameras ?x1 } } } LIMIT 9999", 
    "result": [
      "130"
    ], 
    "targetFormula": "(count (!fb:digicams.digital_camera_manufacturer.cameras fb:en.canon))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01bvx1 fb:digicams.digital_camera_manufacturer.cameras ?x1 } } } LIMIT 9999", 
    "utterance": "how many canon digital cameras are there", 
    "id": 332
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.victoria_of_the_united_kingdom fb:royalty.chivalric_order_founder.orders_founded ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:royalty.chivalric_order_founder.orders_founded fb:en.victoria_of_the_united_kingdom))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0cw10 fb:royalty.chivalric_order_founder.orders_founded ?x1 } } } LIMIT 9999", 
    "utterance": "how many orders did queen victoria found", 
    "id": 333
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.omarion_grandberry fb:music.artist.label ?x1 } } } LIMIT 9999", 
    "result": [
      "13"
    ], 
    "targetFormula": "(count (!fb:music.artist.label fb:en.omarion_grandberry))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.019g40 fb:music.artist.label ?x1 } } } LIMIT 9999", 
    "utterance": "how many record labels was omarion under", 
    "id": 334
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:tv.tv_program.program_creator fb:en.hugh_laurie . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "A Bit of Fry and Laurie", 
      "The Crystal Cube"
    ], 
    "targetFormula": "(fb:tv.tv_program.program_creator fb:en.hugh_laurie)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:tv.tv_program.program_creator fb:m.013pk3 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what tv programs has hugh laurie created", 
    "id": 335
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_source_report fb:radio.radio_program.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Religion"
    ], 
    "targetFormula": "(!fb:radio.radio_program.subjects fb:en.the_source_report)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.065tq5k fb:radio.radio_program.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the subject of the source report", 
    "id": 336
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.kepler_mission fb:spaceflight.satellite.launch_site ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cape Canaveral Air Force Station Space Launch Complex 17"
    ], 
    "targetFormula": "(!fb:spaceflight.satellite.launch_site fb:en.kepler_mission)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03gzbb fb:spaceflight.satellite.launch_site ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was the kepler spacecraft launched", 
    "id": 337
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.omarion_grandberry fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.omarion_grandberry))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.019g40 fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names is omarion known by", 
    "id": 338
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:en.meet_the_parents . FILTER (?x1 != fb:en.meet_the_parents) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "result": [
      "108", 
      "103", 
      "107"
    ], 
    "targetFormula": "(!fb:film.film_cut.runtime ((lambda x (fb:film.film_cut.film (var x))) fb:en.meet_the_parents))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:film.film_cut.film fb:m.033fqh . FILTER (?x1 != fb:m.033fqh) . ?x1 fb:film.film_cut.runtime ?x2 } LIMIT 9999", 
    "utterance": "what is the runtime for meet the parents", 
    "id": 339
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.omarion_grandberry fb:music.artist.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Los Angeles", 
      "Florida"
    ], 
    "targetFormula": "(!fb:music.artist.origin fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019g40 fb:music.artist.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did omarion 's musical career begin", 
    "id": 340
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.transformers fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:en.transformers) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "147000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:film.film.estimated_budget (var x))) fb:en.transformers))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.05zlld0 fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:m.05zlld0) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "how much did transformers cost to produce", 
    "id": 341
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.oxford_properties fb:business.shopping_center_owner.shopping_centers_owned ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:business.shopping_center_owner.shopping_centers_owned fb:en.oxford_properties))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03m6ky2 fb:business.shopping_center_owner.shopping_centers_owned ?x1 } } } LIMIT 9999", 
    "utterance": "how many malls does oxford properties own", 
    "id": 342
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.new_york_stock_exchange_inc fb:finance.stock_exchange.companies_traded ?x2 . ?x2 fb:business.stock_ticker_symbol.ticker_symbol ?x1 } } } LIMIT 9999", 
    "result": [
      "2628"
    ], 
    "targetFormula": "(count (!fb:business.stock_ticker_symbol.ticker_symbol (!fb:finance.stock_exchange.companies_traded fb:en.new_york_stock_exchange_inc)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.05drh fb:finance.stock_exchange.companies_traded ?x2 . ?x2 fb:business.stock_ticker_symbol.ticker_symbol ?x1 } } } LIMIT 9999", 
    "utterance": "how many companies are traded by the nyse", 
    "id": 343
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:government.political_party_tenure.politician fb:en.grover_cleveland . FILTER (?x1 != fb:en.grover_cleveland) . ?x1 fb:government.political_party_tenure.party ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Democratic Party", 
      "National Democratic Party"
    ], 
    "targetFormula": "(!fb:government.political_party_tenure.party ((lambda x (fb:government.political_party_tenure.politician (var x))) fb:en.grover_cleveland))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:government.political_party_tenure.politician fb:m.038w8 . FILTER (?x1 != fb:m.038w8) . ?x1 fb:government.political_party_tenure.party ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what party did grover cleveland belong to", 
    "id": 344
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.leadbelly fb:influence.influence_node.influenced ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Garret Schuelke", 
      "Bob Dylan", 
      "Van Morrison", 
      "Woody Guthrie"
    ], 
    "targetFormula": "(!fb:influence.influence_node.influenced fb:en.leadbelly)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01wxlnl fb:influence.influence_node.influenced ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what artists are influenced by lead belly", 
    "id": 345
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:music.group_membership.group fb:en.the_soul_stirrers . FILTER (?x1 != fb:en.the_soul_stirrers) . ?x1 fb:music.group_membership.member ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Johnnie Taylor", 
      "Sam Cooke", 
      "Paul Foster", 
      "Lou Rawls", 
      "R. H. Harris", 
      "Michael Grady Jr.", 
      "Ben Odom", 
      "Willie Rogers", 
      "Rev. Julius Cheeks", 
      "Gene Stewart", 
      "James Phelps"
    ], 
    "targetFormula": "(!fb:music.group_membership.member ((lambda x (fb:music.group_membership.group (var x))) fb:en.the_soul_stirrers))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:music.group_membership.group fb:m.016586 . FILTER (?x1 != fb:m.016586) . ?x1 fb:music.group_membership.member ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who were the members of the soul stirrers", 
    "id": 346
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.africa fb:base.dinosaur.dinosaur_location.dinosaur_s ?x1 } } } LIMIT 9999", 
    "result": [
      "67"
    ], 
    "targetFormula": "(count (!fb:base.dinosaur.dinosaur_location.dinosaur_s fb:en.africa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0dg3n1 fb:base.dinosaur.dinosaur_location.dinosaur_s ?x1 } } } LIMIT 9999", 
    "utterance": "how many dinosaur species are from africa", 
    "id": 347
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019zhn fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Mobile", 
      "Alabama"
    ], 
    "targetFormula": "(!fb:location.location.containedby fb:m.019zhn)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019zhn fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is the uss alabama currently moored", 
    "id": 348
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.1948_summer_olympics fb:olympics.olympic_games.host_city ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "London"
    ], 
    "targetFormula": "(!fb:olympics.olympic_games.host_city fb:en.1948_summer_olympics)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0blg2 fb:olympics.olympic_games.host_city ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what city hosted the 1948 summer olympics", 
    "id": 349
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mexican_federal_highway_1 fb:transportation.road.length ?x1 } LIMIT 9999", 
    "result": [
      "1711"
    ], 
    "targetFormula": "(!fb:transportation.road.length fb:en.mexican_federal_highway_1)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07x1kd fb:transportation.road.length ?x1 } LIMIT 9999", 
    "utterance": "how long is the mexican federal highway 1", 
    "id": 350
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.down_quark fb:physics.particle.generation ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "First generation"
    ], 
    "targetFormula": "(!fb:physics.particle.generation fb:en.down_quark)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jzrd fb:physics.particle.generation ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what generation of matter is a down quark", 
    "id": 351
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:medicine.cancer_center.comprehensive true } } } LIMIT 9999", 
    "result": [
      "42"
    ], 
    "targetFormula": "(count (fb:medicine.cancer_center.comprehensive true))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:medicine.cancer_center.comprehensive true } } } LIMIT 9999", 
    "utterance": "how many cancer centers are comprehensive", 
    "id": 352
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:fashion.designer_label_association.designer fb:en.julien_fournie . FILTER (?x1 != fb:en.julien_fournie) . ?x1 fb:fashion.designer_label_association.label ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Ramosport"
    ], 
    "targetFormula": "(!fb:fashion.designer_label_association.label ((lambda x (fb:fashion.designer_label_association.designer (var x))) fb:en.julien_fournie))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:fashion.designer_label_association.designer fb:m.0d9ys1 . FILTER (?x1 != fb:m.0d9ys1) . ?x1 fb:fashion.designer_label_association.label ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what label does julien fournie design for", 
    "id": 353
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.beyonce . FILTER (?x2 != fb:en.beyonce) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.beyonce)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.01mpq7s . FILTER (?x2 != fb:m.01mpq7s) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances did beyonce do", 
    "id": 354
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.white_house fb:architecture.building.floors ?x1 } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(!fb:architecture.building.floors fb:en.white_house)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.081sq fb:architecture.building.floors ?x1 } LIMIT 9999", 
    "utterance": "how many floors does the white house have", 
    "id": 355
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.sesame_street fb:tv.tv_program.episodes ?x1 } } } LIMIT 9999", 
    "result": [
      "2864"
    ], 
    "targetFormula": "(count (!fb:tv.tv_program.episodes fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0cwrr fb:tv.tv_program.episodes ?x1 } } } LIMIT 9999", 
    "utterance": "how many episodes does sesame street have", 
    "id": 356
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mark_vii_monorail fb:rail.locomotive_class.introduced ?x1 } LIMIT 9999", 
    "result": [
      "2008"
    ], 
    "targetFormula": "(!fb:rail.locomotive_class.introduced fb:en.mark_vii_monorail)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06w7jwl fb:rail.locomotive_class.introduced ?x1 } LIMIT 9999", 
    "utterance": "when was the mark vii monorail introduced", 
    "id": 357
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.market-frankford_line fb:metropolitan_transit.transit_line.stops ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "11th Street", 
      "34th Street", 
      "56th Street", 
      "Frankford Transportation Center", 
      "13th Street", 
      "40th Street", 
      "69th Street Transportation Center", 
      "Tioga", 
      "8th Street", 
      "Allegheny", 
      "Spring Garden", 
      "Girard", 
      "30th Street Station", 
      "46th Street", 
      "63rd Street", 
      "60th Street", 
      "52nd Street", 
      "15th Street", 
      "York\u2013Dauphin", 
      "Huntingdon", 
      "Millbourne", 
      "2nd Street", 
      "Erie\u2013Torresdale", 
      "Margaret\u2013Orthodox", 
      "Church", 
      "Berks", 
      "5th Street", 
      "Somerset"
    ], 
    "targetFormula": "(!fb:metropolitan_transit.transit_line.stops fb:en.market-frankford_line)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04_60f fb:metropolitan_transit.transit_line.stops ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where does the market-frankford line stop", 
    "id": 358
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1968\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1969\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"1968\"^^xsd:datetime) . ?x1 fb:award.award_honor.award_winner fb:en.jack_albertson . FILTER (?x1 != fb:en.jack_albertson) . ?x1 fb:award.award_honor.award ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Academy Award for  Actor in a Supporting Role"
    ], 
    "targetFormula": "(!fb:award.award_honor.award (and ((lambda x (fb:award.award_honor.year (var x))) (date 1968 -1 -1)) ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.jack_albertson)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1968\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1969\"^^xsd:datetime)) . ?x1 fb:award.award_honor.year ?x2 . FILTER (?x1 != \"1968\"^^xsd:datetime) . ?x1 fb:award.award_honor.award_winner fb:m.0hw6_ . FILTER (?x1 != fb:m.0hw6_) . ?x1 fb:award.award_honor.award ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "what award did jack albertson win in 1968", 
    "id": 359
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2002\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2003\"^^xsd:datetime)) . ?x1 fb:basketball.basketball_historical_coach_position.from ?x2 . FILTER (?x1 != \"2002\"^^xsd:datetime) . ?x1 fb:basketball.basketball_historical_coach_position.coach fb:en.rick_carlisle . FILTER (?x1 != fb:en.rick_carlisle) . ?x1 fb:basketball.basketball_historical_coach_position.team ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:basketball.basketball_historical_coach_position.team (and ((lambda x (fb:basketball.basketball_historical_coach_position.from (var x))) (date 2002 -1 -1)) ((lambda x (fb:basketball.basketball_historical_coach_position.coach (var x))) fb:en.rick_carlisle)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2002\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2003\"^^xsd:datetime)) . ?x1 fb:basketball.basketball_historical_coach_position.from ?x2 . FILTER (?x1 != \"2002\"^^xsd:datetime) . ?x1 fb:basketball.basketball_historical_coach_position.coach fb:m.02zxw4 . FILTER (?x1 != fb:m.02zxw4) . ?x1 fb:basketball.basketball_historical_coach_position.team ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "what team did rick carlisle coach in 2002", 
    "id": 360
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.gloster_meteor fb:aviation.aircraft_model.maximum_speed_km_h ?x1 } LIMIT 9999", 
    "result": [
      "965.6"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_model.maximum_speed_km_h fb:en.gloster_meteor)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0bqpz fb:aviation.aircraft_model.maximum_speed_km_h ?x1 } LIMIT 9999", 
    "utterance": "what is the max speed of a gloster meteor", 
    "id": 361
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.sesame_street fb:tv.tv_program.spin_offs ?x1 } } } LIMIT 9999", 
    "result": [
      "19"
    ], 
    "targetFormula": "(count (!fb:tv.tv_program.spin_offs fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0cwrr fb:tv.tv_program.spin_offs ?x1 } } } LIMIT 9999", 
    "utterance": "how many spin offs does sesame street have", 
    "id": 362
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:film.actor fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:freebase.type_profile.instance_count fb:film.actor)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:film.actor fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "utterance": "how many film actors are there on freebase", 
    "id": 363
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.a_wrinkle_in_time fb:book.written_work.part_of_series ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Time Quartet"
    ], 
    "targetFormula": "(!fb:book.written_work.part_of_series fb:en.a_wrinkle_in_time)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02q83r fb:book.written_work.part_of_series ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what series is a wrinkle in time a part of", 
    "id": 364
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.runaways fb:comic_books.comic_book_series.created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Brian K. Vaughan"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_series.created_by fb:en.runaways)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.046_hm fb:comic_books.comic_book_series.created_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who created the runaways comic book series", 
    "id": 365
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.j_r_r_tolkien fb:language.language_creator.languages_created ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:language.language_creator.languages_created fb:en.j_r_r_tolkien))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.041h0 fb:language.language_creator.languages_created ?x1 } } } LIMIT 9999", 
    "utterance": "how many languages has jrr tolkein created", 
    "id": 366
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.collector fb:en.barry_halper . FILTER (?x2 != fb:en.barry_halper) . ?x2 fb:interests.collection.category ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:interests.collection.category ((lambda x (fb:interests.collection.collector (var x))) fb:en.barry_halper)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.collector fb:m.03c_7_w . FILTER (?x2 != fb:m.03c_7_w) . ?x2 fb:interests.collection.category ?x1 } } } LIMIT 9999", 
    "utterance": "how many collections did barry halper have", 
    "id": 367
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:base.popstra.fashion_choice.fashion_wearer fb:en.sarah_jessica_parker . FILTER (?x1 != fb:en.sarah_jessica_parker) . ?x1 fb:base.popstra.fashion_choice.designer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Christian Dior S.A.", 
      "Donna Karan", 
      "Alexander McQueen", 
      "Alexander Wang", 
      "L'Wren Scott"
    ], 
    "targetFormula": "(!fb:base.popstra.fashion_choice.designer ((lambda x (fb:base.popstra.fashion_choice.fashion_wearer (var x))) fb:en.sarah_jessica_parker))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:base.popstra.fashion_choice.fashion_wearer fb:m.0m66w . FILTER (?x1 != fb:m.0m66w) . ?x1 fb:base.popstra.fashion_choice.designer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what labels does sarah jessica parker wear", 
    "id": 368
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.ipod fb:business.consumer_product.product_line ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:business.consumer_product.product_line fb:en.ipod))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0mcx2 fb:business.consumer_product.product_line ?x1 } } } LIMIT 9999", 
    "utterance": "how many generations of the ipod are there", 
    "id": 369
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.sexual_orientation_phase.celebrity fb:en.britney_spears . FILTER (?x1 != fb:en.britney_spears) . ?x1 fb:celebrities.sexual_orientation_phase.sexual_orientation ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Heterosexuality"
    ], 
    "targetFormula": "(!fb:celebrities.sexual_orientation_phase.sexual_orientation ((lambda x (fb:celebrities.sexual_orientation_phase.celebrity (var x))) fb:en.britney_spears))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.sexual_orientation_phase.celebrity fb:m.015f7 . FILTER (?x1 != fb:m.015f7) . ?x1 fb:celebrities.sexual_orientation_phase.sexual_orientation ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what is britney spears' sexual orientation", 
    "id": 370
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.settlers_of_catan fb:games.game.number_of_players ?x1 . ?x1 fb:measurement_unit.integer_range.high_value ?x2 } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(!fb:measurement_unit.integer_range.high_value (!fb:games.game.number_of_players fb:en.settlers_of_catan))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.095hd fb:games.game.number_of_players ?x1 . ?x1 fb:measurement_unit.integer_range.high_value ?x2 } LIMIT 9999", 
    "utterance": "how many people can play settlers of catan", 
    "id": 371
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.chicago_bulls fb:basketball.basketball_team.head_coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Thibodeau"
    ], 
    "targetFormula": "(!fb:basketball.basketball_team.head_coach fb:en.chicago_bulls)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jm74 fb:basketball.basketball_team.head_coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the head coach of the chicago bulls", 
    "id": 372
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.navy_dept fb:military.armed_force.military_combatant ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "United Kingdom"
    ], 
    "targetFormula": "(!fb:military.armed_force.military_combatant fb:en.navy_dept)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06hhp fb:military.armed_force.military_combatant ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what country does the royal navy belong to", 
    "id": 373
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.japanese_yen fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "JPY"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.japanese_yen)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.088n7 fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the japanese yen", 
    "id": 374
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.boson fb:physics.particle_family.subclasses ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Scalar boson", 
      "Gauge boson"
    ], 
    "targetFormula": "(!fb:physics.particle_family.subclasses fb:en.boson)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01d82 fb:physics.particle_family.subclasses ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the subclasses of the boson class", 
    "id": 375
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.canasta fb:games.playing_card_game.number_of_cards ?x1 } LIMIT 9999", 
    "result": [
      "108"
    ], 
    "targetFormula": "(!fb:games.playing_card_game.number_of_cards fb:en.canasta)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0lytf fb:games.playing_card_game.number_of_cards ?x1 } LIMIT 9999", 
    "utterance": "how many cards do you need to play canasta", 
    "id": 376
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_network_duration.program fb:en.sesame_street . FILTER (?x1 != fb:en.sesame_street) . ?x1 fb:tv.tv_network_duration.network ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Public Broadcasting Service", 
      "PBS Kids Sprout", 
      "Noggin", 
      "National Educational Television"
    ], 
    "targetFormula": "(!fb:tv.tv_network_duration.network ((lambda x (fb:tv.tv_network_duration.program (var x))) fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_network_duration.program fb:m.0cwrr . FILTER (?x1 != fb:m.0cwrr) . ?x1 fb:tv.tv_network_duration.network ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what was sesame street 's original network", 
    "id": 377
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.breast_cancer fb:medicine.disease.stages ?x1 } } } LIMIT 9999", 
    "result": [
      "5"
    ], 
    "targetFormula": "(count (!fb:medicine.disease.stages fb:en.breast_cancer))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0j8hd fb:medicine.disease.stages ?x1 } } } LIMIT 9999", 
    "utterance": "how many stages of breast cancer are there", 
    "id": 378
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.new_york_giants fb:common.topic.alias ?x1 } LIMIT 9999", 
    "result": [
      "Big Blue", 
      "G-Men", 
      "Jints"
    ], 
    "targetFormula": "(!fb:common.topic.alias fb:en.new_york_giants)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05gg4 fb:common.topic.alias ?x1 } LIMIT 9999", 
    "utterance": "what are the new york giants also known as", 
    "id": 379
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.monopoly_boardgame fb:games.game.minimum_age_years ?x1 } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(!fb:games.game.minimum_age_years fb:en.monopoly_boardgame)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.04zk9 fb:games.game.minimum_age_years ?x1 } LIMIT 9999", 
    "utterance": "how old do you have to be to play monopoly", 
    "id": 380
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.boston_herald fb:book.periodical.first_issue_date ?x1 . ?x1 fb:book.periodical_publication_date.date ?x2 } LIMIT 9999", 
    "result": [
      "1982"
    ], 
    "targetFormula": "(!fb:book.periodical_publication_date.date (!fb:book.periodical.first_issue_date fb:en.boston_herald))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.01bsf fb:book.periodical.first_issue_date ?x1 . ?x1 fb:book.periodical_publication_date.date ?x2 } LIMIT 9999", 
    "utterance": "when was the boston herald first published", 
    "id": 381
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.quartzite fb:geology.rock_type.formations ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tuscarora Formation"
    ], 
    "targetFormula": "(!fb:geology.rock_type.formations fb:en.quartzite)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.029zr1 fb:geology.rock_type.formations ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what rock formations are made of quartzite", 
    "id": 382
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mexican_peso fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "MXN"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.mexican_peso)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.012ts8 fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the mexican peso", 
    "id": 383
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.substance_abuse_problem.celebrity fb:en.robert_downey_jr . FILTER (?x1 != fb:en.robert_downey_jr) . ?x1 fb:celebrities.substance_abuse_problem.substance ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Heroin", 
      "Methamphetamine", 
      "Diazepam", 
      "Alcoholic beverage", 
      "Cocaine"
    ], 
    "targetFormula": "(!fb:celebrities.substance_abuse_problem.substance ((lambda x (fb:celebrities.substance_abuse_problem.celebrity (var x))) fb:en.robert_downey_jr))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.substance_abuse_problem.celebrity fb:m.016z2j . FILTER (?x1 != fb:m.016z2j) . ?x1 fb:celebrities.substance_abuse_problem.substance ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what substancs has robert downey jr abused", 
    "id": 384
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.engineering fb:education.field_of_study.subdisciplines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Automotive engineering", 
      "Civil Engineering", 
      "Chemical Engineering", 
      "Electrical engineering", 
      "Mechanical Engineering", 
      "Nanotechnology", 
      "Nuclear engineering", 
      "Industrial biotechnology", 
      "Plastics engineering", 
      "Materials Engineering", 
      "Environmental engineering", 
      "Environmental biotechnology", 
      "Medical Engineering"
    ], 
    "targetFormula": "(!fb:education.field_of_study.subdisciplines fb:en.engineering)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02ky346 fb:education.field_of_study.subdisciplines ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the subdisciplines of engineering", 
    "id": 385
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lightnin_hopkins fb:music.group_member.instruments_played ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Guitar"
    ], 
    "targetFormula": "(!fb:music.group_member.instruments_played fb:en.lightnin_hopkins)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01rlq_ fb:music.group_member.instruments_played ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what instrument did lightnin' hopkins play", 
    "id": 386
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:finance.exchange_rate.source_of_exchange fb:en.danish_krone . FILTER (?x1 != fb:en.danish_krone) . ?x1 fb:finance.exchange_rate.target_of_exchange ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Euro", 
      "United States dollar", 
      "New Zealand dollar", 
      "UK \u00a3", 
      "Australian dollar", 
      "Canadian dollar", 
      "Singapore dollar", 
      "Brazilian real", 
      "Malaysian ringgit", 
      "Bulgarian lev", 
      "Swiss franc", 
      "Revaluation of the Turkish Lira"
    ], 
    "targetFormula": "(!fb:finance.exchange_rate.target_of_exchange ((lambda x (fb:finance.exchange_rate.source_of_exchange (var x))) fb:en.danish_krone))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:finance.exchange_rate.source_of_exchange fb:m.01j9nc . FILTER (?x1 != fb:m.01j9nc) . ?x1 fb:finance.exchange_rate.target_of_exchange ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "how much danish kroner is a us dollar worth", 
    "id": 387
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02zl93 fb:boats.ship.hull_material ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Iron"
    ], 
    "targetFormula": "(!fb:boats.ship.hull_material fb:m.02zl93)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02zl93 fb:boats.ship.hull_material ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the hull made of on the james craig", 
    "id": 388
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.a_prairie_home_companion fb:radio.radio_program.first_broadcast ?x1 } LIMIT 9999", 
    "result": [
      "1974-07-06"
    ], 
    "targetFormula": "(!fb:radio.radio_program.first_broadcast fb:en.a_prairie_home_companion)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0gly1 fb:radio.radio_program.first_broadcast ?x1 } LIMIT 9999", 
    "utterance": "when did a prairie home companion first air", 
    "id": 389
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.san_francisco fb:travel.travel_destination.guidebooks ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "San Francisco City Guide", 
      "Lonely Planet: California"
    ], 
    "targetFormula": "(!fb:travel.travel_destination.guidebooks fb:en.san_francisco)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d6lp fb:travel.travel_destination.guidebooks ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what guidebooks are there for san francisco", 
    "id": 390
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:cvg.game_performance.game fb:en.sonic_rush . FILTER (?x1 != fb:en.sonic_rush) . ?x1 fb:cvg.game_performance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Cream the Rabbit", 
      "Vanilla the Rabbit", 
      "Knuckles the Echidna", 
      "Miles \"Tails\" Prower", 
      "Amy Rose", 
      "Super Sonic", 
      "Sonic the Hedgehog", 
      "Egg Pawn", 
      "Eggman Nega", 
      "Dr. Eggman", 
      "Burning Blaze", 
      "Blaze the Cat"
    ], 
    "targetFormula": "(!fb:cvg.game_performance.character ((lambda x (fb:cvg.game_performance.game (var x))) fb:en.sonic_rush))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:cvg.game_performance.game fb:m.04mt7r . FILTER (?x1 != fb:m.04mt7r) . ?x1 fb:cvg.game_performance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "which characters are playable in sonic rush", 
    "id": 391
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.film_film_distributor_relationship.film fb:en.bruce_almighty . FILTER (?x1 != fb:en.bruce_almighty) . ?x1 fb:film.film_film_distributor_relationship.distributor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Touchstone Pictures", 
      "Walt Disney Studios Motion Pictures", 
      "Universal Studios"
    ], 
    "targetFormula": "(!fb:film.film_film_distributor_relationship.distributor ((lambda x (fb:film.film_film_distributor_relationship.film (var x))) fb:en.bruce_almighty))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:film.film_film_distributor_relationship.film fb:m.01jft4 . FILTER (?x1 != fb:m.01jft4) . ?x1 fb:film.film_film_distributor_relationship.distributor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the distributors for bruce almighty", 
    "id": 392
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.ron_glass . FILTER (?x2 != fb:en.ron_glass) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "13"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.ron_glass)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.03h82p . FILTER (?x2 != fb:m.03h82p) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances did ron glass do", 
    "id": 393
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.the_sims fb:cvg.computer_videogame.expansions ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:cvg.computer_videogame.expansions fb:en.the_sims))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07hm9 fb:cvg.computer_videogame.expansions ?x1 } } } LIMIT 9999", 
    "utterance": "how many expansion packs does the sims have", 
    "id": 394
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:media_common.literary_genre.books_in_this_genre fb:en.the_hound_of_the_baskervilles . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Novel", 
      "Mystery", 
      "Crime Fiction", 
      "Detective fiction"
    ], 
    "targetFormula": "(fb:media_common.literary_genre.books_in_this_genre fb:en.the_hound_of_the_baskervilles)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:media_common.literary_genre.books_in_this_genre fb:m.07g52 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genre is the hound of the baskervilles", 
    "id": 395
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mauritania fb:location.country.official_language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Arabic Language"
    ], 
    "targetFormula": "(!fb:location.country.official_language fb:en.mauritania)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04vjh fb:location.country.official_language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the official language of mauritania", 
    "id": 396
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.sesame_street fb:tv.tv_program.seasons ?x1 } } } LIMIT 9999", 
    "result": [
      "44"
    ], 
    "targetFormula": "(count (!fb:tv.tv_program.seasons fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0cwrr fb:tv.tv_program.seasons ?x1 } } } LIMIT 9999", 
    "utterance": "how many seasons of sesame street are there", 
    "id": 397
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:cvg.game_performance.game fb:en.halo_reach . FILTER (?x1 != fb:en.halo_reach) . ?x1 fb:cvg.game_performance.performance_type fb:m.02nsjvf . FILTER (?x1 != fb:m.02nsjvf) . ?x1 fb:cvg.game_performance.voice_actor fb:en.nathan_fillion . FILTER (?x1 != fb:en.nathan_fillion) . ?x1 fb:cvg.game_performance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Sergeant Edward Buck"
    ], 
    "targetFormula": "(!fb:cvg.game_performance.character (and (and ((lambda x (fb:cvg.game_performance.game (var x))) fb:en.halo_reach) ((lambda x (fb:cvg.game_performance.performance_type (var x))) fb:m.02nsjvf)) ((lambda x (fb:cvg.game_performance.voice_actor (var x))) fb:en.nathan_fillion)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:cvg.game_performance.game fb:m.064p9fm . FILTER (?x1 != fb:m.064p9fm) . ?x1 fb:cvg.game_performance.performance_type fb:m.02nsjvf . FILTER (?x1 != fb:m.02nsjvf) . ?x1 fb:cvg.game_performance.voice_actor fb:m.02s_qz . FILTER (?x1 != fb:m.02s_qz) . ?x1 fb:cvg.game_performance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who did nathan fillion voice in halo: reach", 
    "id": 398
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Shadyac"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the director of the nutty professor", 
    "id": 399
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.university_of_lima fb:education.educational_institution.school_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Private university"
    ], 
    "targetFormula": "(!fb:education.educational_institution.school_type fb:en.university_of_lima)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06978b fb:education.educational_institution.school_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "is the university of lima public or private", 
    "id": 400
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:ice_hockey.hockey_roster_position.team fb:en.san_jose_sharks . FILTER (?x1 != fb:en.san_jose_sharks) . ?x1 fb:ice_hockey.hockey_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Logan Couture", 
      "Joe Thornton", 
      "Patrick Marleau", 
      "Brad Stuart", 
      "Alex Stalock", 
      "Jason Demers", 
      "James Sheppard", 
      "Marc-\u00c9douard Vlasic", 
      "Andrew Desjardins", 
      "Bracken Kearns", 
      "Matt Irwin", 
      "Dan Boyle", 
      "Brent Burns", 
      "TJ Galiardi", 
      "Nick Petrecki", 
      "Scott Gomez", 
      "Adam Burish", 
      "Joe Pavelski", 
      "Thomas Greiss", 
      "Tim Kennedy", 
      "Raffi Torres", 
      "Martin Havl\u00e1t", 
      "Antti Niemi", 
      "Tommy Wingels", 
      "Justin Braun"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_roster_position.player ((lambda x (fb:ice_hockey.hockey_roster_position.team (var x))) fb:en.san_jose_sharks))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:ice_hockey.hockey_roster_position.team fb:m.0jnrk . FILTER (?x1 != fb:m.0jnrk) . ?x1 fb:ice_hockey.hockey_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who currently plays for the san jose sharks", 
    "id": 401
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.edward_scissorhands fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:en.edward_scissorhands) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "20000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount ((lambda x (!fb:film.film.estimated_budget (var x))) fb:en.edward_scissorhands))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.01s3vk fb:film.film.estimated_budget ?x1 . FILTER (?x1 != fb:m.01s3vk) . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what was the budget for edward scissorhands", 
    "id": 402
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.swedish_krona fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "SEK"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.swedish_krona)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0485n fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the swedish krona", 
    "id": 403
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.frank_sinatra fb:base.academyawards.host_of_oscar_show.oscar_show_hosted ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:base.academyawards.host_of_oscar_show.oscar_show_hosted fb:en.frank_sinatra))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02_fj fb:base.academyawards.host_of_oscar_show.oscar_show_hosted ?x1 } } } LIMIT 9999", 
    "utterance": "how many oscar shows did frank sinatra host", 
    "id": 404
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:location.location.containedby fb:en.north_america } } } LIMIT 9999", 
    "result": [
      "1299"
    ], 
    "targetFormula": "(count (fb:location.location.containedby fb:en.north_america))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:location.location.containedby fb:m.059g4 } } } LIMIT 9999", 
    "utterance": "how many countries are within north america", 
    "id": 405
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.wal-mart fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:business.business_operation.industry fb:en.wal-mart))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0841v fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "utterance": "how many industries does walmart consist of", 
    "id": 406
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.the_washington_post fb:book.periodical.frequency_or_issues_per_year ?x1 . ?x1 fb:book.periodical_frequency.issues_per_year ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:book.periodical_frequency.issues_per_year (!fb:book.periodical.frequency_or_issues_per_year fb:en.the_washington_post))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0px38 fb:book.periodical.frequency_or_issues_per_year ?x1 . ?x1 fb:book.periodical_frequency.issues_per_year ?x2 } LIMIT 9999", 
    "utterance": "how often does the washington post come out", 
    "id": 407
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.joe_girardi fb:baseball.baseball_manager.current_team_managed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "New York Yankees"
    ], 
    "targetFormula": "(!fb:baseball.baseball_manager.current_team_managed fb:en.joe_girardi)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06cjhk fb:baseball.baseball_manager.current_team_managed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what team does joe girardi currently manage", 
    "id": 408
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.documentary fb:media_common.netflix_genre.titles ?x1 } } } LIMIT 9999", 
    "result": [
      "7000"
    ], 
    "targetFormula": "(count (!fb:media_common.netflix_genre.titles fb:en.documentary))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0jtdp fb:media_common.netflix_genre.titles ?x1 } } } LIMIT 9999", 
    "utterance": "how many documentaries are there on netflix", 
    "id": 409
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mississippi_river fb:geography.river.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lake Itasca"
    ], 
    "targetFormula": "(!fb:geography.river.origin fb:en.mississippi_river)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04yf_ fb:geography.river.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the origin of the mississippi river", 
    "id": 410
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:film.film.subjects fb:en.apollo_11 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The Dish", 
      "Fly Me to the Moon"
    ], 
    "targetFormula": "(fb:film.film.subjects fb:en.apollo_11)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:film.film.subjects fb:m.0hsp . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some films on the apollo 11 mission", 
    "id": 411
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.panasonic_dx3000 fb:bicycles.bicycle_model.speeds ?x1 } LIMIT 9999", 
    "result": [
      "18"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_model.speeds fb:en.panasonic_dx3000)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05_b6fj fb:bicycles.bicycle_model.speeds ?x1 } LIMIT 9999", 
    "utterance": "how many speeds does a panasonic dx3000 have", 
    "id": 412
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:boxing.boxing_title_tenure.title fb:m.0chgh2j . FILTER (?x1 != fb:m.0chgh2j) . ?x1 fb:boxing.boxing_title_tenure.champion ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Muhammad Ali"
    ], 
    "targetFormula": "(!fb:boxing.boxing_title_tenure.champion ((lambda x (fb:boxing.boxing_title_tenure.title (var x))) fb:m.0chgh2j))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:boxing.boxing_title_tenure.title fb:m.0chgh2j . FILTER (?x1 != fb:m.0chgh2j) . ?x1 fb:boxing.boxing_title_tenure.champion ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who has held the title of wba world champion", 
    "id": 413
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.st_louis_cardinals fb:baseball.baseball_team.division ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "National League Central"
    ], 
    "targetFormula": "(!fb:baseball.baseball_team.division fb:en.st_louis_cardinals)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06x68 fb:baseball.baseball_team.division ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what division are the st. louis cardinals", 
    "id": 414
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.walter_gropius fb:architecture.architect.architectural_style ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Modern architecture", 
      "Bauhaus style", 
      "Expressionist architecture"
    ], 
    "targetFormula": "(!fb:architecture.architect.architectural_style fb:en.walter_gropius)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0854b fb:architecture.architect.architectural_style ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was walter gropius' architectural style", 
    "id": 415
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.snowshoe_mountain fb:skiing.ski_area.closest_city ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Marlinton"
    ], 
    "targetFormula": "(!fb:skiing.ski_area.closest_city fb:en.snowshoe_mountain)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.043r0z fb:skiing.ski_area.closest_city ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the closet city to snowshoe mountain", 
    "id": 416
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:organization.organization_membership.organization fb:en.european_union . FILTER (?x2 != fb:en.european_union) . ?x2 fb:organization.organization_membership.member ?x1 } } } LIMIT 9999", 
    "result": [
      "28"
    ], 
    "targetFormula": "(count (!fb:organization.organization_membership.member ((lambda x (fb:organization.organization_membership.organization (var x))) fb:en.european_union)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:organization.organization_membership.organization fb:m.02jxk . FILTER (?x2 != fb:m.02jxk) . ?x2 fb:organization.organization_membership.member ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries are in the european union", 
    "id": 417
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.london_zoo fb:zoos.zoo.num_animals ?x1 } LIMIT 9999", 
    "result": [
      "16802"
    ], 
    "targetFormula": "(!fb:zoos.zoo.num_animals fb:en.london_zoo)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0j53x fb:zoos.zoo.num_animals ?x1 } LIMIT 9999", 
    "utterance": "how many animals are there at the london zoo", 
    "id": 418
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:american_football.football_roster_position.position fb:en.linebacker . FILTER (?x1 != fb:en.linebacker) . ?x1 fb:american_football.football_roster_position.team fb:en.chicago_bears . FILTER (?x1 != fb:en.chicago_bears) . ?x1 fb:american_football.football_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Blake Costanzo", 
      "Dom DeCicco", 
      "Lance Briggs", 
      "Jerry Franklin", 
      "J. T. Thomas", 
      "Lawrence Wilson"
    ], 
    "targetFormula": "(!fb:american_football.football_roster_position.player (and ((lambda x (fb:american_football.football_roster_position.position (var x))) fb:en.linebacker) ((lambda x (fb:american_football.football_roster_position.team (var x))) fb:en.chicago_bears)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:american_football.football_roster_position.position fb:m.02g_6j . FILTER (?x1 != fb:m.02g_6j) . ?x1 fb:american_football.football_roster_position.team fb:m.01y3v . FILTER (?x1 != fb:m.01y3v) . ?x1 fb:american_football.football_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the linebackers on the chicago bears", 
    "id": 419
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.space_mountain fb:amusement_parks.ride.area ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tomorrowland"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.area fb:en.space_mountain)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02z2qmd fb:amusement_parks.ride.area ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what area of disneyland is space mountain in", 
    "id": 420
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.space_shuttle_discovery fb:spaceflight.spacecraft.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "North American Aviation"
    ], 
    "targetFormula": "(!fb:spaceflight.spacecraft.manufacturer fb:en.space_shuttle_discovery)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06_t4 fb:spaceflight.spacecraft.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who manufactured the space shuttle discovery", 
    "id": 421
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:engineering.battery_size_cell_variation.cell_type fb:en.alkaline_battery . FILTER (?x1 != fb:en.alkaline_battery) . ?x1 fb:engineering.battery_size_cell_variation.size fb:en.aa_battery . FILTER (?x1 != fb:en.aa_battery) . ?x1 fb:engineering.battery_size_cell_variation.voltage ?x2 } LIMIT 9999", 
    "result": [
      "1.5"
    ], 
    "targetFormula": "(!fb:engineering.battery_size_cell_variation.voltage (and ((lambda x (fb:engineering.battery_size_cell_variation.cell_type (var x))) fb:en.alkaline_battery) ((lambda x (fb:engineering.battery_size_cell_variation.size (var x))) fb:en.aa_battery)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:engineering.battery_size_cell_variation.cell_type fb:m.0361c4 . FILTER (?x1 != fb:m.0361c4) . ?x1 fb:engineering.battery_size_cell_variation.size fb:m.05f08s . FILTER (?x1 != fb:m.05f08s) . ?x1 fb:engineering.battery_size_cell_variation.voltage ?x2 } LIMIT 9999", 
    "utterance": "what is the voltage of a aa alkaline battery", 
    "id": 422
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.igneous_rock fb:geology.rock_type.parent_rock_type ?x1 } } } LIMIT 9999", 
    "result": [
      "51"
    ], 
    "targetFormula": "(count (!fb:geology.rock_type.parent_rock_type fb:en.igneous_rock))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03_2f fb:geology.rock_type.parent_rock_type ?x1 } } } LIMIT 9999", 
    "utterance": "how many parent types does igneous rock have", 
    "id": 423
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.game_of_thrones fb:media_common.adaptation.adapted_from ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "A Game of Thrones", 
      "A Song of Ice and Fire"
    ], 
    "targetFormula": "(!fb:media_common.adaptation.adapted_from fb:en.game_of_thrones)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0524b41 fb:media_common.adaptation.adapted_from ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what series was game of thrones adapted from", 
    "id": 424
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.arabic_alphabet fb:language.language_writing_system.used_from ?x1 } LIMIT 9999", 
    "result": [
      "0400"
    ], 
    "targetFormula": "(!fb:language.language_writing_system.used_from fb:en.arabic_alphabet)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0xn6 fb:language.language_writing_system.used_from ?x1 } LIMIT 9999", 
    "utterance": "since when has the arabic alphabet been used", 
    "id": 425
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.australian_dollar fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.australian_dollar))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0kz1h fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries use the australian dollar", 
    "id": 426
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.stumpjumper fb:bicycles.bicycle_model.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Specialized Bicycle Components"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_model.manufacturer fb:en.stumpjumper)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03qpf8g fb:bicycles.bicycle_model.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who manufactures the specialized stumpjumper", 
    "id": 427
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:celebrities.substance_abuse_problem.celebrity fb:en.robin_williams . FILTER (?x1 != fb:en.robin_williams) . ?x1 fb:celebrities.substance_abuse_problem.substance fb:en.cocaine . FILTER (?x1 != fb:en.cocaine) . ?x1 fb:celebrities.substance_abuse_problem.end ?x2 } LIMIT 9999", 
    "result": [
      "1983"
    ], 
    "targetFormula": "(!fb:celebrities.substance_abuse_problem.end (and ((lambda x (fb:celebrities.substance_abuse_problem.celebrity (var x))) fb:en.robin_williams) ((lambda x (fb:celebrities.substance_abuse_problem.substance (var x))) fb:en.cocaine)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:celebrities.substance_abuse_problem.celebrity fb:m.0dzf_ . FILTER (?x1 != fb:m.0dzf_) . ?x1 fb:celebrities.substance_abuse_problem.substance fb:m.0256b . FILTER (?x1 != fb:m.0256b) . ?x1 fb:celebrities.substance_abuse_problem.end ?x2 } LIMIT 9999", 
    "utterance": "when did robin williams stop abusing cocaine", 
    "id": 428
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.tv_producer_term.producer fb:en.jerry_seinfeld . FILTER (?x2 != fb:en.jerry_seinfeld) . ?x2 fb:tv.tv_producer_term.program ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:tv.tv_producer_term.program ((lambda x (fb:tv.tv_producer_term.producer (var x))) fb:en.jerry_seinfeld)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.tv_producer_term.producer fb:m.0q5hw . FILTER (?x2 != fb:m.0q5hw) . ?x2 fb:tv.tv_producer_term.program ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv shows did jerry seinfeld produce", 
    "id": 429
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Comedy", 
      "Romance Film"
    ], 
    "targetFormula": "(!fb:film.film.genre fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genres does meet the parents consist of", 
    "id": 430
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:event.speech_or_presentation.presented_work fb:en.cross_of_gold_speech . FILTER (?x1 != fb:en.cross_of_gold_speech) . ?x1 fb:event.speech_or_presentation.event ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "1896 Democratic National Convention"
    ], 
    "targetFormula": "(!fb:event.speech_or_presentation.event ((lambda x (fb:event.speech_or_presentation.presented_work (var x))) fb:en.cross_of_gold_speech))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:event.speech_or_presentation.presented_work fb:m.09nqy . FILTER (?x1 != fb:m.09nqy) . ?x1 fb:event.speech_or_presentation.event ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "where was the cross of gold speech presented", 
    "id": 431
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.rolls-royce_merlin fb:engineering.piston_engine.capacity ?x1 } LIMIT 9999", 
    "result": [
      "27"
    ], 
    "targetFormula": "(!fb:engineering.piston_engine.capacity fb:en.rolls-royce_merlin)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.09qx4 fb:engineering.piston_engine.capacity ?x1 } LIMIT 9999", 
    "utterance": "what is the capacity of a rolls royce merlin", 
    "id": 432
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0h2krn6 fb:automotive.trim_level.transmission ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "5 Speed Manual"
    ], 
    "targetFormula": "(!fb:automotive.trim_level.transmission fb:m.0h2krn6)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0h2krn6 fb:automotive.trim_level.transmission ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the transmission of a 2011 honda fit", 
    "id": 433
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.bath_iron_works fb:boats.ship_builder.ships_built ?x1 } } } LIMIT 9999", 
    "result": [
      "254"
    ], 
    "targetFormula": "(count (!fb:boats.ship_builder.ships_built fb:en.bath_iron_works))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01f99l fb:boats.ship_builder.ships_built ?x1 } } } LIMIT 9999", 
    "utterance": "how many ships were built by bath iron works", 
    "id": 434
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.010s fb:freebase.domain_profile.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Commons", 
      "Arts & Entertainment"
    ], 
    "targetFormula": "(!fb:freebase.domain_profile.category fb:m.010s)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.010s fb:freebase.domain_profile.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what category does the film domain belong to", 
    "id": 435
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06x6s fb:ice_hockey.hockey_team.division ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Central Division"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_team.division fb:m.06x6s)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06x6s fb:ice_hockey.hockey_team.division ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what division do the st. louis blues play", 
    "id": 436
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.carnegie_mellon_university fb:education.educational_institution.newspaper ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The Cut", 
      "The Tartan", 
      "Readme"
    ], 
    "targetFormula": "(!fb:education.educational_institution.newspaper fb:en.carnegie_mellon_university)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cwx_ fb:education.educational_institution.newspaper ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what newspapers does carnegie mellon publish", 
    "id": 437
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_magicians_nephew fb:fictional_universe.work_of_fiction.setting ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "London", 
      "Narnia"
    ], 
    "targetFormula": "(!fb:fictional_universe.work_of_fiction.setting fb:en.the_magicians_nephew)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dy6y fb:fictional_universe.work_of_fiction.setting ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the setting of the magician_s nephew", 
    "id": 438
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.high_court_of_australia fb:law.court.founded ?x1 } LIMIT 9999", 
    "result": [
      "1901"
    ], 
    "targetFormula": "(!fb:law.court.founded fb:en.high_court_of_australia)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01tm9w fb:law.court.founded ?x1 } LIMIT 9999", 
    "utterance": "when was the high court of australia founded", 
    "id": 439
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.motor_neuron_disease fb:medicine.disease.symptoms ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Spasticity", 
      "Muscle weakness", 
      "Muscle atrophy"
    ], 
    "targetFormula": "(!fb:medicine.disease.symptoms fb:en.motor_neuron_disease)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0kh3 fb:medicine.disease.symptoms ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the symptoms of motor neuron disease", 
    "id": 440
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0b66f5g fb:physics.subatomic_particle_generation.particles ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:physics.subatomic_particle_generation.particles fb:m.0b66f5g))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0b66f5g fb:physics.subatomic_particle_generation.particles ?x1 } } } LIMIT 9999", 
    "utterance": "how many first generation particles are there", 
    "id": 441
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:boxing.match_boxer_relationship.match fb:en.the_battle_of_the_champions . FILTER (?x1 != fb:en.the_battle_of_the_champions) . ?x1 fb:boxing.match_boxer_relationship.boxer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Aaron Pryor", 
      "Alexis Arg\u00fcello"
    ], 
    "targetFormula": "(!fb:boxing.match_boxer_relationship.boxer ((lambda x (fb:boxing.match_boxer_relationship.match (var x))) fb:en.the_battle_of_the_champions))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:boxing.match_boxer_relationship.match fb:m.0kvlz . FILTER (?x1 != fb:m.0kvlz) . ?x1 fb:boxing.match_boxer_relationship.boxer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who fought in the the battle of the champions", 
    "id": 442
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lil_hardin_armstrong fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jazz"
    ], 
    "targetFormula": "(!fb:music.artist.genre fb:en.lil_hardin_armstrong)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01ggms fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genre did lil hardin armstrong represent", 
    "id": 443
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.shaquille_oneal fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.shaquille_oneal))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.012xdf fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many nicknames does shaquille o'neal have", 
    "id": 444
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.alan_shepard fb:spaceflight.astronaut.space_time_minutes ?x1 } LIMIT 9999", 
    "result": [
      "13017"
    ], 
    "targetFormula": "(!fb:spaceflight.astronaut.space_time_minutes fb:en.alan_shepard)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0h2_l fb:spaceflight.astronaut.space_time_minutes ?x1 } LIMIT 9999", 
    "utterance": "how much time did alan shepard spend in space", 
    "id": 445
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_gross_clinic fb:exhibitions.exhibit.exhibitions_displayed_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Thomas Eakins' The Gross Clinic", 
      "An Eakins Masterpiece Restored: Seeing The Gross Clinic Anew"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibit.exhibitions_displayed_in fb:en.the_gross_clinic)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dy5fh fb:exhibitions.exhibit.exhibitions_displayed_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what exhibitions has the gross clinic been in", 
    "id": 446
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.frank_lloyd_wright fb:architecture.architect.structures_designed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "J.A. Sweeton Residence", 
      "P. D. Hoyt House", 
      "Andrew B. Cooke House", 
      "Howard E. Anthony Residence", 
      "Harold C. Price Sr. House", 
      "Herbert Jacobs Second House", 
      "Russell and Ruth Goetz Kraus House", 
      "B. Harley Bradley House", 
      "Robert H. Sunday House", 
      "City National Bank Building", 
      "Paul J. and Ida Trier House", 
      "Carroll Alsop House", 
      "Douglas and Charlotte Grant House", 
      "Jack Lamberson House", 
      "Imperial Hotel, Tokyo", 
      "John D. Haynes House", 
      "Quintin Blair House", 
      "Robert M. Lamp House", 
      "Henry J. Allen House", 
      "Yodok\u014d Guest House", 
      "River Forest Historic District", 
      "Westhope", 
      "Rowing Boathouse", 
      "Gregor S. and Elizabeth B. Affleck House", 
      "Rayward-Shepherd House", 
      "Solomon R. Guggenheim Museum", 
      "Frank Thomas House", 
      "Kentuck Knob", 
      "Mary W. Adams House", 
      "George Madison Millard House", 
      "Dr. Kenneth L. Meyers Medical Clinic", 
      "The Last Wright: Frank Lloyd Wright and the Park Inn Hotel", 
      "Gerald B. and Beverley Tonkens House", 
      "Fountainhead", 
      "Fallingwater", 
      "Francis W. Little House", 
      "Auldbrass Plantation", 
      "Old Brass", 
      "Charles A. Brown House", 
      "Broad Margin", 
      "Dr. R. Bradford Harper Residence", 
      "Dr. Robert and Mary Walton House", 
      "Wilbur Wynant House", 
      "Larkin Administration Building", 
      "Willits House", 
      "Andrew F. H. Armstrong House", 
      "James McBean Residence", 
      "Horse Show Fountain", 
      "Stephen M. B. Hunt House I", 
      "Beth Sholom Congregation", 
      "Frank Sander Residence", 
      "Laura Gale House", 
      "Marshall Erdman Prefab Houses", 
      "George Sturges House", 
      "Wayfarers Chapel", 
      "Louis Penfield House", 
      "Banff National Park Pavilion", 
      "Pettit Memorial Chapel", 
      "Gordon House", 
      "Thomas H. Gale Cottage", 
      "Malcolm Willey House", 
      "Rollin Furbeck House", 
      "E. H. Pitkin Cottage", 
      "Noman Lykes House", 
      "Taliesin West", 
      "Charles L. Manson House", 
      "Hanna\u2013Honeycomb House", 
      "Frank J. Baker House", 
      "Alvin Miller House", 
      "Nathan G. Moore House", 
      "E. Clarke and Julia Arnold House", 
      "Hollyhock House", 
      "David Weisblat House", 
      "Clarence Sondern House", 
      "Charles E. Roberts Stable", 
      "George W. Smith House", 
      "Lewis House", 
      "Sol Friedman House", 
      "Archie Teater Studio", 
      "Dr. Richard Davis House", 
      "Taliesin", 
      "Herbert and Katherine Jacobs Second House", 
      "Carlton D. Wall House", 
      "Laurel", 
      "Henry L. Kamphoefner House", 
      "Storer House", 
      "Samuel Freeman House", 
      "Mrs. A. W. Gridley House", 
      "Albert and Edith Adelman House", 
      "Frederick C. Bogk House", 
      "Ennis House", 
      "Hiram Baldwin House", 
      "Mosher House", 
      "Dr. G.C. Stockman House", 
      "William A. Glasner House", 
      "Eugene A. Gilmore House", 
      "Rev. Jesse R. Zeigler House", 
      "James Charnley House", 
      "Child of the Sun", 
      "Marin County Civic Center", 
      "Robert G. Emmond House", 
      "Judge Charles P. McCarthy House", 
      "Raymond Carlson Residence", 
      "Arthur Heurtley House", 
      "E. Arthur Davenport House", 
      "Park Inn Hotel", 
      "Meyer May House", 
      "Sherman M. Booth Cottage", 
      "Cedric G. and Patricia Boulter Residence", 
      "Joseph J. Bagley House", 
      "Walter V. Davidson House", 
      "Samara", 
      "Rookery Building", 
      "Ernest Vosburgh House", 
      "Kundert Medical Clinic", 
      "Richard C. Smith House", 
      "V. C. Morris Gift Shop", 
      "Unity Temple", 
      "Westcott House", 
      "George Furbeck House", 
      "Donald Schaberg House", 
      "Kenneth Laurent House", 
      "Fair Lane", 
      "Crystal Heights", 
      "A. D. German Warehouse", 
      "Community Christian Church", 
      "Wingspread", 
      "Blue Sky Mausoleum", 
      "Mrs. George Gerts Double House, Bridge Cottage", 
      "Guy C. Smith House", 
      "Suntop Homes", 
      "Baird House", 
      "Theodore Baird Residence", 
      "R. W. Lindholm Service Station", 
      "Seamour and Gerte Shavin House", 
      "Isadore H. Heller House", 
      "Johnson Wax Headquarters", 
      "Jiyu Gakuen Girls' School", 
      "Usonia Homes", 
      "William G. Fricke House", 
      "Duey and Julia Wright House", 
      "William R. Heath House", 
      "Pope-Leighey House", 
      "Warren McArthur House", 
      "Massaro House", 
      "Robert Llewellyn Wright House", 
      "William B. Greene House", 
      "Seth Peterson Cottage", 
      "Edward Serlin House", 
      "Millard House", 
      "Thomas P. Hardy House", 
      "Warren Hickox House", 
      "D. D. Martin House Complex", 
      "Arthur L. Richards Duplex Apartments", 
      "Fabyan Villa", 
      "Oscar A. Johnson House", 
      "Frank Lloyd Wright-Prairie School of Architecture Historic District", 
      "Walter Gale House", 
      "Peter A. Beachy House", 
      "Edward R. Hills House", 
      "Robert P. Parker House", 
      "Thomas H. Gale House", 
      "William H. Copeland House", 
      "Oscar B. Balch House", 
      "Edwin H. Cheney House", 
      "Francis J. Woolley House", 
      "Harrison P. Young House", 
      "Wright, Frank Lloyd, House and Studio", 
      "Lloyd Lewis House", 
      "Frank Lloyd Wright Home and Studio", 
      "William E. Martin House", 
      "Harry S. Adams House", 
      "Monona Terrace", 
      "S. A. Foster House and Stable", 
      "George Barton House", 
      "J. Kibben Ingalls House", 
      "Max Hoffman House", 
      "F.B. Henderson House", 
      "Frank L. Smith Bank", 
      "Herman T. Mossberg Residence", 
      "John Gillin Residence", 
      "River Forest Tennis Club", 
      "Carl E. Schultz House", 
      "Woodside", 
      "A. H. Bulbulian Residence", 
      "Edward E. Boynton House", 
      "First Unitarian Society of Madison", 
      "The Crimson Beech", 
      "Brandes House", 
      "Darwin D. Martin House", 
      "Jesse R. Zeigler House", 
      "E-Z Polish Factory", 
      "Abby Beecher Roberts House", 
      "William B. and Mary Shuford Palmer House", 
      "Goetsch-Winckler House", 
      "Melvyn Maxwell and Sara Stein Smith House", 
      "Dana-Thomas House State Historic Site", 
      "Curtis and Lillian Meyer House", 
      "James Charnley House", 
      "Robie House", 
      "Emil Bach House", 
      "Price Tower", 
      "Roloson Houses", 
      "F. F. Tomek House", 
      "Zimmerman House", 
      "Coonley House", 
      "John and Syd Dobkins House", 
      "Theodore A. Pappas House", 
      "H. P. Stutton House", 
      "First Unitarian Society Meetinghouse", 
      "Fasbender Clinic Building", 
      "Fred B. Jones Estate", 
      "Wilbur Wynant House", 
      "Maynard and Katharine Buehler House", 
      "Jorgine Boomer Residence", 
      "Herbert and Katherine Jacobs First House", 
      "Don M Stromquist House", 
      "Tan-Y-Deri", 
      "Randall Fawcett House", 
      "Erling P. Brauner Residence", 
      "Thomas Keys Residence", 
      "Robert D. Winn Residence", 
      "Gordon Strong Automobile Objective", 
      "Roland Reisley House", 
      "Edmund F. Brigham House", 
      "Rosenbaum House", 
      "Harry C. Goodrich House", 
      "Bernard Schwartz House", 
      "J. J. Walser, Jr. Residence", 
      "Nathan Rubin Residence", 
      "H. Howard Hyde House", 
      "Peter Goan House", 
      "Robert and Rae Levin House", 
      "Frieda and Henry J. Neils House", 
      "Edward P. Irving House", 
      "Lockridge Medical Clinic", 
      "Karl A. Staley House", 
      "K. C. DeRhodes House", 
      "Stuart Richardson House", 
      "James B. Christie House", 
      "Bachman-Wilson House", 
      "Winslow House", 
      "Eric and Pat Pratt House", 
      "Kraus House", 
      "Annunciation Greek Orthodox Church", 
      "New Orleans Union Station", 
      "James Edwards Residence", 
      "American System-Built Homes", 
      "David Wright Residence", 
      "Ingwald Moe House", 
      "Pilgrim Congregational Church", 
      "Samuel and Dorothy Eppstein House", 
      "Waller Apartments", 
      "Romeo and Juliet Windmill", 
      "Eric V. Brown Residence", 
      "Avery Coonley School Playhouse", 
      "William and Jessie M. Adams House", 
      "Raymond W. Evans House", 
      "Arthur Pieper Residence", 
      "George Blossom House", 
      "Anderton Court Shops", 
      "Tracy House", 
      "Lewis E. Burleigh House", 
      "Plan for Greater Baghdad", 
      "Walter Rudin House", 
      "Isabel Roberts House", 
      "Unity Chapel", 
      "Fasbender Clinic", 
      "Dudley Spencer House", 
      "Maynard Buehler House", 
      "Lawrence Memorial Library", 
      "ASU Gammage", 
      "Heller House", 
      "Weltzheimer/Johnson House", 
      "Ellis A. Feiman House", 
      "Louis Sullivan Bungalow", 
      "Abraham Lincoln Center", 
      "Chauncey L. Williams Residence", 
      "Dorothy H. Turkel House", 
      "Stephen M. B. Hunt House II", 
      "S. P. Elam Residence", 
      "Parkwyn Village", 
      "Benjamin Adelman Residence", 
      "Norman Lykes House", 
      "Eddie's House", 
      "Ravine Bluffs Development", 
      "Frederick D. Nichols House", 
      "Ben Rebhuhn House", 
      "W. Irving Clark House", 
      "Charles E. Roberts House", 
      "William Palmer Residence", 
      "Point Park Civic Center", 
      "Polymath Park", 
      "Marden House", 
      "Midway Gardens", 
      "Toufic H. Kalil House", 
      "Freeman House"
    ], 
    "targetFormula": "(!fb:architecture.architect.structures_designed fb:en.frank_lloyd_wright)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02wlk fb:architecture.architect.structures_designed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what structures did frank lloyd wright design", 
    "id": 447
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.computer_science fb:book.periodical_subject.periodicals ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "IEEE Transactions on Information Theory", 
      "IEEE Transactions on Software Engineering", 
      "Journal of Machine Learning Research", 
      "Electronic Notes in Theoretical Computer Science", 
      "Computational Linguistics", 
      "Electronic Letters on Computer Vision and Image Analysis", 
      "Journal of Automata, Languages and Combinatorics", 
      "Journal of Chemical Information and Modeling", 
      "Bell Labs Technical Journal", 
      "IJOE", 
      "Journal of Symbolic Computation", 
      "INFOCOMP Journal of Computer Science", 
      "Journal of Web Semantics", 
      "International Journal of Foundations of Computer Science", 
      "Theoretical Computer Science", 
      "IEEE Spectrum", 
      "Communications of the ACM", 
      "Journal of the ACM", 
      "Molecular Informatics", 
      "Artificial Intelligence", 
      "Performance Evaluation", 
      "Computer Graphics", 
      "IEEE Transactions on Computers", 
      "EURASIP Journal on Advances in Signal Processing", 
      "Journal of Statistical Software", 
      "Journal of Information Technology & Politics", 
      "Formal Aspects of Computing", 
      "Machine Learning", 
      "Theory of Computing", 
      "Scientific Computing & Instrumentation", 
      "Fundamenta Informaticae", 
      "IEEE Transactions on Pattern Analysis and Machine Intelligence", 
      "ALGOL Bulletin", 
      "IEEE Transactions on Evolutionary Computation", 
      "Kairos: A Journal of Rhetoric, Technology, and Pedagogy", 
      "ICGA Journal", 
      "Journal of Systems and Software", 
      "Journal of Functional Programming", 
      "ACM Transactions on Multimedia Computing, Communications, and Applications", 
      "Computer Underground Digest", 
      "IEEE MultiMedia", 
      "Software and Systems Modeling", 
      "Archives and Museum Informatics", 
      "Presence: Teleoperators & Virtual Environments", 
      "International Journal of Critical Computer-Based Systems", 
      "International Journal of Software and Informatics", 
      "IEEE Software", 
      "SIAM Journal on Computing", 
      "International Journal of e-Collaboration", 
      "ACM Transactions on Computer-Human Interaction", 
      "Journal of Computer-Mediated Communication", 
      "IEEE Micro", 
      "RISKS Digest", 
      "Software Testing, Verification & Reliability", 
      "Data Mining and Knowledge Discovery", 
      "Journal of Formalized Reasoning", 
      "Combinatorica", 
      "Algorithmica", 
      "International Journal of Computational Cognition", 
      "Program: Electronic Library and Information Systems", 
      "ACM Transactions on Database Systems", 
      "Journal of Artificial Intelligence Research", 
      "SIAM Journal on Scientific Computing", 
      "ReCALL", 
      "Journal of Computer and System Sciences", 
      "IEEE Annals of the History of Computing", 
      "Computer", 
      "Software Engineering Notes", 
      "The Computer Journal", 
      "Logical Methods in Computer Science", 
      "ACM Computing Reviews", 
      "HOOPLA!", 
      "Mobile Computing and Communications Review", 
      "ACM Transactions on Graphics", 
      "Journal of Multimedia", 
      "ACM SIGACT", 
      "Russian IT Quarterly", 
      "Innovations in Systems and Software Engineering", 
      "Computer Law & Security Review", 
      "The Journal of Object Technology", 
      "International Journal of Latest Trends in Multimedia Technologies", 
      "Journal of Cryptology"
    ], 
    "targetFormula": "(!fb:book.periodical_subject.periodicals fb:en.computer_science)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01mkq fb:book.periodical_subject.periodicals ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some periodicals on computer science", 
    "id": 448
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:rail.railway_operator_relationship.operator fb:en.london_overground . FILTER (?x1 != fb:en.london_overground) . ?x1 fb:rail.railway_operator_relationship.railway ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "North London Line", 
      "East London Line", 
      "West London Line", 
      "Gospel Oak to Barking Line"
    ], 
    "targetFormula": "(!fb:rail.railway_operator_relationship.railway ((lambda x (fb:rail.railway_operator_relationship.operator (var x))) fb:en.london_overground))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:rail.railway_operator_relationship.operator fb:m.0dfvhl . FILTER (?x1 != fb:m.0dfvhl) . ?x1 fb:rail.railway_operator_relationship.railway ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what lines does the london overground operate", 
    "id": 449
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.regular_tv_appearance.actor fb:en.jun_matsumoto . FILTER (?x1 != fb:en.jun_matsumoto) . ?x1 fb:tv.regular_tv_appearance.series fb:m.05f52tw . FILTER (?x1 != fb:m.05f52tw) . ?x1 fb:tv.regular_tv_appearance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Tsukasa Domyouji"
    ], 
    "targetFormula": "(!fb:tv.regular_tv_appearance.character (and ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.jun_matsumoto) ((lambda x (fb:tv.regular_tv_appearance.series (var x))) fb:m.05f52tw)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.regular_tv_appearance.actor fb:m.0621ss . FILTER (?x1 != fb:m.0621ss) . ?x1 fb:tv.regular_tv_appearance.series fb:m.05f52tw . FILTER (?x1 != fb:m.05f52tw) . ?x1 fb:tv.regular_tv_appearance.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who did jun matsumoto play in hana yori dango", 
    "id": 450
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_nomination.nominated_for fb:en.the_nutty_professor_1996 . FILTER (?x2 != fb:en.the_nutty_professor_1996) . ?x2 fb:award.award_nomination.award ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:award.award_nomination.award ((lambda x (fb:award.award_nomination.nominated_for (var x))) fb:en.the_nutty_professor_1996)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_nomination.nominated_for fb:m.0d87hc . FILTER (?x2 != fb:m.0d87hc) . ?x2 fb:award.award_nomination.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many nominations did nutty professor have", 
    "id": 451
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.the_x_men_1 fb:comic_books.comic_book_issue.cover_price ?x1 . ?x1 fb:measurement_unit.money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "0.12"
    ], 
    "targetFormula": "(!fb:measurement_unit.money_value.amount (!fb:comic_books.comic_book_issue.cover_price fb:en.the_x_men_1))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02hqp3h fb:comic_books.comic_book_issue.cover_price ?x1 . ?x1 fb:measurement_unit.money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what was the cover price of the x-men issue 1", 
    "id": 452
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.2_fast_2_furious fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2003-06-03"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.2_fast_2_furious)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.024lff fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "what is the release date for 2 fast 2 furious", 
    "id": 453
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.canadian_dollar fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "CAD"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.canadian_dollar)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0ptk_ fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the canadian dollar", 
    "id": 454
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.girl_scouts_of_the_usa fb:business.brand.products ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:business.brand.products fb:en.girl_scouts_of_the_usa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01r3kd fb:business.brand.products ?x1 } } } LIMIT 9999", 
    "utterance": "how many different products does gsusa produce", 
    "id": 455
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.delaware fb:military.military_unit_place_of_origin.military_units ?x1 } } } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(count (!fb:military.military_unit_place_of_origin.military_units fb:en.delaware))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.026mj fb:military.military_unit_place_of_origin.military_units ?x1 } } } LIMIT 9999", 
    "utterance": "how many military units originated in delaware", 
    "id": 456
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.stratus fb:meteorology.cloud.maximum_altitude_m ?x1 } LIMIT 9999", 
    "result": [
      "2000"
    ], 
    "targetFormula": "(!fb:meteorology.cloud.maximum_altitude_m fb:en.stratus)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.016873 fb:meteorology.cloud.maximum_altitude_m ?x1 } LIMIT 9999", 
    "utterance": "what is the maximum altitude of stratus clouds", 
    "id": 457
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.beaver fb:education.school_mascot.school ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:education.school_mascot.school fb:en.beaver))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01dw9 fb:education.school_mascot.school ?x1 } } } LIMIT 9999", 
    "utterance": "how many schools have a beaver as their mascot", 
    "id": 458
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.regular_tv_appearance.series fb:en.sesame_street . FILTER (?x1 != fb:en.sesame_street) . ?x1 fb:tv.regular_tv_appearance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Sonia Manzano", 
      "Jim Henson", 
      "Kevin Clash", 
      "Frank Oz", 
      "Leslie Carrara-Rudolph", 
      "Pam Arciero", 
      "Martin P. Robinson", 
      "Richard Hunt", 
      "Caroll Spinney", 
      "David Rudman", 
      "Roscoe Orman", 
      "Fran Brill", 
      "Dave Goelz", 
      "Joey Mazzarino", 
      "Emilio Delgado", 
      "Linda Bove", 
      "Jerry Nelson", 
      "Bob McGrath", 
      "Loretta Long", 
      "Eric Jacobson"
    ], 
    "targetFormula": "(!fb:tv.regular_tv_appearance.actor ((lambda x (fb:tv.regular_tv_appearance.series (var x))) fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.regular_tv_appearance.series fb:m.0cwrr . FILTER (?x1 != fb:m.0cwrr) . ?x1 fb:tv.regular_tv_appearance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the main cast members of sesame street", 
    "id": 459
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.singapore_dollar fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "SGD"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.singapore_dollar)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02f32g fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the singapore dollar", 
    "id": 460
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:base.politicalconventions.convention_speech.speaker fb:en.hillary_rodham_clinton . FILTER (?x1 != fb:en.hillary_rodham_clinton) . ?x1 fb:base.politicalconventions.convention_speech.venue ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:base.politicalconventions.convention_speech.venue ( (lambda x (fb:base.politicalconventions.convention_speech.speaker (var x))) fb:en.hillary_rodham_clinton))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:base.politicalconventions.convention_speech.speaker fb:m.0d06m5 . FILTER (?x1 != fb:m.0d06m5) . ?x1 fb:base.politicalconventions.convention_speech.venue ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what conventions has hillary clinton spoken at", 
    "id": 461
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.program fb:en.cbs_evening_news . FILTER (?x1 != fb:en.cbs_evening_news) . ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:en.co_host . FILTER (?x1 != fb:en.co_host) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1993\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1994\"^^xsd:datetime)) . ?x1 fb:tv.tv_regular_personal_appearance.from ?x2 . FILTER (?x1 != \"1993\"^^xsd:datetime) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Connie Chung"
    ], 
    "targetFormula": "(!fb:tv.tv_regular_personal_appearance.person (and (and ((lambda x (fb:tv.tv_regular_personal_appearance.program (var x))) fb:en.cbs_evening_news) ((lambda x (fb:tv.tv_regular_personal_appearance.appearance_type (var x))) fb:en.co_host)) ((lambda x (fb:tv.tv_regular_personal_appearance.from (var x))) (date 1993 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.program fb:m.01bndp . FILTER (?x1 != fb:m.01bndp) . ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:m.02kdrs1 . FILTER (?x1 != fb:m.02kdrs1) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1993\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1994\"^^xsd:datetime)) . ?x1 fb:tv.tv_regular_personal_appearance.from ?x2 . FILTER (?x1 != \"1993\"^^xsd:datetime) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was the cohost in 1993 on cbs evening news", 
    "id": 462
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.hurricane_ivan fb:meteorology.tropical_cyclone.affected_areas ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:meteorology.tropical_cyclone.affected_areas fb:en.hurricane_ivan))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03tn0n fb:meteorology.tropical_cyclone.affected_areas ?x1 } } } LIMIT 9999", 
    "utterance": "how many areas were affected by hurricane ivan", 
    "id": 463
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.rehab.celebrity fb:en.jerry_garcia . FILTER (?x1 != fb:en.jerry_garcia) . ?x1 fb:celebrities.rehab.rehab_facility ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Serenity Knolls", 
      "Betty Ford Center"
    ], 
    "targetFormula": "(!fb:celebrities.rehab.rehab_facility ((lambda x (fb:celebrities.rehab.celebrity (var x))) fb:en.jerry_garcia))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.rehab.celebrity fb:m.0k1bs . FILTER (?x1 != fb:m.0k1bs) . ?x1 fb:celebrities.rehab.rehab_facility ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what rehab facilities has jerry garcia gone to", 
    "id": 464
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.second_grade fb:education.grade_level.typical_age_minimum ?x1 } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(!fb:education.grade_level.typical_age_minimum fb:en.second_grade)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.042_bx fb:education.grade_level.typical_age_minimum ?x1 } LIMIT 9999", 
    "utterance": "at what age to kids usually start second grade", 
    "id": 465
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.collector fb:en.jay_leno . FILTER (?x2 != fb:en.jay_leno) . ?x2 fb:interests.collection.category fb:en.automobile . FILTER (?x2 != fb:en.automobile) . ?x2 fb:interests.collection.items ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:interests.collection.items (and ((lambda x (fb:interests.collection.collector (var x))) fb:en.jay_leno) ((lambda x (fb:interests.collection.category (var x))) fb:en.automobile))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.collector fb:m.046lt . FILTER (?x2 != fb:m.046lt) . ?x2 fb:interests.collection.category fb:m.0k4j . FILTER (?x2 != fb:m.0k4j) . ?x2 fb:interests.collection.items ?x1 } } } LIMIT 9999", 
    "utterance": "how many cars are in jay leno's car collection", 
    "id": 466
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.roman_catholicism fb:religion.religion.branched_into ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Anglicanism", 
      "Lutheranism", 
      "Protestantism"
    ], 
    "targetFormula": "(!fb:religion.religion.branched_into fb:en.roman_catholicism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0c8wxp fb:religion.religion.branched_into ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what religions branched from roman catholicism", 
    "id": 467
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tai_chi_chuan fb:martial_arts.martial_art.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Strike", 
      "Grappling", 
      "Internal"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_art.category fb:en.tai_chi_chuan)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07k4r fb:martial_arts.martial_art.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what category of martial arts is tai chi chuan", 
    "id": 468
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.final_fantasy fb:cvg.game_series.games_in_series ?x1 } } } LIMIT 9999", 
    "result": [
      "56"
    ], 
    "targetFormula": "(count (!fb:cvg.game_series.games_in_series fb:en.final_fantasy))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02ywx fb:cvg.game_series.games_in_series ?x1 } } } LIMIT 9999", 
    "utterance": "how many games are in the final fantasy series", 
    "id": 469
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.larry_bird fb:basketball.basketball_coach.season_wins ?x1 } LIMIT 9999", 
    "result": [
      "147"
    ], 
    "targetFormula": "(!fb:basketball.basketball_coach.season_wins fb:en.larry_bird)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fbbl fb:basketball.basketball_coach.season_wins ?x1 } LIMIT 9999", 
    "utterance": "how many wins has larry bird had in his career", 
    "id": 470
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bruce_almighty fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Judy L. Ruskin"
    ], 
    "targetFormula": "(!fb:film.film.costume_design_by fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01jft4 fb:film.film.costume_design_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the costume designer for bruce almighty", 
    "id": 471
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.matthew_hayden fb:cricket.cricket_bowler.technique ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Seam bowling"
    ], 
    "targetFormula": "(!fb:cricket.cricket_bowler.technique fb:en.matthew_hayden)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0291sp fb:cricket.cricket_bowler.technique ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what bowling technique does matthew hayden use", 
    "id": 472
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.university_of_oxford fb:fictional_universe.school_in_fiction.students_graduates ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Catsmeat Potter-Pirbright", 
      "Tom Brown", 
      "Professor X", 
      "Inspector Morse"
    ], 
    "targetFormula": "(!fb:fictional_universe.school_in_fiction.students_graduates fb:en.university_of_oxford)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07tgn fb:fictional_universe.school_in_fiction.students_graduates ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what fictional characters have attended oxford", 
    "id": 473
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.first_generation_ford_mustang fb:automotive.generation.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lee Iacocca", 
      "Larry Shinoda"
    ], 
    "targetFormula": "(!fb:automotive.generation.designer fb:en.first_generation_ford_mustang)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02k_k6k fb:automotive.generation.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the first generation ford mustang", 
    "id": 474
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.046chvq fb:exhibitions.exhibition.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Climate change"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibition.subjects fb:m.046chvq)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.046chvq fb:exhibitions.exhibition.subjects ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the science of survival exhibit about", 
    "id": 475
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.iceman fb:comic_books.comic_book_character.cover_appearances ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The X-Men #1", 
      "The X-Men #2", 
      "X-Men #4"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_character.cover_appearances fb:en.iceman)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03zw5 fb:comic_books.comic_book_character.cover_appearances ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "which issues of x-men have iceman on the cover", 
    "id": 476
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.to_kill_a_mockingbird fb:book.book.characters ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atticus Finch", 
      "Jem Finch", 
      "Scout Finch", 
      "Dill Harris", 
      "Boo Radley", 
      "Mayella Violet Ewell", 
      "Tom Robinson", 
      "Maudie Atkinson", 
      "Calpurnia", 
      "Robert Ewell", 
      "Alexandra Hancock"
    ], 
    "targetFormula": "(!fb:book.book.characters fb:en.to_kill_a_mockingbird)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jqbz fb:book.book.characters ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are the characters in to kill a mockingbird", 
    "id": 477
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0hgwnr4 fb:automotive.trim_level.msrp ?x1 . ?x1 fb:measurement_unit.money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "22045"
    ], 
    "targetFormula": "(!fb:measurement_unit.money_value.amount (!fb:automotive.trim_level.msrp fb:m.0hgwnr4))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0hgwnr4 fb:automotive.trim_level.msrp ?x1 . ?x1 fb:measurement_unit.money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "what is the price of a 2012 jeep wrangler sport", 
    "id": 478
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.africa fb:location.location.events ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "World War II", 
      "World War I", 
      "Seven Years' War", 
      "United States Exploring Expedition", 
      "Sulla's second civil war", 
      "Caesar's Civil War", 
      "Blockade of Africa", 
      "Taking Back the Cities Tour", 
      "KylieX2009", 
      "African Slave Trade Patrol", 
      "Battle of Guinea", 
      "British Expedition to Abyssinia"
    ], 
    "targetFormula": "(!fb:location.location.events fb:en.africa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dg3n1 fb:location.location.events ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what major events in history happened in africa", 
    "id": 479
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.adrienne_roy fb:comic_books.comic_book_colorist.comic_stories_colored ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:comic_books.comic_book_colorist.comic_stories_colored fb:en.adrienne_roy))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.09fw6v fb:comic_books.comic_book_colorist.comic_stories_colored ?x1 } } } LIMIT 9999", 
    "utterance": "how many comic stories has adrienne roy colored", 
    "id": 480
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.us_route_101 fb:transportation.road.highway_system ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "US Numbered Highways"
    ], 
    "targetFormula": "(!fb:transportation.road.highway_system fb:en.us_route_101)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0j9xz fb:transportation.road.highway_system ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what highway system does us route 101 belong to", 
    "id": 481
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.motorola fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:en.motorola) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 } LIMIT 9999", 
    "result": [
      "2008-12-31", 
      "2006-12-31", 
      "1960", 
      "2007", 
      "2000", 
      "1990", 
      "1970", 
      "1980", 
      "1955"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.valid_date ((lambda x (!fb:business.business_operation.revenue (var x))) fb:en.motorola))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0537b fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:m.0537b) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 } LIMIT 9999", 
    "utterance": "in what year did motorola have the most revenue", 
    "id": 482
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.united_nations fb:common.topic.alias ?x1 } LIMIT 9999", 
    "result": [
      "UN", 
      "Nations-Unies", 
      "U.N.", 
      "United Nations Staff"
    ], 
    "targetFormula": "(!fb:common.topic.alias fb:en.united_nations)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07t65 fb:common.topic.alias ?x1 } LIMIT 9999", 
    "utterance": "what other names is the united nations known by", 
    "id": 483
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.supreme_court_of_the_united_states fb:law.court.legal_cases ?x1 } } } LIMIT 9999", 
    "result": [
      "942"
    ], 
    "targetFormula": "(count (!fb:law.court.legal_cases fb:en.supreme_court_of_the_united_states))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07sz1 fb:law.court.legal_cases ?x1 } } } LIMIT 9999", 
    "utterance": "how many us supreme court cases have there been", 
    "id": 484
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.prostate_cancer fb:medicine.disease.survival_rates ?x1 . FILTER (?x1 != fb:en.prostate_cancer) . ?x1 fb:medicine.survival_rate.rate ?x2 } LIMIT 9999", 
    "result": [
      "100", 
      "89", 
      "37"
    ], 
    "targetFormula": "(!fb:medicine.survival_rate.rate ((lambda x (!fb:medicine.disease.survival_rates (var x))) fb:en.prostate_cancer))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0m32h fb:medicine.disease.survival_rates ?x1 . FILTER (?x1 != fb:m.0m32h) . ?x1 fb:medicine.survival_rate.rate ?x2 } LIMIT 9999", 
    "utterance": "what are the survival rates for prostate cancer", 
    "id": 485
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.the_catcher_in_the_rye fb:book.written_work.date_of_first_publication ?x1 } LIMIT 9999", 
    "result": [
      "1951-07-16"
    ], 
    "targetFormula": "(!fb:book.written_work.date_of_first_publication fb:en.the_catcher_in_the_rye)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.019g32 fb:book.written_work.date_of_first_publication ?x1 } LIMIT 9999", 
    "utterance": "when was the catcher in the rye first published", 
    "id": 486
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.jerry_seinfeld fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.jerry_seinfeld))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0q5hw fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names is jerry seinfeld known by", 
    "id": 487
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0h33xbs fb:automotive.trim_level.engine ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ferrari 4.3L 8 Cylinder 460 hp 357 ft-lbs"
    ], 
    "targetFormula": "(!fb:automotive.trim_level.engine fb:m.0h33xbs)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0h33xbs fb:automotive.trim_level.engine ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the engine in a 2010 ferrari california", 
    "id": 488
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.kirkstall_abbey fb:religion.monastery.religious_order ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cistercians"
    ], 
    "targetFormula": "(!fb:religion.monastery.religious_order fb:en.kirkstall_abbey)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d00l fb:religion.monastery.religious_order ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what religious order belongs to kirkstall abbey", 
    "id": 489
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.september_11_2001_attacks fb:event.disaster.structures_destroyed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:event.disaster.structures_destroyed fb:en.september_11_2001_attacks)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d0vp3 fb:event.disaster.structures_destroyed ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what buildings were destroyed in september 11th", 
    "id": 490
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:military.military_command.military_conflict fb:en.american_civil_war . FILTER (?x2 != fb:en.american_civil_war) . ?x2 fb:military.military_command.military_commander ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:military.military_command.military_commander ((lambda x (fb:military.military_command.military_conflict (var x))) fb:en.american_civil_war)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:military.military_command.military_conflict fb:m.0kbq . FILTER (?x2 != fb:m.0kbq) . ?x2 fb:military.military_command.military_commander ?x1 } } } LIMIT 9999", 
    "utterance": "how many commanders were there in the civil war", 
    "id": 491
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.mathematics fb:conferences.conference_subject.series_of_conferences_about_this ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:conferences.conference_subject.series_of_conferences_about_this fb:en.mathematics))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.04rjg fb:conferences.conference_subject.series_of_conferences_about_this ?x1 } } } LIMIT 9999", 
    "utterance": "how many conferences about mathematics are there", 
    "id": 492
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.apollo_12 fb:spaceflight.space_mission.astronauts ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Pete Conrad", 
      "Alan Bean", 
      "Richard F. Gordon, Jr."
    ], 
    "targetFormula": "(!fb:spaceflight.space_mission.astronauts fb:en.apollo_12)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0vq4 fb:spaceflight.space_mission.astronauts ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who were the astronauts in the apollo 12 mission", 
    "id": 493
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.british_rail_class_52 fb:rail.locomotive_class.locomotives_of_this_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Western Leviathan", 
      "Western Musketeer", 
      "Western Huntsman", 
      "Western Empress", 
      "Western Advocate", 
      "Western Invader", 
      "Western Ruler", 
      "Western Ambassador", 
      "Western Lancer", 
      "Western Hussar", 
      "Western Legionnaire", 
      "Western Enterprise", 
      "Western Pathfinder", 
      "Western Explorer", 
      "Western Pioneer", 
      "Western Crusader", 
      "Western Venturer", 
      "Western Stalwart", 
      "Western Talisman", 
      "Western Harrier", 
      "Western Campaigner", 
      "Western Thunderer", 
      "Western Firebrand", 
      "Western Ranger", 
      "Western Champion", 
      "Western Gladiator", 
      "Western Warrior", 
      "Western Buccaneer", 
      "Western Challenger", 
      "Western Hero", 
      "Western Cavalier", 
      "Western Sentinel", 
      "Western Fusilier", 
      "Western Guardsman", 
      "Western Centurion", 
      "Western Rifleman", 
      "Western Trooper", 
      "Western Yeoman", 
      "Western Emperor", 
      "Western Sovereign", 
      "Western King", 
      "Western Queen", 
      "Western Prince", 
      "Western Princess", 
      "Western Duke", 
      "Western Duchess", 
      "Western Viscount", 
      "Western Marquis", 
      "Western Lady", 
      "Western Monarch", 
      "Western Patriarch", 
      "Western Governor", 
      "Western Sultan", 
      "Western Chieftain", 
      "Western Nobleman", 
      "Western Dominion", 
      "Western Envoy", 
      "Western Courier", 
      "Western Monitor", 
      "Western Regent", 
      "Western Consort", 
      "Western Prefect", 
      "Western Druid", 
      "Western Reliance", 
      "Western Vanguard", 
      "Western Gauntlet", 
      "Western Renown", 
      "Western Glory", 
      "Western Bulwark", 
      "Western Viceroy", 
      "Western Marksman", 
      "Western Lord", 
      "Western Dragoon", 
      "Western Empire"
    ], 
    "targetFormula": "(!fb:rail.locomotive_class.locomotives_of_this_class fb:en.british_rail_class_52)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02knn1 fb:rail.locomotive_class.locomotives_of_this_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some british locomotive class 52 trains", 
    "id": 494
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lowell_observatory fb:astronomy.astronomical_observatory.telescope_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Alvan Clark Telescope"
    ], 
    "targetFormula": "(!fb:astronomy.astronomical_observatory.telescope_s fb:en.lowell_observatory)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0kyyk fb:astronomy.astronomical_observatory.telescope_s ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what telescopes does the lowell observatory have", 
    "id": 495
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.pittsburgh_steelers fb:american_football.football_team.current_head_coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Mike Tomlin"
    ], 
    "targetFormula": "(!fb:american_football.football_team.current_head_coach fb:en.pittsburgh_steelers)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05tfm fb:american_football.football_team.current_head_coach ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the head coach of the pittsburgh steelers", 
    "id": 496
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.prostate_cancer fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "5"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.prostate_cancer))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0m32h fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names is prostate cancer known as", 
    "id": 497
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.metamorphic_rock fb:geology.rock_type.sub_types ?x1 } } } LIMIT 9999", 
    "result": [
      "22"
    ], 
    "targetFormula": "(count (!fb:geology.rock_type.sub_types fb:en.metamorphic_rock))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0c3c0 fb:geology.rock_type.sub_types ?x1 } } } LIMIT 9999", 
    "utterance": "how many sub-types of metamorphic rock are there", 
    "id": 498
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.lux_radio_theater fb:radio.radio_program.final_broadcast ?x1 } LIMIT 9999", 
    "result": [
      "1955-06-07"
    ], 
    "targetFormula": "(!fb:radio.radio_program.final_broadcast fb:en.lux_radio_theater)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.050jm8 fb:radio.radio_program.final_broadcast ?x1 } LIMIT 9999", 
    "utterance": "what was the final air date of lux radio theater", 
    "id": 499
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:book.periodical_publisher_period.periodical fb:en.journal_of_abnormal_psychology . FILTER (?x1 != fb:en.journal_of_abnormal_psychology) . ?x1 fb:book.periodical_publisher_period.publisher ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "American Psychological Association"
    ], 
    "targetFormula": "(!fb:book.periodical_publisher_period.publisher ( (lambda x (fb:book.periodical_publisher_period.periodical (var x))) fb:en.journal_of_abnormal_psychology))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:book.periodical_publisher_period.periodical fb:m.0285mbn . FILTER (?x1 != fb:m.0285mbn) . ?x1 fb:book.periodical_publisher_period.publisher ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who publishes the journal of abnormal psychology", 
    "id": 500
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_nutty_professor_1996 fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Tom Shadyac", 
      "Steve Oedekerk", 
      "David Sheffield", 
      "Barry W. Blaustein"
    ], 
    "targetFormula": "(!fb:film.film.written_by fb:en.the_nutty_professor_1996)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d87hc fb:film.film.written_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who is the screenplay for the nutty professor by", 
    "id": 501
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.nathanael_herreshoff fb:boats.ship_designer.boats_designed ?x1 } } } LIMIT 9999", 
    "result": [
      "5"
    ], 
    "targetFormula": "(count (!fb:boats.ship_designer.boats_designed fb:en.nathanael_herreshoff))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.07cgny fb:boats.ship_designer.boats_designed ?x1 } } } LIMIT 9999", 
    "utterance": "how many ships has nathanael herreshoff designed", 
    "id": 502
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.socrates fb:influence.influence_node.influenced ?x1 } } } LIMIT 9999", 
    "result": [
      "20"
    ], 
    "targetFormula": "(count (!fb:influence.influence_node.influenced fb:en.socrates))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.06mrq fb:influence.influence_node.influenced ?x1 } } } LIMIT 9999", 
    "utterance": "how many people have been influenced by socrates", 
    "id": 503
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.4_cylinder fb:automotive.engine.fuels_used ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Gasoline", 
      "Diesel fuel"
    ], 
    "targetFormula": "(!fb:automotive.engine.fuels_used fb:en.4_cylinder)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03n8n29 fb:automotive.engine.fuels_used ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what types of fuel does a 4 cylinder engine take", 
    "id": 504
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_nomination.award_nominee fb:en.danny_devito . FILTER (?x2 != fb:en.danny_devito) . ?x2 fb:award.award_nomination.award ?x1 } } } LIMIT 9999", 
    "result": [
      "32"
    ], 
    "targetFormula": "(count (!fb:award.award_nomination.award ((lambda x (fb:award.award_nomination.award_nominee (var x))) fb:en.danny_devito)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_nomination.award_nominee fb:m.0q9kd . FILTER (?x2 != fb:m.0q9kd) . ?x2 fb:award.award_nomination.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many award nominations did danny devito have", 
    "id": 505
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.internal_combustion_engine fb:engineering.engine.energy_source ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:engineering.engine.energy_source fb:en.internal_combustion_engine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03tpm fb:engineering.engine.energy_source ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what fuel does an internal combustion engine use", 
    "id": 506
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.africa fb:base.dinosaur.dinosaur_location.dinosaur_s ?x1 } } } LIMIT 9999", 
    "result": [
      "67"
    ], 
    "targetFormula": "(count (!fb:base.dinosaur.dinosaur_location.dinosaur_s fb:en.africa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0dg3n1 fb:base.dinosaur.dinosaur_location.dinosaur_s ?x1 } } } LIMIT 9999", 
    "utterance": "how many types of dinosaurs were there in africa", 
    "id": 507
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.earth fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.earth) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "1500000000", 
      "1650000000", 
      "2519000000", 
      "1262000000", 
      "200000000", 
      "3134442541", 
      "3040197182", 
      "3081388863", 
      "3199390561", 
      "3264900618", 
      "3331758502", 
      "3401814566", 
      "3471602206", 
      "3542131429", 
      "3616683610", 
      "3691696231", 
      "3768664045", 
      "3844845817", 
      "3920059440", 
      "3996100830", 
      "4144149614", 
      "4217583144", 
      "4292564634", 
      "4369283186", 
      "4446509520", 
      "4525211935", 
      "4606764747", 
      "4688765928", 
      "4770443389", 
      "4853948076", 
      "4940216419", 
      "5028661457", 
      "5117852621", 
      "5206596300", 
      "5383011907", 
      "5465646081", 
      "5548906924", 
      "5631063822", 
      "5714716950", 
      "5796196182", 
      "5877983064", 
      "5958950337", 
      "6038635376", 
      "6118131162", 
      "6426093254", 
      "6195665261", 
      "6272454870", 
      "6349177990", 
      "6503186030", 
      "6580545179", 
      "6737188032", 
      "6894377794", 
      "4070903396", 
      "6658468720", 
      "6815849599", 
      "6973738433", 
      "7057075000", 
      "5296211383"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.earth))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02j71 fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.02j71) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population of the people on the earth", 
    "id": 508
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2000\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2001\"^^xsd:datetime)) . ?x1 fb:award.ranking.year ?x2 . FILTER (?x1 != \"2000\"^^xsd:datetime) . ?x1 fb:award.ranking.list fb:en.fortune_500 . FILTER (?x1 != fb:en.fortune_500) . ?x1 fb:award.ranking.item fb:en.monsanto . FILTER (?x1 != fb:en.monsanto) . ?x1 fb:award.ranking.rank ?x3 } LIMIT 9999", 
    "result": [
      "54", 
      "70"
    ], 
    "targetFormula": "(!fb:award.ranking.rank (and (and ((lambda x (fb:award.ranking.year (var x))) (date 2000 -1 -1)) ((lambda x (fb:award.ranking.list (var x))) fb:en.fortune_500)) ((lambda x (fb:award.ranking.item (var x))) fb:en.monsanto)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2000\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2001\"^^xsd:datetime)) . ?x1 fb:award.ranking.year ?x2 . FILTER (?x1 != \"2000\"^^xsd:datetime) . ?x1 fb:award.ranking.list fb:m.01pd60 . FILTER (?x1 != fb:m.01pd60) . ?x1 fb:award.ranking.item fb:m.0n8m6 . FILTER (?x1 != fb:m.0n8m6) . ?x1 fb:award.ranking.rank ?x3 } LIMIT 9999", 
    "utterance": "where did monsanto rank on the forune 500 in 2000", 
    "id": 509
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:fashion.designer_label_association.designer fb:en.martin_margiela . FILTER (?x1 != fb:en.martin_margiela) . ?x1 fb:fashion.designer_label_association.label fb:m.06dr8q . FILTER (?x1 != fb:m.06dr8q) . ?x1 fb:fashion.designer_label_association.from_date ?x2 } LIMIT 9999", 
    "result": [
      "1997"
    ], 
    "targetFormula": "(!fb:fashion.designer_label_association.from_date (and ((lambda x (fb:fashion.designer_label_association.designer (var x))) fb:en.martin_margiela) ((lambda x (fb:fashion.designer_label_association.label (var x))) fb:m.06dr8q)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:fashion.designer_label_association.designer fb:m.0fhhnk . FILTER (?x1 != fb:m.0fhhnk) . ?x1 fb:fashion.designer_label_association.label fb:m.06dr8q . FILTER (?x1 != fb:m.06dr8q) . ?x1 fb:fashion.designer_label_association.from_date ?x2 } LIMIT 9999", 
    "utterance": "when did martin margiela start designing for herm", 
    "id": 510
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2004\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2005\"^^xsd:datetime)) . ?x1 fb:soccer.football_team_management_tenure.to ?x2 . FILTER (?x1 != \"2004\"^^xsd:datetime) . ?x1 fb:soccer.football_team_management_tenure.team fb:en.liverpool_fc . FILTER (?x1 != fb:en.liverpool_fc) . ?x1 fb:soccer.football_team_management_tenure.manager ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "G\u00e9rard Houllier"
    ], 
    "targetFormula": "(!fb:soccer.football_team_management_tenure.manager (and ((lambda x (fb:soccer.football_team_management_tenure.to (var x))) (date 2004 -1 -1)) ((lambda x (fb:soccer.football_team_management_tenure.team (var x))) fb:en.liverpool_fc)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2004\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2005\"^^xsd:datetime)) . ?x1 fb:soccer.football_team_management_tenure.to ?x2 . FILTER (?x1 != \"2004\"^^xsd:datetime) . ?x1 fb:soccer.football_team_management_tenure.team fb:m.04ltf . FILTER (?x1 != fb:m.04ltf) . ?x1 fb:soccer.football_team_management_tenure.manager ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who managed liverpool f.c. from 2004 to june 2010", 
    "id": 511
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_network_duration.program fb:en.gilligans_island . FILTER (?x1 != fb:en.gilligans_island) . ?x1 fb:tv.tv_network_duration.network ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "CBS"
    ], 
    "targetFormula": "(!fb:tv.tv_network_duration.network ((lambda x (fb:tv.tv_network_duration.program (var x))) fb:en.gilligans_island))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_network_duration.program fb:m.0m0sm . FILTER (?x1 != fb:m.0m0sm) . ?x1 fb:tv.tv_network_duration.network ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "on what network was gilligan_s island first aired", 
    "id": 512
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.blogtalkradio fb:broadcast.distributor.distributes ?x1 } } } LIMIT 9999", 
    "result": [
      "16"
    ], 
    "targetFormula": "(count (!fb:broadcast.distributor.distributes fb:en.blogtalkradio))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02641q0 fb:broadcast.distributor.distributes ?x1 } } } LIMIT 9999", 
    "utterance": "how many broadcasts does blogtalkradio distribute", 
    "id": 513
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.sean_miller_1968 fb:basketball.basketball_coach.season_losses ?x1 } LIMIT 9999", 
    "result": [
      "47"
    ], 
    "targetFormula": "(!fb:basketball.basketball_coach.season_losses fb:en.sean_miller_1968)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02qwtlq fb:basketball.basketball_coach.season_losses ?x1 } LIMIT 9999", 
    "utterance": "how many losses has sean miller had in his career", 
    "id": 514
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.film_casting_director ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ellen Chenoweth"
    ], 
    "targetFormula": "(!fb:film.film.film_casting_director fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.film_casting_director ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who was the casting director for meet the parents", 
    "id": 515
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.iphone fb:computer.computing_platform.file_formats_supported ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "MP3", 
      "JPEG", 
      "Portable Network Graphics", 
      "Portable Document Format", 
      "Advanced Audio Coding", 
      "H.264/MPEG-4 AVC", 
      "Iii"
    ], 
    "targetFormula": "(!fb:computer.computing_platform.file_formats_supported fb:en.iphone)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.027lnzs fb:computer.computing_platform.file_formats_supported ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the file formats supported by the iphone", 
    "id": 516
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:law.judicial_tenure.court fb:en.high_court_of_justice . FILTER (?x2 != fb:en.high_court_of_justice) . ?x2 fb:law.judicial_tenure.judge ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:law.judicial_tenure.judge ((lambda x (fb:law.judicial_tenure.court (var x))) fb:en.high_court_of_justice)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:law.judicial_tenure.court fb:m.02rc3p . FILTER (?x2 != fb:m.02rc3p) . ?x2 fb:law.judicial_tenure.judge ?x1 } } } LIMIT 9999", 
    "utterance": "how many judges has the high court of justice had", 
    "id": 517
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:opera.opera_character_voice.opera fb:en.tristan_und_isolde . FILTER (?x1 != fb:en.tristan_und_isolde) . ?x1 fb:opera.opera_character_voice.voice fb:en.crystal_clear_soprano . FILTER (?x1 != fb:en.crystal_clear_soprano) . ?x1 fb:opera.opera_character_voice.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Iseult", 
      "Brangane"
    ], 
    "targetFormula": "(!fb:opera.opera_character_voice.character (and ((lambda x (fb:opera.opera_character_voice.opera (var x))) fb:en.tristan_und_isolde) ((lambda x (fb:opera.opera_character_voice.voice (var x))) fb:en.crystal_clear_soprano)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:opera.opera_character_voice.opera fb:m.09jh5 . FILTER (?x1 != fb:m.09jh5) . ?x1 fb:opera.opera_character_voice.voice fb:m.0j210 . FILTER (?x1 != fb:m.0j210) . ?x1 fb:opera.opera_character_voice.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what characters sing soprano in tristan and isolde", 
    "id": 518
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.haunted_mansion fb:amusement_parks.ride.duration ?x1 } LIMIT 9999", 
    "result": [
      "600"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.duration fb:en.haunted_mansion)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01p79p fb:amusement_parks.ride.duration ?x1 } LIMIT 9999", 
    "utterance": "how long is the haunted mansion ride at disneyland", 
    "id": 519
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:en.newscaster . FILTER (?x1 != fb:en.newscaster) . ?x1 fb:tv.tv_regular_personal_appearance.program fb:en.cbs_evening_news . FILTER (?x1 != fb:en.cbs_evening_news) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1948\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1949\"^^xsd:datetime)) . ?x1 fb:tv.tv_regular_personal_appearance.from ?x2 . FILTER (?x1 != \"1948\"^^xsd:datetime) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Douglas Edwards"
    ], 
    "targetFormula": "(!fb:tv.tv_regular_personal_appearance.person (and (and ((lambda x (fb:tv.tv_regular_personal_appearance.appearance_type (var x))) fb:en.newscaster) ((lambda x (fb:tv.tv_regular_personal_appearance.program (var x))) fb:en.cbs_evening_news)) ((lambda x (fb:tv.tv_regular_personal_appearance.from (var x))) (date 1948 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:m.025m070 . FILTER (?x1 != fb:m.025m070) . ?x1 fb:tv.tv_regular_personal_appearance.program fb:m.01bndp . FILTER (?x1 != fb:m.01bndp) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1948\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1949\"^^xsd:datetime)) . ?x1 fb:tv.tv_regular_personal_appearance.from ?x2 . FILTER (?x1 != \"1948\"^^xsd:datetime) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was the newscaster in 1948 on cbs evening news", 
    "id": 520
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:education.academic_post.person fb:en.marshall_hall . FILTER (?x1 != fb:en.marshall_hall) . ?x1 fb:education.academic_post.position_or_title fb:en.professor . FILTER (?x1 != fb:en.professor) . ?x1 fb:education.academic_post.institution ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "California Institute of Technology", 
      "Ohio State University"
    ], 
    "targetFormula": "(!fb:education.academic_post.institution (and ((lambda x (fb:education.academic_post.person (var x))) fb:en.marshall_hall) ((lambda x (fb:education.academic_post.position_or_title (var x))) fb:en.professor)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:education.academic_post.person fb:m.0ktbrq . FILTER (?x1 != fb:m.0ktbrq) . ?x1 fb:education.academic_post.position_or_title fb:m.016fly . FILTER (?x1 != fb:m.016fly) . ?x1 fb:education.academic_post.institution ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "at what institutions was marshall hall a professor", 
    "id": 521
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.henry_aaron fb:baseball.baseball_player.hall_of_fame_induction ?x1 } LIMIT 9999", 
    "result": [
      "1982-08-01"
    ], 
    "targetFormula": "(!fb:baseball.baseball_player.hall_of_fame_induction fb:en.henry_aaron)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03q8y fb:baseball.baseball_player.hall_of_fame_induction ?x1 } LIMIT 9999", 
    "utterance": "when was hank aaron inducted into the hall of fame", 
    "id": 522
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { ?x1 fb:award.ranking.list fb:en.fortune_500 . FILTER (?x1 != fb:en.fortune_500) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2010\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2011\"^^xsd:datetime)) . ?x1 fb:award.ranking.year ?x2 . FILTER (?x1 != \"2010\"^^xsd:datetime) . ?x1 fb:award.ranking.item fb:en.target_corporation . FILTER (?x1 != fb:en.target_corporation) . ?x1 fb:award.ranking.rank ?x3 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:award.ranking.rank (and (and ((lambda x (fb:award.ranking.list (var x))) fb:en.fortune_500) ((lambda x (fb:award.ranking.year (var x))) (date 2010 -1 -1))) ((lambda x (fb:award.ranking.item (var x))) fb:en.target_corporation)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { ?x1 fb:award.ranking.list fb:m.01pd60 . FILTER (?x1 != fb:m.01pd60) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2010\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2011\"^^xsd:datetime)) . ?x1 fb:award.ranking.year ?x2 . FILTER (?x1 != \"2010\"^^xsd:datetime) . ?x1 fb:award.ranking.item fb:m.01b39j . FILTER (?x1 != fb:m.01b39j) . ?x1 fb:award.ranking.rank ?x3 } LIMIT 9999", 
    "utterance": "what was target 's rank in the fortune 500 in 2010", 
    "id": 523
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.film fb:en.charlies_angels . FILTER (?x2 != fb:en.charlies_angels) . ?x2 fb:film.performance.character ?x1 } } } LIMIT 9999", 
    "result": [
      "13"
    ], 
    "targetFormula": "(count (!fb:film.performance.character ((lambda x (fb:film.performance.film (var x))) fb:en.charlies_angels)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.film fb:m.01y9jr . FILTER (?x2 != fb:m.01y9jr) . ?x2 fb:film.performance.character ?x1 } } } LIMIT 9999", 
    "utterance": "how many main characters did charlie_s angels have", 
    "id": 524
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.hubble_space_telescope fb:spaceflight.satellite.dry_mass_kg ?x1 } LIMIT 9999", 
    "result": [
      "11110"
    ], 
    "targetFormula": "(!fb:spaceflight.satellite.dry_mass_kg fb:en.hubble_space_telescope)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0b0m2 fb:spaceflight.satellite.dry_mass_kg ?x1 } LIMIT 9999", 
    "utterance": "what is the dry mass of the hubble space telescope", 
    "id": 525
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0j9by57 fb:library.public_library.address ?x1 . FILTER (?x1 != fb:m.0j9by57) . ?x1 fb:location.mailing_address.street_address ?x2 } LIMIT 9999", 
    "result": [
      "1449 Center Avenue"
    ], 
    "targetFormula": "(!fb:location.mailing_address.street_address ((lambda x (!fb:library.public_library.address (var x))) fb:m.0j9by57))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0j9by57 fb:library.public_library.address ?x1 . FILTER (?x1 != fb:m.0j9by57) . ?x1 fb:location.mailing_address.street_address ?x2 } LIMIT 9999", 
    "utterance": "what is the address of the mitchell public library", 
    "id": 526
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.jack_albertson . FILTER (?x2 != fb:en.jack_albertson) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.character ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.jack_albertson)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.0hw6_ . FILTER (?x2 != fb:m.0hw6_) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "utterance": "how many starring tv roles did jack albertson have", 
    "id": 527
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:media_common.dedication.dedicated_to fb:en.joseph_haydn . FILTER (?x2 != fb:en.joseph_haydn) . ?x2 fb:media_common.dedication.dedicated_by fb:en.wolfgang_amadeus_mozart . FILTER (?x2 != fb:en.wolfgang_amadeus_mozart) . ?x2 fb:media_common.dedication.work_dedicated ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:media_common.dedication.work_dedicated (and ((lambda x (fb:media_common.dedication.dedicated_to (var x))) fb:en.joseph_haydn) ((lambda x (fb:media_common.dedication.dedicated_by (var x))) fb:en.wolfgang_amadeus_mozart))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:media_common.dedication.dedicated_to fb:m.043d4 . FILTER (?x2 != fb:m.043d4) . ?x2 fb:media_common.dedication.dedicated_by fb:m.082db . FILTER (?x2 != fb:m.082db) . ?x2 fb:media_common.dedication.work_dedicated ?x1 } } } LIMIT 9999", 
    "utterance": "how many works did mozart dedicate to joseph haydn", 
    "id": 528
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.collins_class_submarine fb:boats.ship_class.max_speed_knots ?x1 } LIMIT 9999", 
    "result": [
      "21"
    ], 
    "targetFormula": "(!fb:boats.ship_class.max_speed_knots fb:en.collins_class_submarine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03dn33 fb:boats.ship_class.max_speed_knots ?x1 } LIMIT 9999", 
    "utterance": "what is the max speed of a collins class submarine", 
    "id": 529
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:aviation.aircraft_ownership_count.aircraft_model fb:en.f-5_freedom_fighter . FILTER (?x1 != fb:en.f-5_freedom_fighter) . ?x1 fb:aviation.aircraft_ownership_count.aircraft_owner ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "United States Navy", 
      "United States Air Force", 
      "Philippine Air Force", 
      "Brazilian Air Force", 
      "Vietnam Air Force"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_ownership_count.aircraft_owner ((lambda x (fb:aviation.aircraft_ownership_count.aircraft_model (var x))) fb:en.f-5_freedom_fighter))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:aviation.aircraft_ownership_count.aircraft_model fb:m.02_31 . FILTER (?x1 != fb:m.02_31) . ?x1 fb:aviation.aircraft_ownership_count.aircraft_owner ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what military branches use the f-5 freedom fighter", 
    "id": 530
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.a_dream_of_a_thousand_cats fb:comic_books.comic_book_issue.issue_number ?x1 } LIMIT 9999", 
    "result": [
      "18"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_issue.issue_number fb:en.a_dream_of_a_thousand_cats)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02_57r_ fb:comic_books.comic_book_issue.issue_number ?x1 } LIMIT 9999", 
    "utterance": "what issue of sandman is a dream of a thousand cats", 
    "id": 531
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.rehab.rehab_facility fb:en.betty_ford_center . FILTER (?x1 != fb:en.betty_ford_center) . ?x1 fb:celebrities.rehab.celebrity ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Stevie Nicks", 
      "Keith Urban", 
      "Jerry Garcia"
    ], 
    "targetFormula": "(!fb:celebrities.rehab.celebrity ((lambda x (fb:celebrities.rehab.rehab_facility (var x))) fb:en.betty_ford_center))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.rehab.rehab_facility fb:m.02dp0n . FILTER (?x1 != fb:m.02dp0n) . ?x1 fb:celebrities.rehab.celebrity ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what celebrities have gone to the betty ford center", 
    "id": 532
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.celebrity fb:en.lindsay_lohan . FILTER (?x2 != fb:en.lindsay_lohan) . ?x2 fb:celebrities.legal_entanglement.location ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:celebrities.legal_entanglement.location ((lambda x (fb:celebrities.legal_entanglement.celebrity (var x))) fb:en.lindsay_lohan)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.celebrity fb:m.01pgzn_ . FILTER (?x2 != fb:m.01pgzn_) . ?x2 fb:celebrities.legal_entanglement.location ?x1 } } } LIMIT 9999", 
    "utterance": "how many legal offences has lindsey lohan committed", 
    "id": 533
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:cvg.musical_game_song_relationship.game fb:en.guitar_hero_aerosmith . FILTER (?x2 != fb:en.guitar_hero_aerosmith) . ?x2 fb:cvg.musical_game_song_relationship.song ?x1 } } } LIMIT 9999", 
    "result": [
      "57"
    ], 
    "targetFormula": "(count (!fb:cvg.musical_game_song_relationship.song ((lambda x (fb:cvg.musical_game_song_relationship.game (var x))) fb:en.guitar_hero_aerosmith)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:cvg.musical_game_song_relationship.game fb:m.03nsxzp . FILTER (?x2 != fb:m.03nsxzp) . ?x2 fb:cvg.musical_game_song_relationship.song ?x1 } } } LIMIT 9999", 
    "utterance": "how many songs are there for guitar hero: aerosmith", 
    "id": 534
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.sinking_of_the_titanic fb:event.disaster.survivors ?x1 } } } LIMIT 9999", 
    "result": [
      "45"
    ], 
    "targetFormula": "(count (!fb:event.disaster.survivors fb:en.sinking_of_the_titanic))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.059ksb9 fb:event.disaster.survivors ?x1 } } } LIMIT 9999", 
    "utterance": "how many people survived the sinking of the titanic", 
    "id": 535
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:location.citytown fb:freebase.type_profile.equivalent_topic ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:freebase.type_profile.equivalent_topic fb:location.citytown))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:location.citytown fb:freebase.type_profile.equivalent_topic ?x1 } } } LIMIT 9999", 
    "utterance": "how many topics are equivalent to city/town/village", 
    "id": 536
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.indonesian_rupiah fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "IDR"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.indonesian_rupiah)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0203sy fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is the currency code for the indonesian rupiah", 
    "id": 537
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.detroit_public_library fb:library.public_library_system.collection_size ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:measurement_unit.dated_integer.number (!fb:library.public_library_system.collection_size fb:en.detroit_public_library)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.026_j8t fb:library.public_library_system.collection_size ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "utterance": "how many books does the detroit public library have", 
    "id": 538
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:sports.sports_team_roster.player fb:en.kevin_youkilis . FILTER (?x1 != fb:en.kevin_youkilis) . ?x1 fb:sports.sports_team_roster.team fb:en.boston_red_sox . FILTER (?x1 != fb:en.boston_red_sox) . ?x1 fb:sports.sports_team_roster.number ?x2 } LIMIT 9999", 
    "result": [
      "20"
    ], 
    "targetFormula": "(!fb:sports.sports_team_roster.number (and ((lambda x (fb:sports.sports_team_roster.player (var x))) fb:en.kevin_youkilis) ((lambda x (fb:sports.sports_team_roster.team (var x))) fb:en.boston_red_sox)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:sports.sports_team_roster.player fb:m.03l3rf . FILTER (?x1 != fb:m.03l3rf) . ?x1 fb:sports.sports_team_roster.team fb:m.01d5z . FILTER (?x1 != fb:m.01d5z) . ?x1 fb:sports.sports_team_roster.number ?x2 } LIMIT 9999", 
    "utterance": "what number is kevin youkilis on the boston red sox", 
    "id": 539
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:en.apple_inc fb:organization.organization.headquarters ?x1 . FILTER (?x1 != fb:en.apple_inc) . ?x1 fb:location.mailing_address.citytown ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Cupertino"
    ], 
    "targetFormula": "(!fb:location.mailing_address.citytown ((lambda x (!fb:organization.organization.headquarters (var x))) fb:en.apple_inc))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.0k8z fb:organization.organization.headquarters ?x1 . FILTER (?x1 != fb:m.0k8z) . ?x1 fb:location.mailing_address.citytown ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what is the address of the apple, inc. headquarters", 
    "id": 540
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.magic_kingdom fb:amusement_parks.park.annual_visits ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "17000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number (!fb:amusement_parks.park.annual_visits fb:en.magic_kingdom))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02mv6p fb:amusement_parks.park.annual_visits ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "how many visits does the magic kingdom get per year", 
    "id": 541
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:geology.geological_formation.formed_during_period fb:en.barremian . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lakota Formation"
    ], 
    "targetFormula": "(fb:geology.geological_formation.formed_during_period fb:en.barremian)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:geology.geological_formation.formed_during_period fb:m.02yvwr . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what rock formations formed in the barremian period", 
    "id": 542
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:olympics.olympic_medal_honor.medal fb:en.gold_medal . FILTER (?x2 != fb:en.gold_medal) . ?x2 fb:olympics.olympic_medal_honor.medalist ?x1 } } } LIMIT 9999", 
    "result": [
      "5602"
    ], 
    "targetFormula": "(count (!fb:olympics.olympic_medal_honor.medalist ((lambda x (fb:olympics.olympic_medal_honor.medal (var x))) fb:en.gold_medal)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:olympics.olympic_medal_honor.medal fb:m.02lpp7 . FILTER (?x2 != fb:m.02lpp7) . ?x2 fb:olympics.olympic_medal_honor.medalist ?x1 } } } LIMIT 9999", 
    "utterance": "how many athletes have gotten an olympic gold medal", 
    "id": 543
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:basketball.basketball_roster_position.team fb:en.washington_wizards . FILTER (?x1 != fb:en.washington_wizards) . ?x1 fb:basketball.basketball_roster_position.number 6.0 . FILTER (?x1 != 6.0) . ?x1 fb:basketball.basketball_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:basketball.basketball_roster_position.player (and ((lambda x (fb:basketball.basketball_roster_position.team (var x))) fb:en.washington_wizards) ((lambda x (fb:basketball.basketball_roster_position.number (var x))) (number 6.0 fb:en.unitless))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:basketball.basketball_roster_position.team fb:m.0jm5b . FILTER (?x1 != fb:m.0jm5b) . ?x1 fb:basketball.basketball_roster_position.number 6.0 . FILTER (?x1 != 6.0) . ?x1 fb:basketball.basketball_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is currently number 6 on the washington wizards", 
    "id": 544
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.straight_and_true fb:tv.tv_series_episode.writer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "David Simon", 
      "Ed Burns"
    ], 
    "targetFormula": "(!fb:tv.tv_series_episode.writer fb:en.straight_and_true)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0g28q4 fb:tv.tv_series_episode.writer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who wrote the episode straight and true of the wire", 
    "id": 545
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.order_of_the_golden_fleece fb:royalty.order_of_chivalry.motto ?x1 } LIMIT 9999", 
    "result": [
      "Pretium Laborum Non Vile"
    ], 
    "targetFormula": "(!fb:royalty.order_of_chivalry.motto fb:en.order_of_the_golden_fleece)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02q5pd fb:royalty.order_of_chivalry.motto ?x1 } LIMIT 9999", 
    "utterance": "what is the motto of the order of the golden fleece", 
    "id": 546
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.roller_soaker fb:amusement_parks.ride.height_restriction ?x1 } LIMIT 9999", 
    "result": [
      "1.0668"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.height_restriction fb:en.roller_soaker)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0gppsv fb:amusement_parks.ride.height_restriction ?x1 } LIMIT 9999", 
    "utterance": "what is the height restriction on the roller soaker", 
    "id": 547
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.jerry_seinfeld . FILTER (?x2 != fb:en.jerry_seinfeld) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.jerry_seinfeld)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.0q5hw . FILTER (?x2 != fb:m.0q5hw) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film performances does jerry seinfeld have", 
    "id": 548
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:travel.travel_destination_monthly_climate.travel_destination fb:en.sydney . FILTER (?x1 != fb:en.sydney) . ?x1 fb:travel.travel_destination_monthly_climate.month fb:en.august . FILTER (?x1 != fb:en.august) . ?x1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?x2 } LIMIT 9999", 
    "result": [
      "17"
    ], 
    "targetFormula": "(!fb:travel.travel_destination_monthly_climate.average_max_temp_c (and ((lambda x (fb:travel.travel_destination_monthly_climate.travel_destination (var x))) fb:en.sydney) ((lambda x (fb:travel.travel_destination_monthly_climate.month (var x))) fb:en.august)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:travel.travel_destination_monthly_climate.travel_destination fb:m.06y57 . FILTER (?x1 != fb:m.06y57) . ?x1 fb:travel.travel_destination_monthly_climate.month fb:m.0ll3 . FILTER (?x1 != fb:m.0ll3) . ?x1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?x2 } LIMIT 9999", 
    "utterance": "what is the average temperature in sydney in august", 
    "id": 549
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.tryptophan fb:biology.amino_acid.single_letter_abbreviation ?x1 } LIMIT 9999", 
    "result": [
      "W"
    ], 
    "targetFormula": "(!fb:biology.amino_acid.single_letter_abbreviation fb:en.tryptophan)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fzjh fb:biology.amino_acid.single_letter_abbreviation ?x1 } LIMIT 9999", 
    "utterance": "what is the single letter abreviation for tryptophan", 
    "id": 550
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.053x52 fb:tv.tv_program.program_creator ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Kevin Eastman", 
      "Peter Laird"
    ], 
    "targetFormula": "(!fb:tv.tv_program.program_creator fb:m.053x52)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.053x52 fb:tv.tv_program.program_creator ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who are the creators of teenage mutant ninja turtles", 
    "id": 551
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.united_states_presidential_election_1964 fb:government.election.winner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lyndon B. Johnson"
    ], 
    "targetFormula": "(!fb:government.election.winner fb:en.united_states_presidential_election_1964)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0b3fd fb:government.election.winner ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who won the 1964 united states presidential election", 
    "id": 552
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tempelhof_international_airport fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Berlin", 
      "Germany"
    ], 
    "targetFormula": "(!fb:location.location.containedby fb:en.tempelhof_international_airport)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01nxx6 fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is the tempelhof international airport located", 
    "id": 553
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.boston_molasses_disaster fb:event.disaster.fatalities ?x1 } LIMIT 9999", 
    "result": [
      "21"
    ], 
    "targetFormula": "(!fb:event.disaster.fatalities fb:en.boston_molasses_disaster)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07mnj fb:event.disaster.fatalities ?x1 } LIMIT 9999", 
    "utterance": "how many people died in the boston molasses disaster", 
    "id": 554
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_nomination.award fb:en.peoples_choice_award_for_favorite_comedy_movie . FILTER (?x1 != fb:en.peoples_choice_award_for_favorite_comedy_movie) . ?x1 fb:award.award_nomination.nominated_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "My Big Fat Greek Wedding", 
      "Knocked Up", 
      "The Proposal", 
      "Crazy, Stupid, Love.", 
      "Big", 
      "Mrs. Doubtfire", 
      "Wedding Crashers", 
      "The Simpsons Movie", 
      "Hitch", 
      "Bruce Almighty", 
      "Click", 
      "The Santa Clause", 
      "Sex and the City 2", 
      "Dark Shadows", 
      "Home Alone 2: Lost in New York", 
      "Mean Girls", 
      "Liar Liar", 
      "Sister Act", 
      "Shrek 2", 
      "Three Men and a Baby", 
      "Twins", 
      "Look Who's Talking", 
      "Meet the Parents", 
      "Valentine's Day", 
      "Grown Ups", 
      "Bride Wars", 
      "Mamma Mia!", 
      "He's Just Not That Into You", 
      "Talladega Nights: The Ballad of Ricky Bobby", 
      "Failure to Launch", 
      "Wild Hogs", 
      "Ted", 
      "Friends with Benefits", 
      "21 Jump Street", 
      "Anchorman: The Legend of Ron Burgundy", 
      "The Hangover", 
      "The Hangover: Part II", 
      "17 Again", 
      "Bridget Jones: The Edge of Reason", 
      "The Nutty Professor", 
      "Get Smart", 
      "Big Daddy", 
      "13 Going on 30", 
      "27 Dresses", 
      "The Longest Yard", 
      "Easy A", 
      "Bridesmaids", 
      "Pitch Perfect", 
      "There's Something About Mary", 
      "Bad Teacher", 
      "Pretty Woman", 
      "Date Night", 
      "What to Expect When You're Expecting", 
      "City Slickers", 
      "Grumpier Old Men"
    ], 
    "targetFormula": "(!fb:award.award_nomination.nominated_for ( (lambda x (fb:award.award_nomination.award (var x))) fb:en.peoples_choice_award_for_favorite_comedy_movie))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_nomination.award fb:m.09rpw9q . FILTER (?x1 != fb:m.09rpw9q) . ?x1 fb:award.award_nomination.nominated_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what movies were nominated for favorite comedy movie", 
    "id": 555
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_goal.match fb:en.2006_fifa_world_cup_final . FILTER (?x1 != fb:en.2006_fifa_world_cup_final) . ?x1 fb:soccer.football_goal.scorer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Zinedine Zidane", 
      "Marco Materazzi"
    ], 
    "targetFormula": "(!fb:soccer.football_goal.scorer ((lambda x (fb:soccer.football_goal.match (var x))) fb:en.2006_fifa_world_cup_final))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:soccer.football_goal.match fb:m.03bxjjf . FILTER (?x1 != fb:m.03bxjjf) . ?x1 fb:soccer.football_goal.scorer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what players scored in the 2006 fifa world cup final", 
    "id": 556
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.rudi_koertzen fb:cricket.cricket_umpire.test_matches_refereed ?x1 } LIMIT 9999", 
    "result": [
      "81"
    ], 
    "targetFormula": "(!fb:cricket.cricket_umpire.test_matches_refereed fb:en.rudi_koertzen)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06h4yp fb:cricket.cricket_umpire.test_matches_refereed ?x1 } LIMIT 9999", 
    "utterance": "how many test conferences has rudi koertzen refereed", 
    "id": 557
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.north_america fb:base.dinosaur.dinosaur_location.dinosaur_s ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:base.dinosaur.dinosaur_location.dinosaur_s fb:en.north_america))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.059g4 fb:base.dinosaur.dinosaur_location.dinosaur_s ?x1 } } } LIMIT 9999", 
    "utterance": "how many dinosaur species are there in north america", 
    "id": 558
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:military.military_command.military_commander fb:en.benito_mussolini . FILTER (?x2 != fb:en.benito_mussolini) . ?x2 fb:military.military_command.military_conflict ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:military.military_command.military_conflict ((lambda x (fb:military.military_command.military_commander (var x))) fb:en.benito_mussolini)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:military.military_command.military_commander fb:m.0177g . FILTER (?x2 != fb:m.0177g) . ?x2 fb:military.military_command.military_conflict ?x1 } } } LIMIT 9999", 
    "utterance": "in how many military conflicts did mussolini command", 
    "id": 559
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.sigma_phi_epsilon fb:education.fraternity_sorority.colleges_and_universities ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:education.fraternity_sorority.colleges_and_universities fb:en.sigma_phi_epsilon))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01sfg5 fb:education.fraternity_sorority.colleges_and_universities ?x1 } } } LIMIT 9999", 
    "utterance": "how many schools have a chapter of sigma phi epsilon", 
    "id": 560
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.a_right_to_death fb:radio.radio_program_episode.program ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Second Sunday"
    ], 
    "targetFormula": "(!fb:radio.radio_program_episode.program fb:en.a_right_to_death)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.065m8h8 fb:radio.radio_program_episode.program ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what radio program is a right to death an episode of", 
    "id": 561
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kjl0q fb:common.image.size ?x1 } LIMIT 9999", 
    "result": [
      "m.0kjl13"
    ], 
    "targetFormula": "(!fb:common.image.size fb:m.0kjl0q)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kjl0q fb:common.image.size ?x1 } LIMIT 9999", 
    "utterance": "what are the dimensions of the matrix reloaded image", 
    "id": 562
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.2006_fifa_world_cup_final fb:soccer.football_match.attendance ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:soccer.football_match.attendance fb:en.2006_fifa_world_cup_final))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03bxjjf fb:soccer.football_match.attendance ?x1 } } } LIMIT 9999", 
    "utterance": "how many people were at the 2006 fifa world cup final", 
    "id": 563
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.us fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.us))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.09nqf fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names are there for the usa_s currency", 
    "id": 564
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cdlng fb:amusement_parks.ride.height_restriction ?x1 } LIMIT 9999", 
    "result": [
      "1.2192"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.height_restriction fb:m.0cdlng)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cdlng fb:amusement_parks.ride.height_restriction ?x1 } LIMIT 9999", 
    "utterance": "how tall do you have to be to ride the american eagle", 
    "id": 565
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.g_h_mumm_cordon_rouge_brut fb:wine.wine.percentage_alcohol ?x1 } LIMIT 9999", 
    "result": [
      "12"
    ], 
    "targetFormula": "(!fb:wine.wine.percentage_alcohol fb:en.g_h_mumm_cordon_rouge_brut)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02wsr4g fb:wine.wine.percentage_alcohol ?x1 } LIMIT 9999", 
    "utterance": "what percent alcohol is a g.h. mumm cordon rouge brut", 
    "id": 566
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.cessna_citation_x fb:aviation.aircraft_model.passengers ?x1 . ?x1 fb:measurement_unit.integer_range.high_value ?x2 } LIMIT 9999", 
    "result": [
      "12"
    ], 
    "targetFormula": "(!fb:measurement_unit.integer_range.high_value (!fb:aviation.aircraft_model.passengers fb:en.cessna_citation_x))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.023jwr fb:aviation.aircraft_model.passengers ?x1 . ?x1 fb:measurement_unit.integer_range.high_value ?x2 } LIMIT 9999", 
    "utterance": "what is the passenger capacity of a cessna citation x", 
    "id": 567
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.london_heathrow_airport fb:aviation.airport.hub_for ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Skyways Limited", 
      "British European Airways", 
      "Lufthansa", 
      "bmi", 
      "British Overseas Airways Corporation", 
      "Canadian Affair", 
      "British Airways", 
      "Pan American World Airways", 
      "BMI Regional", 
      "Virgin Atlantic", 
      "British Mediterranean Airways", 
      "British Eagle", 
      "Hunting-Clan Air Transport"
    ], 
    "targetFormula": "(!fb:aviation.airport.hub_for fb:en.london_heathrow_airport)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03jn4 fb:aviation.airport.hub_for ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what airlines is the london heathrow airport a hub for", 
    "id": 568
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:american_football.football_historical_roster_position.team fb:en.philadelphia_eagles . FILTER (?x1 != fb:en.philadelphia_eagles) . ?x1 fb:american_football.football_historical_roster_position.player fb:en.david_akers . FILTER (?x1 != fb:en.david_akers) . ?x1 fb:american_football.football_historical_roster_position.number ?x2 } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(!fb:american_football.football_historical_roster_position.number (and ( (lambda x (fb:american_football.football_historical_roster_position.team (var x))) fb:en.philadelphia_eagles) ( (lambda x (fb:american_football.football_historical_roster_position.player (var x))) fb:en.david_akers)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:american_football.football_historical_roster_position.team fb:m.05tg3 . FILTER (?x1 != fb:m.05tg3) . ?x1 fb:american_football.football_historical_roster_position.player fb:m.02ctg7 . FILTER (?x1 != fb:m.02ctg7) . ?x1 fb:american_football.football_historical_roster_position.number ?x2 } LIMIT 9999", 
    "utterance": "what number was david akers on the philadelphia eagles", 
    "id": 569
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.hurricane_katrina fb:meteorology.tropical_cyclone.highest_winds ?x1 } LIMIT 9999", 
    "result": [
      "280"
    ], 
    "targetFormula": "(!fb:meteorology.tropical_cyclone.highest_winds fb:en.hurricane_katrina)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07nnlb fb:meteorology.tropical_cyclone.highest_winds ?x1 } LIMIT 9999", 
    "utterance": "what were the highest wind speeds in hurricane katrina", 
    "id": 570
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.kitty_pryde fb:comic_books.comic_book_character.first_appearance ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Uncanny X-Men #129"
    ], 
    "targetFormula": "(!fb:comic_books.comic_book_character.first_appearance fb:en.kitty_pryde)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02321x fb:comic_books.comic_book_character.first_appearance ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in which comic book issue did kitty pryde first appear", 
    "id": 571
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.matsushita_electric_industrial_co fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:common.topic.alias fb:en.matsushita_electric_industrial_co))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0nk5b fb:common.topic.alias ?x1 } } } LIMIT 9999", 
    "utterance": "how many other names is panasonic corporation known by", 
    "id": 572
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.the_standard_school_broadcast fb:broadcast.content.production_start ?x1 } LIMIT 9999", 
    "result": [
      "1928"
    ], 
    "targetFormula": "(!fb:broadcast.content.production_start fb:en.the_standard_school_broadcast)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.05mzm59 fb:broadcast.content.production_start ?x1 } LIMIT 9999", 
    "utterance": "when did the standard school broadcast start production", 
    "id": 573
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.canon_powershot_a75 fb:digicams.digital_camera.orientation_sensor ?x1 } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(!fb:digicams.digital_camera.orientation_sensor fb:en.canon_powershot_a75)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.04xvr8 fb:digicams.digital_camera.orientation_sensor ?x1 } LIMIT 9999", 
    "utterance": "does the canon powershot a75 have an orientation sensor", 
    "id": 574
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.straight-4 fb:engineering.piston_configuration.engines ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:engineering.piston_configuration.engines fb:en.straight-4))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01chrk fb:engineering.piston_configuration.engines ?x1 } } } LIMIT 9999", 
    "utterance": "how many engines have a straight-4 piston configuration", 
    "id": 575
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_wonderful_wizard_of_oz fb:media_common.adapted_work.adaptations ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "The wonderful Wizard of Oz", 
      "The Wiz", 
      "The Wiz", 
      "The Wizard of Oz", 
      "The Wonderful Wizard of Oz", 
      "Return to Oz", 
      "The Wizard of Oz", 
      "The Fairylogue and Radio-Plays", 
      "The Wizard of Oz", 
      "The Muppets' Wizard of Oz", 
      "Oz: The Great and Powerful", 
      "Tin Man", 
      "His Majesty, the Scarecrow of Oz", 
      "The Wizard of Oz in Concert: Dreams Come True", 
      "The wonderful Wizard of Oz", 
      "The Wizard of Mars", 
      "My Favorite Fairy Tales Volume 4: The Wizard of Oz; The Magic Carpet; Alibaba and Forty Thieves", 
      "The Wizard of Oz", 
      "Wizard of Oz", 
      "Ay\u015fecik ve Sihirli C\u00fcceler R\u00fcyalar \u00dclkesinde", 
      "The Wizard of Oz"
    ], 
    "targetFormula": "(!fb:media_common.adapted_work.adaptations fb:en.the_wonderful_wizard_of_oz)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0f6vx fb:media_common.adapted_work.adaptations ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some adaptations of the wonderful wizard of oz", 
    "id": 576
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.1st_world_science_fiction_convention fb:conferences.conference.venue ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Caravan Hall"
    ], 
    "targetFormula": "(!fb:conferences.conference.venue fb:en.1st_world_science_fiction_convention)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07c678 fb:conferences.conference.venue ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where was the 1st world science fiction convention held", 
    "id": 577
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.eiffel_tower fb:location.location.geolocation ?x1 . ?x1 fb:location.geocode.longitude ?x2 } LIMIT 9999", 
    "result": [
      "2.2946"
    ], 
    "targetFormula": "(!fb:location.geocode.longitude (!fb:location.location.geolocation fb:en.eiffel_tower))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02j81 fb:location.location.geolocation ?x1 . ?x1 fb:location.geocode.longitude ?x2 } LIMIT 9999", 
    "utterance": "what are the latitude and longitude of the eiffel tower", 
    "id": 578
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06zl3_x fb:business.shopping_center.retail_floor_space_m_2 ?x1 } LIMIT 9999", 
    "result": [
      "36000"
    ], 
    "targetFormula": "(!fb:business.shopping_center.retail_floor_space_m_2 fb:m.06zl3_x)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.06zl3_x fb:business.shopping_center.retail_floor_space_m_2 ?x1 } LIMIT 9999", 
    "utterance": "what is the retail floor space of the dubai marina mall", 
    "id": 579
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.vancouver_public_library fb:library.public_library_system.branches ?x1 } } } LIMIT 9999", 
    "result": [
      "22"
    ], 
    "targetFormula": "(count (!fb:library.public_library_system.branches fb:en.vancouver_public_library))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.05w4cy fb:library.public_library_system.branches ?x1 } } } LIMIT 9999", 
    "utterance": "how many branches does the vancouver public library have", 
    "id": 580
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:chess.chess_game_participation.game fb:en.immortal_game . FILTER (?x1 != fb:en.immortal_game) . ?x1 fb:chess.chess_game_participation.player fb:en.adolf_anderssen . FILTER (?x1 != fb:en.adolf_anderssen) . ?x1 fb:chess.chess_game_participation.color ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "White"
    ], 
    "targetFormula": "(!fb:chess.chess_game_participation.color (and ((lambda x (fb:chess.chess_game_participation.game (var x))) fb:en.immortal_game) ((lambda x (fb:chess.chess_game_participation.player (var x))) fb:en.adolf_anderssen)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:chess.chess_game_participation.game fb:m.01pr_r . FILTER (?x1 != fb:m.01pr_r) . ?x1 fb:chess.chess_game_participation.player fb:m.018yf9 . FILTER (?x1 != fb:m.018yf9) . ?x1 fb:chess.chess_game_participation.color ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what color did adolf anderssen play in the immortal game", 
    "id": 581
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.computer_programming fb:media_common.literary_genre.books_in_this_genre ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:media_common.literary_genre.books_in_this_genre fb:en.computer_programming))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01mf_ fb:media_common.literary_genre.books_in_this_genre ?x1 } } } LIMIT 9999", 
    "utterance": "how many books are there written on computer programming", 
    "id": 582
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:baseball.baseball_roster_position.team fb:en.los_angeles_dodgers . FILTER (?x1 != fb:en.los_angeles_dodgers) . ?x1 fb:baseball.baseball_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Nick Punto", 
      "Brandon League", 
      "Skip Schumaker", 
      "Matt Kemp", 
      "Josh Beckett", 
      "Clayton Kershaw", 
      "A. J. Ellis", 
      "Ronald Belisario", 
      "Carl Crawford", 
      "Zack Greinke", 
      "Ryu Hyun-jin", 
      "Scott Elbert", 
      "Luis Cruz", 
      "Christopher Withrow", 
      "Ted Lilly", 
      "Chris Capuano", 
      "Mark Ellis", 
      "Jerry Hairston, Jr.", 
      "Juan Uribe", 
      "Hanley Ram\u00edrez", 
      "Matt Guerrier", 
      "Andre Ethier", 
      "Javy Guerra", 
      "Dee Gordon", 
      "Adrian Gonzalez", 
      "J. P. Howell", 
      "Chad Billingsley", 
      "Justin Sellers", 
      "Tim Federowicz", 
      "Josh Wall", 
      "Alex Castellanos", 
      "Elian Herrera", 
      "Shawn Tolleson", 
      "Yasiel Puig", 
      "Stephen Fife", 
      "Paco Rodriguez", 
      "Steve Ames", 
      "Matt Magill", 
      "Kenley Jansen"
    ], 
    "targetFormula": "(!fb:baseball.baseball_roster_position.player ((lambda x (fb:baseball.baseball_roster_position.team (var x))) fb:en.los_angeles_dodgers))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:baseball.baseball_roster_position.team fb:m.04mjl . FILTER (?x1 != fb:m.04mjl) . ?x1 fb:baseball.baseball_roster_position.player ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the players currently on the los angeles dodgers", 
    "id": 583
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.1904_toronto_fire fb:event.disaster.damage ?x1 . ?x1 fb:measurement_unit.money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "10350000"
    ], 
    "targetFormula": "(!fb:measurement_unit.money_value.amount (!fb:event.disaster.damage fb:en.1904_toronto_fire))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02vq5w fb:event.disaster.damage ?x1 . ?x1 fb:measurement_unit.money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "how much money in damages did the 1904 toronto fire cost", 
    "id": 584
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:en.hayden_panettiere . FILTER (?x2 != fb:en.hayden_panettiere) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "result": [
      "36"
    ], 
    "targetFormula": "(count (!fb:film.performance.film ((lambda x (fb:film.performance.actor (var x))) fb:en.hayden_panettiere)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.performance.actor fb:m.02jyhv . FILTER (?x2 != fb:m.02jyhv) . ?x2 fb:film.performance.film ?x1 } } } LIMIT 9999", 
    "utterance": "how many film productions did hayden panettiere appear in", 
    "id": 585
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.danny_devito . FILTER (?x2 != fb:en.danny_devito) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.character ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.danny_devito)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.0q9kd . FILTER (?x2 != fb:m.0q9kd) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv shows did danny devito have a leading role in", 
    "id": 586
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ford_model_t_engine fb:engineering.piston_engine.piston_configuration ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Straight-4"
    ], 
    "targetFormula": "(!fb:engineering.piston_engine.piston_configuration fb:en.ford_model_t_engine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.046ql9 fb:engineering.piston_engine.piston_configuration ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the piston configuration of a ford model t engine", 
    "id": 587
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:american_football.player_game_statistics.season fb:en.2008_nfl_season . FILTER (?x1 != fb:en.2008_nfl_season) . ?x1 fb:american_football.player_game_statistics.player fb:en.donovan_mcnabb . FILTER (?x1 != fb:en.donovan_mcnabb) . ?x1 fb:american_football.player_game_statistics.games ?x2 } LIMIT 9999", 
    "result": [
      "16"
    ], 
    "targetFormula": "(!fb:american_football.player_game_statistics.games (and ((lambda x (fb:american_football.player_game_statistics.season (var x))) fb:en.2008_nfl_season) ((lambda x (fb:american_football.player_game_statistics.player (var x))) fb:en.donovan_mcnabb)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:american_football.player_game_statistics.season fb:m.03gqdq7 . FILTER (?x1 != fb:m.03gqdq7) . ?x1 fb:american_football.player_game_statistics.player fb:m.021h8y . FILTER (?x1 != fb:m.021h8y) . ?x1 fb:american_football.player_game_statistics.games ?x2 } LIMIT 9999", 
    "utterance": "how many games did donovan mcnabb play in the 2008 season", 
    "id": 588
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_psychiatrist fb:tv.tv_series_episode.next_episode ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Waldorf Salad"
    ], 
    "targetFormula": "(!fb:tv.tv_series_episode.next_episode fb:en.the_psychiatrist)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dtt0z fb:tv.tv_series_episode.next_episode ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the fawlty towers episode after the psychiatrist", 
    "id": 589
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_rolling_stones_2009_concert_tour fb:time.event.locations ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Europe", 
      "United States of America", 
      "Canada"
    ], 
    "targetFormula": "(!fb:time.event.locations fb:en.the_rolling_stones_2009_concert_tour)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05z25t7 fb:time.event.locations ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did the rolling stones 2009 concert tour take place", 
    "id": 590
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.award fb:en.golden_globe_award_for_best_motion_picture_-_drama . FILTER (?x1 != fb:en.golden_globe_award_for_best_motion_picture_-_drama) . ?x1 fb:award.award_honor.honored_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Gladiator", 
      "E.T. the Extra-Terrestrial", 
      "Kramer vs. Kramer", 
      "The Cardinal", 
      "In the Heat of the Night", 
      "Platoon", 
      "A Place in the Sun", 
      "Sense and Sensibility", 
      "Brokeback Mountain", 
      "The Social Network", 
      "Ordinary People", 
      "Terms of Endearment", 
      "Dances with Wolves", 
      "The Last Emperor", 
      "The Lord of the Rings: The Return of the King", 
      "The Aviator", 
      "The Hours", 
      "The Greatest Show on Earth", 
      "The Best Years of Our Lives", 
      "Out of Africa", 
      "The English Patient", 
      "Saving Private Ryan", 
      "Forrest Gump", 
      "American Beauty", 
      "The Lion in Winter", 
      "Babel", 
      "A Beautiful Mind", 
      "Lawrence of Arabia", 
      "Spartacus", 
      "Born on the Fourth of July", 
      "The Treasure of the Sierra Madre", 
      "East of Eden", 
      "Love Story", 
      "On Golden Pond", 
      "The Turning Point", 
      "Anne of the Thousand Days", 
      "Rocky", 
      "The Song of Bernadette", 
      "Ben-Hur", 
      "Schindler's List", 
      "The Defiant Ones", 
      "The Godfather", 
      "The Lost Weekend", 
      "On the Waterfront", 
      "Chinatown", 
      "The French Connection", 
      "Rain Man", 
      "Avatar", 
      "A Man for All Seasons", 
      "Titanic", 
      "Argo", 
      "Amadeus", 
      "The Descendants", 
      "The Bridge on the River Kwai", 
      "Gentleman's Agreement", 
      "Becket", 
      "Bugsy", 
      "Slumdog Millionaire", 
      "Atonement", 
      "One Flew Over the Cuckoo's Nest", 
      "Johnny Belinda", 
      "The Exorcist", 
      "Sunset Boulevard", 
      "The Guns of Navarone", 
      "The Robe", 
      "Going My Way", 
      "All the King's Men", 
      "Scent of a Woman", 
      "Midnight Express", 
      "Around the World in 80 Days", 
      "Doctor Zhivago"
    ], 
    "targetFormula": "(!fb:award.award_honor.honored_for ( (lambda x (fb:award.award_honor.award (var x))) fb:en.golden_globe_award_for_best_motion_picture_-_drama))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.award fb:m.019f4d . FILTER (?x1 != fb:m.019f4d) . ?x1 fb:award.award_honor.honored_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what movies won the golden globe award for best drama film", 
    "id": 591
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.2005_atlantic_hurricane_season fb:meteorology.tropical_cyclone_season.total_storms ?x1 } LIMIT 9999", 
    "result": [
      "28"
    ], 
    "targetFormula": "(!fb:meteorology.tropical_cyclone_season.total_storms fb:en.2005_atlantic_hurricane_season)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.049_hw fb:meteorology.tropical_cyclone_season.total_storms ?x1 } LIMIT 9999", 
    "utterance": "how many storms were in the 2005 atlantic hurricane season", 
    "id": 592
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:book.contents.publication fb:en.frontier_times_1967_july . FILTER (?x1 != fb:en.frontier_times_1967_july) . ?x1 fb:book.contents.work ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Swift \"Justice\" at Chilkoot Pass", 
      "The First Cooling Off Period", 
      "Five Months Term in the Piney Woods", 
      "The Frontier Post", 
      "Nuggets", 
      "Western Book Roundup", 
      "Trails Grown Dim", 
      "Tumbleweeds", 
      "Will and Charlie", 
      "Doctor Grandma French", 
      "White Man's Forbidden Ground", 
      "God and the Apaches", 
      "Good Guys of the West", 
      "I Helped Caputure Cherokee Bill!", 
      "Mount Franklin's Lost Treasure", 
      "Special Agent!", 
      "The Mason-Henry Gang", 
      "Oregon's Johnny Appleseed", 
      "Cowboys Of Old Yavapai", 
      "Walt Coburn's Tally Book", 
      "Legend of Squaw Hill"
    ], 
    "targetFormula": "(!fb:book.contents.work ((lambda x (fb:book.contents.publication (var x))) fb:en.frontier_times_1967_july))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:book.contents.publication fb:m.064t8jq . FILTER (?x1 != fb:m.064t8jq) . ?x1 fb:book.contents.work ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what articles are in the july 1967 issue of frontier times", 
    "id": 593
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.elk_mountain_ski_area fb:skiing.ski_area.top_elevation ?x1 } LIMIT 9999", 
    "result": [
      "821.1312"
    ], 
    "targetFormula": "(!fb:skiing.ski_area.top_elevation fb:en.elk_mountain_ski_area)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02pl3l5 fb:skiing.ski_area.top_elevation ?x1 } LIMIT 9999", 
    "utterance": "what is the highest elevation at the elk mountain ski area", 
    "id": 594
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.film_crew_gig.film_crew_role fb:en.prosthetic_makeup_artist . FILTER (?x2 != fb:en.prosthetic_makeup_artist) . ?x2 fb:film.film_crew_gig.film fb:en.28_weeks_later . FILTER (?x2 != fb:en.28_weeks_later) . ?x2 fb:film.film_crew_gig.crewmember ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:film.film_crew_gig.crewmember (and ((lambda x (fb:film.film_crew_gig.film_crew_role (var x))) fb:en.prosthetic_makeup_artist) ((lambda x (fb:film.film_crew_gig.film (var x))) fb:en.28_weeks_later))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:film.film_crew_gig.film_crew_role fb:m.098468p . FILTER (?x2 != fb:m.098468p) . ?x2 fb:film.film_crew_gig.film fb:m.0fhd04 . FILTER (?x2 != fb:m.0fhd04) . ?x2 fb:film.film_crew_gig.crewmember ?x1 } } } LIMIT 9999", 
    "utterance": "how many prosthetic makeup artists worked on 28 days later", 
    "id": 595
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.new_york_public_library fb:library.public_library_system.annual_visits ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:measurement_unit.dated_integer.number (!fb:library.public_library_system.annual_visits fb:en.new_york_public_library)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.01hyd9 fb:library.public_library_system.annual_visits ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "utterance": "how many people visit the new york public library annually", 
    "id": 596
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_wind-up_bird_chronicle fb:book.written_work.original_language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Japanese Language"
    ], 
    "targetFormula": "(!fb:book.written_work.original_language fb:en.the_wind-up_bird_chronicle)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.051r3l fb:book.written_work.original_language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the original language of the wind-up bird chronicle", 
    "id": 597
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.arignar_anna_zoological_park fb:zoos.zoo.exhibits ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Terrestrial Aviary", 
      "Reptile House/Serpentarium", 
      "Crocodile Enclosure", 
      "World of Nocturnal Animals", 
      "Amphibian House", 
      "Butterfly House", 
      "Small Mammals House", 
      "Primate House", 
      "Sanctuary Aviaries"
    ], 
    "targetFormula": "(!fb:zoos.zoo.exhibits fb:en.arignar_anna_zoological_park)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0772jt fb:zoos.zoo.exhibits ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what exhibits are there at the arignar anna zoological park", 
    "id": 598
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.western_conference fb:ice_hockey.hockey_conference.divisions ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Northwest Division", 
      "Pacific Division", 
      "Central Division"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_conference.divisions fb:en.western_conference)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0c9n_3 fb:ice_hockey.hockey_conference.divisions ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the divisions of the western conference of the nhl", 
    "id": 599
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:projects.project_participation.project fb:en.manhattan_project . FILTER (?x1 != fb:en.manhattan_project) . ?x1 fb:projects.project_participation.participant fb:en.robert_oppenheimer . FILTER (?x1 != fb:en.robert_oppenheimer) . ?x1 fb:projects.project_participation.role ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Director of Research"
    ], 
    "targetFormula": "(!fb:projects.project_participation.role (and ((lambda x (fb:projects.project_participation.project (var x))) fb:en.manhattan_project) ((lambda x (fb:projects.project_participation.participant (var x))) fb:en.robert_oppenheimer)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:projects.project_participation.project fb:m.04yp5 . FILTER (?x1 != fb:m.04yp5) . ?x1 fb:projects.project_participation.participant fb:m.09qxy . FILTER (?x1 != fb:m.09qxy) . ?x1 fb:projects.project_participation.role ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what was robert oppenheimer's role in the manhattan project", 
    "id": 600
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.school_district_of_philadelphia fb:education.school_district.schools ?x1 } } } LIMIT 9999", 
    "result": [
      "293"
    ], 
    "targetFormula": "(count (!fb:education.school_district.schools fb:en.school_district_of_philadelphia))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.074dxf fb:education.school_district.schools ?x1 } } } LIMIT 9999", 
    "utterance": "how many schools are in the school district of philadelphia", 
    "id": 601
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.2006_winter_olympics fb:olympics.olympic_games.number_of_countries ?x1 } LIMIT 9999", 
    "result": [
      "80"
    ], 
    "targetFormula": "(!fb:olympics.olympic_games.number_of_countries fb:en.2006_winter_olympics)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kbvv fb:olympics.olympic_games.number_of_countries ?x1 } LIMIT 9999", 
    "utterance": "how many countries participated in the 2006 winter olympics", 
    "id": 602
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.court_of_chancery fb:law.court.jurisdiction ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "England and Wales"
    ], 
    "targetFormula": "(!fb:law.court.jurisdiction fb:en.court_of_chancery)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.015r91 fb:law.court.jurisdiction ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "over what area does the court of chancery have jurisdiction", 
    "id": 603
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.powershot_tx1 fb:digicams.digital_camera.street_price ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "499.99"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (!fb:digicams.digital_camera.street_price fb:en.powershot_tx1))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.03csvxk fb:digicams.digital_camera.street_price ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "how much did a canon powershot tx1 cost when it was released", 
    "id": 604
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:martial_arts.martial_arts_certification.art fb:en.seishindo_kenpo . FILTER (?x1 != fb:en.seishindo_kenpo) . ?x1 fb:martial_arts.martial_arts_certification.person fb:en.woody_strode . FILTER (?x1 != fb:en.woody_strode) . ?x1 fb:martial_arts.martial_arts_certification.qualification ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Black belt"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_arts_certification.qualification (and ((lambda x (fb:martial_arts.martial_arts_certification.art (var x))) fb:en.seishindo_kenpo) ((lambda x (fb:martial_arts.martial_arts_certification.person (var x))) fb:en.woody_strode)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:martial_arts.martial_arts_certification.art fb:m.03cjpb3 . FILTER (?x1 != fb:m.03cjpb3) . ?x1 fb:martial_arts.martial_arts_certification.person fb:m.06_qlq . FILTER (?x1 != fb:m.06_qlq) . ?x1 fb:martial_arts.martial_arts_certification.qualification ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what qualification does woody strode have in seishindo kenpo", 
    "id": 605
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:exhibitions.exhibition_run.venue fb:en.science_museum_great_britain . FILTER (?x2 != fb:en.science_museum_great_britain) . ?x2 fb:exhibitions.exhibition_run.exhibition ?x1 } } } LIMIT 9999", 
    "result": [
      "90"
    ], 
    "targetFormula": "(count (!fb:exhibitions.exhibition_run.exhibition ((lambda x (fb:exhibitions.exhibition_run.venue (var x))) fb:en.science_museum_great_britain)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:exhibitions.exhibition_run.venue fb:m.013yrz . FILTER (?x2 != fb:m.013yrz) . ?x2 fb:exhibitions.exhibition_run.exhibition ?x1 } } } LIMIT 9999", 
    "utterance": "how many free exhibits have there been at the science museum", 
    "id": 606
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.leonardo_da_vinci fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject fb:en.leonardo_da_vinci))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.04lg6 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?x1 } } } LIMIT 9999", 
    "utterance": "how many exhibitions have there been about leonardo da vinci", 
    "id": 607
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbbrp . FILTER (?x1 != fb:m.04nbbrp) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "result": [
      "45"
    ], 
    "targetFormula": "(!fb:automotive.us_fuel_economy.highway_mpg ((lambda x (fb:automotive.us_fuel_economy.trim_level (var x))) fb:m.04nbbrp))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbbrp . FILTER (?x1 != fb:m.04nbbrp) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "utterance": "what is the highway fuel economy of a 2007 honda civic hybrid", 
    "id": 608
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:celebrities.rehab.rehab_facility fb:m.04fz39z . FILTER (?x1 != fb:m.04fz39z) . ?x1 fb:celebrities.rehab.celebrity fb:en.charlie_sheen . FILTER (?x1 != fb:en.charlie_sheen) . ?x1 fb:celebrities.rehab.entered ?x2 } LIMIT 9999", 
    "result": [
      "1998-05-20"
    ], 
    "targetFormula": "(!fb:celebrities.rehab.entered (and ((lambda x (fb:celebrities.rehab.rehab_facility (var x))) fb:m.04fz39z) ((lambda x (fb:celebrities.rehab.celebrity (var x))) fb:en.charlie_sheen)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:celebrities.rehab.rehab_facility fb:m.04fz39z . FILTER (?x1 != fb:m.04fz39z) . ?x1 fb:celebrities.rehab.celebrity fb:m.01pllx . FILTER (?x1 != fb:m.01pllx) . ?x1 fb:celebrities.rehab.entered ?x2 } LIMIT 9999", 
    "utterance": "when did charlie sheen enter the thousand oaks rehab facility", 
    "id": 609
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fq7hj3 fb:projects.project.planned_completion_date ?x1 } LIMIT 9999", 
    "result": [
      "2013"
    ], 
    "targetFormula": "(!fb:projects.project.planned_completion_date fb:m.0fq7hj3)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fq7hj3 fb:projects.project.planned_completion_date ?x1 } LIMIT 9999", 
    "utterance": "when is the restoration of the rijksmuseum supposed to finish", 
    "id": 610
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.aol_instant_messenger fb:computer.software.languages_used ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "C++", 
      "Cascading Style Sheets", 
      "XML", 
      "JavaScript", 
      "Adobe Flash"
    ], 
    "targetFormula": "(!fb:computer.software.languages_used fb:en.aol_instant_messenger)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01258 fb:computer.software.languages_used ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what programming languages were used for aol instant messenger", 
    "id": 611
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.ranking.list fb:en.rolling_stones_100_greatest_guitarists_of_all_time . FILTER (?x1 != fb:en.rolling_stones_100_greatest_guitarists_of_all_time) . ?x1 fb:award.ranking.item ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Mick Ronson", 
      "Mark Knopfler", 
      "Tom Verlaine", 
      "Johnny Winter", 
      "Robbie Robertson", 
      "Johnny Ramone", 
      "Joni Mitchell", 
      "John Cipollina", 
      "Robert Fripp", 
      "Brian May", 
      "Jeff Beck", 
      "Link Wray", 
      "John Frusciante", 
      "George Harrison", 
      "Lou Reed", 
      "Kurt Cobain", 
      "D. Boon", 
      "Paul Kossoff", 
      "Eddie Hazel", 
      "Mike Bloomfield", 
      "Adam Jones", 
      "Steve Cropper", 
      "Robby Krieger", 
      "Eric Clapton", 
      "Carlos Santana", 
      "The Edge", 
      "John McLaughlin", 
      "Thurston Moore", 
      "Lee Ranaldo", 
      "James Burton", 
      "Eddie Cochran", 
      "Jimmy Page", 
      "Bo Diddley", 
      "B.B. King", 
      "Buddy Guy", 
      "Frank Zappa", 
      "Bert Jansch", 
      "Mickey Baker", 
      "Kirk Hammett", 
      "Steve Howe", 
      "Zoot Horn Rollo", 
      "David Gilmour", 
      "Chuck Berry", 
      "Stevie Ray Vaughan", 
      "John Fogerty", 
      "Hubert Sumlin", 
      "Pete Townshend", 
      "Eddie Van Halen", 
      "Robert Quine", 
      "Ed O'Brien", 
      "Dave Davies", 
      "Randy Rhoads", 
      "Robert Johnson", 
      "Ali Farka Tour\u00e9", 
      "Richard Betts", 
      "Jerry Miller", 
      "Joan Jett", 
      "Jerry Garcia", 
      "Jonny Greenwood", 
      "Keith Richards", 
      "Jack White", 
      "Jimi Hendrix", 
      "Scotty Moore", 
      "T-Bone Walker", 
      "Ry Cooder", 
      "Vernon Reid", 
      "Peter Green", 
      "Richard Thompson", 
      "Derek Trucks", 
      "Dick Dale", 
      "Tony Iommi", 
      "Trey Anastasio", 
      "Clarence White", 
      "Freddie King", 
      "Greg Ginn", 
      "Joe Perry", 
      "Duane Allman", 
      "Les Paul", 
      "Roy Buchanan", 
      "Tom Morello", 
      "Stephen Stills", 
      "Kim Thayil", 
      "Warren Haynes", 
      "Neil Young: Heart of Gold", 
      "Ritchie Blackmore", 
      "Ike Turner", 
      "Glen Buxton", 
      "Fred Sonic Smith", 
      "Lightnin' Hopkins", 
      "John Fahey", 
      "Danny Gatton", 
      "Leigh Stephens", 
      "Wayne Kramer", 
      "Angus Young", 
      "Cliff Gallup", 
      "Ron Asheton", 
      "Kevin Shields", 
      "Jorma Kaukonen", 
      "Robert Randolph", 
      "Henry Vestine"
    ], 
    "targetFormula": "(!fb:award.ranking.item ( (lambda x (fb:award.ranking.list (var x))) fb:en.rolling_stones_100_greatest_guitarists_of_all_time))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.ranking.list fb:m.04ggxn2 . FILTER (?x1 != fb:m.04ggxn2) . ?x1 fb:award.ranking.item ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who was rolling stones' greatest guitarist of all time in 2003", 
    "id": 612
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:location.location_symbol_relationship.administrative_division fb:en.utah . FILTER (?x1 != fb:en.utah) . ?x1 fb:location.location_symbol_relationship.Kind_of_symbol fb:en.state_bird . FILTER (?x1 != fb:en.state_bird) . ?x1 fb:location.location_symbol_relationship.symbol fb:en.california_gull . FILTER (?x1 != fb:en.california_gull) . ?x1 fb:location.location_symbol_relationship.date_adopted ?x2 } LIMIT 9999", 
    "result": [
      "1955"
    ], 
    "targetFormula": "(!fb:location.location_symbol_relationship.date_adopted (and (and ((lambda x (fb:location.location_symbol_relationship.administrative_division (var x))) fb:en.utah) ((lambda x (fb:location.location_symbol_relationship.Kind_of_symbol (var x))) fb:en.state_bird)) ((lambda x (fb:location.location_symbol_relationship.symbol (var x))) fb:en.california_gull)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:location.location_symbol_relationship.administrative_division fb:m.07srw . FILTER (?x1 != fb:m.07srw) . ?x1 fb:location.location_symbol_relationship.Kind_of_symbol fb:m.04627hw . FILTER (?x1 != fb:m.04627hw) . ?x1 fb:location.location_symbol_relationship.symbol fb:m.037lsy . FILTER (?x1 != fb:m.037lsy) . ?x1 fb:location.location_symbol_relationship.date_adopted ?x2 } LIMIT 9999", 
    "utterance": "since when has the california gull been the state bird of utah", 
    "id": 613
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.mammoth_cave_national_park fb:protected_sites.protected_site.annual_visitors ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "597934"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number (!fb:protected_sites.protected_site.annual_visitors fb:en.mammoth_cave_national_park))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0hr86 fb:protected_sites.protected_site.annual_visitors ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "how many visitors does mammoth cave national park get in a year", 
    "id": 614
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:royalty.chivalric_order_membership.order fb:en.order_of_the_garter . FILTER (?x2 != fb:en.order_of_the_garter) . ?x2 fb:royalty.chivalric_order_membership.title fb:en.knight_of_the_garter . FILTER (?x2 != fb:en.knight_of_the_garter) . ?x2 fb:royalty.chivalric_order_membership.recipient ?x1 } } } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(count (!fb:royalty.chivalric_order_membership.recipient (and ((lambda x (fb:royalty.chivalric_order_membership.order (var x))) fb:en.order_of_the_garter) ((lambda x (fb:royalty.chivalric_order_membership.title (var x))) fb:en.knight_of_the_garter))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:royalty.chivalric_order_membership.order fb:m.0jpgc . FILTER (?x2 != fb:m.0jpgc) . ?x2 fb:royalty.chivalric_order_membership.title fb:m.05ywlyg . FILTER (?x2 != fb:m.05ywlyg) . ?x2 fb:royalty.chivalric_order_membership.recipient ?x1 } } } LIMIT 9999", 
    "utterance": "how many knights of the garter did the order of the garter have", 
    "id": 615
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_medal_honor.olympics fb:en.2004_summer_olympics . FILTER (?x1 != fb:en.2004_summer_olympics) . ?x1 fb:olympics.olympic_medal_honor.medalist fb:en.graeme_brown . FILTER (?x1 != fb:en.graeme_brown) . ?x1 fb:olympics.olympic_medal_honor.medal ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Gold medal"
    ], 
    "targetFormula": "(!fb:olympics.olympic_medal_honor.medal (and ((lambda x (fb:olympics.olympic_medal_honor.olympics (var x))) fb:en.2004_summer_olympics) ((lambda x (fb:olympics.olympic_medal_honor.medalist (var x))) fb:en.graeme_brown)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_medal_honor.olympics fb:m.0kbvb . FILTER (?x1 != fb:m.0kbvb) . ?x1 fb:olympics.olympic_medal_honor.medalist fb:m.062yf5 . FILTER (?x1 != fb:m.062yf5) . ?x1 fb:olympics.olympic_medal_honor.medal ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what medal did graeme brown receive at the 2004 summer olympics", 
    "id": 616
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:exhibitions.exhibition_run.exhibition fb:m.04d14h7 . FILTER (?x1 != fb:m.04d14h7) . ?x1 fb:exhibitions.exhibition_run.venue fb:en.philadelphia_museum_of_art . FILTER (?x1 != fb:en.philadelphia_museum_of_art) . ?x1 fb:exhibitions.exhibition_run.opened_on ?x2 } LIMIT 9999", 
    "result": [
      "2008-02-20"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibition_run.opened_on (and ((lambda x (fb:exhibitions.exhibition_run.exhibition (var x))) fb:m.04d14h7) ((lambda x (fb:exhibitions.exhibition_run.venue (var x))) fb:en.philadelphia_museum_of_art)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:exhibitions.exhibition_run.exhibition fb:m.04d14h7 . FILTER (?x1 != fb:m.04d14h7) . ?x1 fb:exhibitions.exhibition_run.venue fb:m.0246rh . FILTER (?x1 != fb:m.0246rh) . ?x1 fb:exhibitions.exhibition_run.opened_on ?x2 } LIMIT 9999", 
    "utterance": "when was the frida kahlo exhibit at the philadelphia art museum", 
    "id": 617
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.yosemite_national_park fb:protected_sites.protected_site.date_established ?x1 } LIMIT 9999", 
    "result": [
      "1890-10-01"
    ], 
    "targetFormula": "(!fb:protected_sites.protected_site.date_established fb:en.yosemite_national_park)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0c_y8 fb:protected_sites.protected_site.date_established ?x1 } LIMIT 9999", 
    "utterance": "when was yosemite national park designated as a protected place", 
    "id": 618
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award_winner fb:en.beyonce . FILTER (?x2 != fb:en.beyonce) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "result": [
      "49"
    ], 
    "targetFormula": "(count (!fb:award.award_honor.award ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.beyonce)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:award.award_honor.award_winner fb:m.01mpq7s . FILTER (?x2 != fb:m.01mpq7s) . ?x2 fb:award.award_honor.award ?x1 } } } LIMIT 9999", 
    "utterance": "how many grammy awards did beyonce receive in her singing career", 
    "id": 619
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_nomination.award fb:en.academy_award_for_best_director . FILTER (?x1 != fb:en.academy_award_for_best_director) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2011\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2012\"^^xsd:datetime)) . ?x1 fb:award.award_nomination.year ?x2 . FILTER (?x1 != \"2011\"^^xsd:datetime) . ?x1 fb:award.award_nomination.award_nominee ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Martin Scorsese", 
      "Michel Hazanavicius", 
      "Woody Allen", 
      "Terrence Malick", 
      "Alexander Payne"
    ], 
    "targetFormula": "(!fb:award.award_nomination.award_nominee (and ((lambda x (fb:award.award_nomination.award (var x))) fb:en.academy_award_for_best_director) ((lambda x (fb:award.award_nomination.year (var x))) (date 2011 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_nomination.award fb:m.0gs9p . FILTER (?x1 != fb:m.0gs9p) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2011\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2012\"^^xsd:datetime)) . ?x1 fb:award.award_nomination.year ?x2 . FILTER (?x1 != \"2011\"^^xsd:datetime) . ?x1 fb:award.award_nomination.award_nominee ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was nominated for the academy award for best director in 2011", 
    "id": 620
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.royal_institute_of_british_architects fb:award.award_presenting_organization.awards_presented ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Stirling Prize"
    ], 
    "targetFormula": "(!fb:award.award_presenting_organization.awards_presented fb:en.royal_institute_of_british_architects)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0386gq fb:award.award_presenting_organization.awards_presented ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what award does the royal institute of british architects present", 
    "id": 621
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:geology.geological_formation.formed_during_period fb:en.cretaceous } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (fb:geology.geological_formation.formed_during_period fb:en.cretaceous))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:geology.geological_formation.formed_during_period fb:m.01pt4 } } } LIMIT 9999", 
    "utterance": "how many rock formations were formed during the cretaceous period", 
    "id": 622
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.san_francisco_international_airport fb:aviation.airport.number_of_runways ?x1 } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(!fb:aviation.airport.number_of_runways fb:en.san_francisco_international_airport)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01l4xk fb:aviation.airport.number_of_runways ?x1 } LIMIT 9999", 
    "utterance": "how many runways does the san francisco international airport have", 
    "id": 623
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.1992_atlantic_hurricane_season fb:meteorology.tropical_cyclone_season.strongest_storm ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Hurricane Andrew"
    ], 
    "targetFormula": "(!fb:meteorology.tropical_cyclone_season.strongest_storm fb:en.1992_atlantic_hurricane_season)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03b4cy fb:meteorology.tropical_cyclone_season.strongest_storm ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the strongest storm in the 1992 atlantic hurricane season", 
    "id": 624
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:ice_hockey.hockey_roster_position.player fb:en.colby_armstrong . FILTER (?x1 != fb:en.colby_armstrong) . ?x1 fb:ice_hockey.hockey_roster_position.team fb:en.toronto_maple_leafs . FILTER (?x1 != fb:en.toronto_maple_leafs) . ?x1 fb:ice_hockey.hockey_roster_position.position ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:ice_hockey.hockey_roster_position.position (and ((lambda x (fb:ice_hockey.hockey_roster_position.player (var x))) fb:en.colby_armstrong) ((lambda x (fb:ice_hockey.hockey_roster_position.team (var x))) fb:en.toronto_maple_leafs)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:ice_hockey.hockey_roster_position.player fb:m.09zv8b . FILTER (?x1 != fb:m.09zv8b) . ?x1 fb:ice_hockey.hockey_roster_position.team fb:m.0j6tr . FILTER (?x1 != fb:m.0j6tr) . ?x1 fb:ice_hockey.hockey_roster_position.position ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what position does colby armstrong play on the toronto maple leafs", 
    "id": 625
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.hall_of_fame_induction.inductee fb:en.joni_mitchell . FILTER (?x1 != fb:en.joni_mitchell) . ?x1 fb:award.hall_of_fame_induction.hall_of_fame fb:en.rock_and_roll_hall_of_fame . FILTER (?x1 != fb:en.rock_and_roll_hall_of_fame) . ?x1 fb:award.hall_of_fame_induction.date ?x2 } LIMIT 9999", 
    "result": [
      "1997"
    ], 
    "targetFormula": "(!fb:award.hall_of_fame_induction.date (and ((lambda x (fb:award.hall_of_fame_induction.inductee (var x))) fb:en.joni_mitchell) ((lambda x (fb:award.hall_of_fame_induction.hall_of_fame (var x))) fb:en.rock_and_roll_hall_of_fame)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.hall_of_fame_induction.inductee fb:m.045zr . FILTER (?x1 != fb:m.045zr) . ?x1 fb:award.hall_of_fame_induction.hall_of_fame fb:m.0g2c8 . FILTER (?x1 != fb:m.0g2c8) . ?x1 fb:award.hall_of_fame_induction.date ?x2 } LIMIT 9999", 
    "utterance": "when was joni mitchell inducted into the rock and roll hall of fame", 
    "id": 626
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:american_football.football_historical_roster_position.player fb:en.ray_lewis . FILTER (?x1 != fb:en.ray_lewis) . ?x1 fb:american_football.football_historical_roster_position.team fb:en.baltimore_ravens . FILTER (?x1 != fb:en.baltimore_ravens) . ?x1 fb:american_football.football_historical_roster_position.position_s ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Linebacker"
    ], 
    "targetFormula": "(!fb:american_football.football_historical_roster_position.position_s (and ( (lambda x (fb:american_football.football_historical_roster_position.player (var x))) fb:en.ray_lewis) ( (lambda x (fb:american_football.football_historical_roster_position.team (var x))) fb:en.baltimore_ravens)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:american_football.football_historical_roster_position.player fb:m.029wyf . FILTER (?x1 != fb:m.029wyf) . ?x1 fb:american_football.football_historical_roster_position.team fb:m.01ct6 . FILTER (?x1 != fb:m.01ct6) . ?x1 fb:american_football.football_historical_roster_position.position_s ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what positon does ray lewis currently play for the baltimore ravens", 
    "id": 627
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:ice_hockey.hockey_previous_roster_position.player fb:en.christopher_higgins . FILTER (?x1 != fb:en.christopher_higgins) . ?x1 fb:ice_hockey.hockey_previous_roster_position.team fb:en.montreal_canadiens . FILTER (?x1 != fb:en.montreal_canadiens) . ?x1 fb:ice_hockey.hockey_previous_roster_position.to ?x2 } LIMIT 9999", 
    "result": [
      "2009"
    ], 
    "targetFormula": "(!fb:ice_hockey.hockey_previous_roster_position.to (and ( (lambda x (fb:ice_hockey.hockey_previous_roster_position.player (var x))) fb:en.christopher_higgins) ((lambda x (fb:ice_hockey.hockey_previous_roster_position.team (var x))) fb:en.montreal_canadiens)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:ice_hockey.hockey_previous_roster_position.player fb:m.04pq4b . FILTER (?x1 != fb:m.04pq4b) . ?x1 fb:ice_hockey.hockey_previous_roster_position.team fb:m.0bszz . FILTER (?x1 != fb:m.0bszz) . ?x1 fb:ice_hockey.hockey_previous_roster_position.to ?x2 } LIMIT 9999", 
    "utterance": "when did christopher higgins stop playing for the montreal canadiens", 
    "id": 628
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_honor.honored_for fb:en.everything_is_illuminated . FILTER (?x1 != fb:en.everything_is_illuminated) . ?x1 fb:award.award_honor.award fb:en.guardian_first_book_award . FILTER (?x1 != fb:en.guardian_first_book_award) . ?x1 fb:award.award_honor.year ?x2 } LIMIT 9999", 
    "result": [
      "2002"
    ], 
    "targetFormula": "(!fb:award.award_honor.year (and ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.everything_is_illuminated) ((lambda x (fb:award.award_honor.award (var x))) fb:en.guardian_first_book_award)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_honor.honored_for fb:m.05w8jz . FILTER (?x1 != fb:m.05w8jz) . ?x1 fb:award.award_honor.award fb:m.06nyyl . FILTER (?x1 != fb:m.06nyyl) . ?x1 fb:award.award_honor.year ?x2 } LIMIT 9999", 
    "utterance": "when did everything is illuminated win the guardian first book award", 
    "id": 629
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:biology.breed_registration.breed_group fb:en.sporting_group . FILTER (?x2 != fb:en.sporting_group) . ?x2 fb:biology.breed_registration.registry fb:en.american_kennel_club . FILTER (?x2 != fb:en.american_kennel_club) . ?x2 fb:biology.breed_registration.breed ?x1 } } } LIMIT 9999", 
    "result": [
      "27"
    ], 
    "targetFormula": "(count (!fb:biology.breed_registration.breed (and ((lambda x (fb:biology.breed_registration.breed_group (var x))) fb:en.sporting_group) ((lambda x (fb:biology.breed_registration.registry (var x))) fb:en.american_kennel_club))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:biology.breed_registration.breed_group fb:m.0265rtm . FILTER (?x2 != fb:m.0265rtm) . ?x2 fb:biology.breed_registration.registry fb:m.0ljl8 . FILTER (?x2 != fb:m.0ljl8) . ?x2 fb:biology.breed_registration.breed ?x1 } } } LIMIT 9999", 
    "utterance": "how many breeds are in the sporting group of the american kennel club", 
    "id": 630
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:projects.project_participation.project fb:m.0gk9x46 . FILTER (?x1 != fb:m.0gk9x46) . ?x1 fb:projects.project_participation.participant fb:en.francesco_sabatini . FILTER (?x1 != fb:en.francesco_sabatini) . ?x1 fb:projects.project_participation.from_date ?x2 } LIMIT 9999", 
    "result": [
      "1775"
    ], 
    "targetFormula": "(!fb:projects.project_participation.from_date (and ((lambda x (fb:projects.project_participation.project (var x))) fb:m.0gk9x46) ((lambda x (fb:projects.project_participation.participant (var x))) fb:en.francesco_sabatini)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:projects.project_participation.project fb:m.0gk9x46 . FILTER (?x1 != fb:m.0gk9x46) . ?x1 fb:projects.project_participation.participant fb:m.09dqyz . FILTER (?x1 != fb:m.09dqyz) . ?x1 fb:projects.project_participation.from_date ?x2 } LIMIT 9999", 
    "utterance": "when did francesco sabatini start working on the puerta de san vicente", 
    "id": 631
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:protected_sites.natural_or_cultural_site_listing.designation fb:en.world_heritage_site . FILTER (?x1 != fb:en.world_heritage_site) . ?x1 fb:protected_sites.natural_or_cultural_site_listing.listed_site fb:en.abbey_of_st_gall . FILTER (?x1 != fb:en.abbey_of_st_gall) . ?x1 fb:protected_sites.natural_or_cultural_site_listing.date_listed ?x2 } LIMIT 9999", 
    "result": [
      "1983"
    ], 
    "targetFormula": "(!fb:protected_sites.natural_or_cultural_site_listing.date_listed (and ( (lambda x (fb:protected_sites.natural_or_cultural_site_listing.designation (var x))) fb:en.world_heritage_site) ( (lambda x (fb:protected_sites.natural_or_cultural_site_listing.listed_site (var x))) fb:en.abbey_of_st_gall)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:protected_sites.natural_or_cultural_site_listing.designation fb:m.0c7g7 . FILTER (?x1 != fb:m.0c7g7) . ?x1 fb:protected_sites.natural_or_cultural_site_listing.listed_site fb:m.079g7 . FILTER (?x1 != fb:m.079g7) . ?x1 fb:protected_sites.natural_or_cultural_site_listing.date_listed ?x2 } LIMIT 9999", 
    "utterance": "when was the abbey of st. gall listed as an unesco world heritage site", 
    "id": 632
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbpg5 . FILTER (?x1 != fb:m.04nbpg5) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "result": [
      "32"
    ], 
    "targetFormula": "(!fb:automotive.us_fuel_economy.highway_mpg ((lambda x (fb:automotive.us_fuel_economy.trim_level (var x))) fb:m.04nbpg5))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbpg5 . FILTER (?x1 != fb:m.04nbpg5) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "utterance": "what is the fuel economy of a 2008 hyundai accent gls sedan in the city", 
    "id": 633
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.offense fb:en.driving_under_the_influence . FILTER (?x2 != fb:en.driving_under_the_influence) . ?x2 fb:celebrities.legal_entanglement.celebrity ?x1 } } } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(count (!fb:celebrities.legal_entanglement.celebrity ((lambda x (fb:celebrities.legal_entanglement.offense (var x))) fb:en.driving_under_the_influence)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.offense fb:m.02k2cg . FILTER (?x2 != fb:m.02k2cg) . ?x2 fb:celebrities.legal_entanglement.celebrity ?x1 } } } LIMIT 9999", 
    "utterance": "how many celebrities have been charged with driving under the influence", 
    "id": 634
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_medal_honor.event fb:en.tennis_at_the_1896_summer_olympics_mens_singles . FILTER (?x1 != fb:en.tennis_at_the_1896_summer_olympics_mens_singles) . ?x1 fb:olympics.olympic_medal_honor.medal fb:en.gold_medal . FILTER (?x1 != fb:en.gold_medal) . ?x1 fb:olympics.olympic_medal_honor.medalist ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "John Pius Boland"
    ], 
    "targetFormula": "(!fb:olympics.olympic_medal_honor.medalist (and ( (lambda x (fb:olympics.olympic_medal_honor.event (var x))) fb:en.tennis_at_the_1896_summer_olympics_mens_singles) ((lambda x (fb:olympics.olympic_medal_honor.medal (var x))) fb:en.gold_medal)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:olympics.olympic_medal_honor.event fb:m.0cf3_w . FILTER (?x1 != fb:m.0cf3_w) . ?x1 fb:olympics.olympic_medal_honor.medal fb:m.02lpp7 . FILTER (?x1 != fb:m.02lpp7) . ?x1 fb:olympics.olympic_medal_honor.medalist ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who got the gold medal in men_s singles tennis at the 1896 summer olympics", 
    "id": 635
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.award fb:en.grammy_award_for_best_spoken_word_album . FILTER (?x1 != fb:en.grammy_award_for_best_spoken_word_album) . ?x1 fb:award.award_honor.award_winner fb:en.barack_obama . FILTER (?x1 != fb:en.barack_obama) . ?x1 fb:award.award_honor.honored_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Dreams from My Father", 
      "The Audacity of Hope: Thoughts on Reclaiming the American Dream"
    ], 
    "targetFormula": "(!fb:award.award_honor.honored_for (and ((lambda x (fb:award.award_honor.award (var x))) fb:en.grammy_award_for_best_spoken_word_album) ((lambda x (fb:award.award_honor.award_winner (var x))) fb:en.barack_obama)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.award fb:m.02grdc . FILTER (?x1 != fb:m.02grdc) . ?x1 fb:award.award_honor.award_winner fb:m.02mjmr . FILTER (?x1 != fb:m.02mjmr) . ?x1 fb:award.award_honor.honored_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "for what albums did barack obama win a grammy award for best spoken word album", 
    "id": 636
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:projects.project_participation.project fb:en.design_and_construction_of_the_golden_gate_bridge . FILTER (?x2 != fb:en.design_and_construction_of_the_golden_gate_bridge) . ?x2 fb:projects.project_participation.participant ?x1 } } } LIMIT 9999", 
    "result": [
      "9"
    ], 
    "targetFormula": "(count (!fb:projects.project_participation.participant ( (lambda x (fb:projects.project_participation.project (var x))) fb:en.design_and_construction_of_the_golden_gate_bridge)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:projects.project_participation.project fb:m.05g__g4 . FILTER (?x2 != fb:m.05g__g4) . ?x2 fb:projects.project_participation.participant ?x1 } } } LIMIT 9999", 
    "utterance": "how many people worked on the design and construction of the golden gate bridge", 
    "id": 637
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:martial_arts.martial_arts_certification.qualification fb:en.fifth_degree . FILTER (?x1 != fb:en.fifth_degree) . ?x1 fb:martial_arts.martial_arts_certification.art fb:en.seishindo_kenpo . FILTER (?x1 != fb:en.seishindo_kenpo) . ?x1 fb:martial_arts.martial_arts_certification.person fb:en.cathy_landers . FILTER (?x1 != fb:en.cathy_landers) . ?x1 fb:martial_arts.martial_arts_certification.date ?x2 } LIMIT 9999", 
    "result": [
      "2008-08-16"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_arts_certification.date (and (and ((lambda x (fb:martial_arts.martial_arts_certification.qualification (var x))) fb:en.fifth_degree) ((lambda x (fb:martial_arts.martial_arts_certification.art (var x))) fb:en.seishindo_kenpo)) ((lambda x (fb:martial_arts.martial_arts_certification.person (var x))) fb:en.cathy_landers)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:martial_arts.martial_arts_certification.qualification fb:m.02_6p8w . FILTER (?x1 != fb:m.02_6p8w) . ?x1 fb:martial_arts.martial_arts_certification.art fb:m.03cjpb3 . FILTER (?x1 != fb:m.03cjpb3) . ?x1 fb:martial_arts.martial_arts_certification.person fb:m.075r1_w . FILTER (?x1 != fb:m.075r1_w) . ?x1 fb:martial_arts.martial_arts_certification.date ?x2 } LIMIT 9999", 
    "utterance": "when was cathy landers certified as a fifth degree black belt in seishindo kenpo", 
    "id": 638
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_honor.award fb:en.hugo_award_for_best_novel . FILTER (?x1 != fb:en.hugo_award_for_best_novel) . ?x1 fb:award.award_honor.honored_for fb:en.harry_potter_and_the_goblet_of_fire . FILTER (?x1 != fb:en.harry_potter_and_the_goblet_of_fire) . ?x1 fb:award.award_honor.year ?x2 } LIMIT 9999", 
    "result": [
      "2001"
    ], 
    "targetFormula": "(!fb:award.award_honor.year (and ((lambda x (fb:award.award_honor.award (var x))) fb:en.hugo_award_for_best_novel) ((lambda x (fb:award.award_honor.honored_for (var x))) fb:en.harry_potter_and_the_goblet_of_fire)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:award.award_honor.award fb:m.01yz0x . FILTER (?x1 != fb:m.01yz0x) . ?x1 fb:award.award_honor.honored_for fb:m.01m5g_ . FILTER (?x1 != fb:m.01m5g_) . ?x1 fb:award.award_honor.year ?x2 } LIMIT 9999", 
    "utterance": "in what year did harry potter and the goblet of fire win the hugo award for best novel", 
    "id": 639
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:royalty.chivalric_order_position_tenure.chivalric_office fb:en.grand_master . FILTER (?x2 != fb:en.grand_master) . ?x2 fb:royalty.chivalric_order_position_tenure.order fb:en.order_of_the_most_holy_annunciation . FILTER (?x2 != fb:en.order_of_the_most_holy_annunciation) . ?x2 fb:royalty.chivalric_order_position_tenure.officer ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:royalty.chivalric_order_position_tenure.officer (and ( (lambda x (fb:royalty.chivalric_order_position_tenure.chivalric_office (var x))) fb:en.grand_master) ( (lambda x (fb:royalty.chivalric_order_position_tenure.order (var x))) fb:en.order_of_the_most_holy_annunciation))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:royalty.chivalric_order_position_tenure.chivalric_office fb:m.092pxy . FILTER (?x2 != fb:m.092pxy) . ?x2 fb:royalty.chivalric_order_position_tenure.order fb:m.068kn_ . FILTER (?x2 != fb:m.068kn_) . ?x2 fb:royalty.chivalric_order_position_tenure.officer ?x1 } } } LIMIT 9999", 
    "utterance": "how many people have held the title of grand master of the order of the most holy annunciation", 
    "id": 640
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.award fb:m.04d215m . FILTER (?x1 != fb:m.04d215m) . ?x1 fb:award.award_honor.honored_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Charlie's Angels", 
      "Men in Black", 
      "Training Day", 
      "Con Air", 
      "The Fresh Prince of Bel-Air", 
      "Runaway Bride", 
      "Titanic", 
      "City of Angels", 
      "8 Mile", 
      "Austin Powers: The Spy Who Shagged Me", 
      "Beauty and The Beast", 
      "Wild Wild West", 
      "I'm with You"
    ], 
    "targetFormula": "(!fb:award.award_honor.honored_for ((lambda x (fb:award.award_honor.award (var x))) fb:m.04d215m))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:award.award_honor.award fb:m.04d215m . FILTER (?x1 != fb:m.04d215m) . ?x1 fb:award.award_honor.honored_for ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what movies won ascap film and television music awards for most performed songs from motion pictures", 
    "id": 641
  }
]
