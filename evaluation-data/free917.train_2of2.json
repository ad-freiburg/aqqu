[
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.hurricane_ivan fb:meteorology.tropical_cyclone.affected_areas ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:meteorology.tropical_cyclone.affected_areas fb:en.hurricane_ivan))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03tn0n fb:meteorology.tropical_cyclone.affected_areas ?x1 } } } LIMIT 9999", 
    "utterance": "how many areas were affected by hurricane ivan", 
    "id": 463
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.boston_herald fb:book.periodical.first_issue_date ?x1 . ?x1 fb:book.periodical_publication_date.date ?x2 } LIMIT 9999", 
    "result": [
      "1982"
    ], 
    "targetFormula": "(!fb:book.periodical_publication_date.date (!fb:book.periodical.first_issue_date fb:en.boston_herald))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.01bsf fb:book.periodical.first_issue_date ?x1 . ?x1 fb:book.periodical_publication_date.date ?x2 } LIMIT 9999", 
    "utterance": "when was the boston herald first published", 
    "id": 381
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:media_common.literary_genre.books_in_this_genre fb:en.the_hound_of_the_baskervilles . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Novel", 
      "Mystery", 
      "Crime Fiction", 
      "Detective fiction"
    ], 
    "targetFormula": "(fb:media_common.literary_genre.books_in_this_genre fb:en.the_hound_of_the_baskervilles)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { ?x1 fb:media_common.literary_genre.books_in_this_genre fb:m.07g52 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genre is the hound of the baskervilles", 
    "id": 395
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.glutamine fb:biology.amino_acid.codons ?x1 } LIMIT 9999", 
    "result": [
      "CAA", 
      "CAG"
    ], 
    "targetFormula": "(!fb:biology.amino_acid.codons fb:en.glutamine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0h1xy fb:biology.amino_acid.codons ?x1 } LIMIT 9999", 
    "utterance": "what are the dna codons of glutamine", 
    "id": 232
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:organization.leadership.role fb:en.chief_executive_officer . FILTER (?x1 != fb:en.chief_executive_officer) . ?x1 fb:organization.leadership.organization fb:en.apple_inc . FILTER (?x1 != fb:en.apple_inc) . ?x1 fb:organization.leadership.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "John Sculley", 
      "Michael Scott", 
      "Gil Amelio", 
      "Timothy D. Cook", 
      "Mike Markkula", 
      "Steve Jobs", 
      "Michael Spindler"
    ], 
    "targetFormula": "(!fb:organization.leadership.person (and ((lambda x (fb:organization.leadership.role (var x))) fb:en.chief_executive_officer) ((lambda x (fb:organization.leadership.organization (var x))) fb:en.apple_inc)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:organization.leadership.role fb:m.0dq_5 . FILTER (?x1 != fb:m.0dq_5) . ?x1 fb:organization.leadership.organization fb:m.0k8z . FILTER (?x1 != fb:m.0k8z) . ?x1 fb:organization.leadership.person ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who is the ceo of apple", 
    "id": 16
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.ron_glass . FILTER (?x2 != fb:en.ron_glass) . ?x2 fb:tv.regular_tv_appearance.series ?x1 } } } LIMIT 9999", 
    "result": [
      "7"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.series ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.ron_glass)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.03h82p . FILTER (?x2 != fb:m.03h82p) . ?x2 fb:tv.regular_tv_appearance.series ?x1 } } } LIMIT 9999", 
    "utterance": "how many tv shows was ron glass in", 
    "id": 175
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:travel.travel_destination_monthly_climate.travel_destination fb:en.sydney . FILTER (?x1 != fb:en.sydney) . ?x1 fb:travel.travel_destination_monthly_climate.month fb:en.august . FILTER (?x1 != fb:en.august) . ?x1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?x2 } LIMIT 9999", 
    "result": [
      "17"
    ], 
    "targetFormula": "(!fb:travel.travel_destination_monthly_climate.average_max_temp_c (and ((lambda x (fb:travel.travel_destination_monthly_climate.travel_destination (var x))) fb:en.sydney) ((lambda x (fb:travel.travel_destination_monthly_climate.month (var x))) fb:en.august)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:travel.travel_destination_monthly_climate.travel_destination fb:m.06y57 . FILTER (?x1 != fb:m.06y57) . ?x1 fb:travel.travel_destination_monthly_climate.month fb:m.0ll3 . FILTER (?x1 != fb:m.0ll3) . ?x1 fb:travel.travel_destination_monthly_climate.average_max_temp_c ?x2 } LIMIT 9999", 
    "utterance": "what is the average temperature in sydney in august", 
    "id": 549
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:finance.exchange_rate.source_of_exchange fb:en.danish_krone . FILTER (?x1 != fb:en.danish_krone) . ?x1 fb:finance.exchange_rate.target_of_exchange ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Euro", 
      "United States dollar", 
      "New Zealand dollar", 
      "UK \u00a3", 
      "Australian dollar", 
      "Canadian dollar", 
      "Singapore dollar", 
      "Brazilian real", 
      "Malaysian ringgit", 
      "Bulgarian lev", 
      "Swiss franc", 
      "Revaluation of the Turkish Lira"
    ], 
    "targetFormula": "(!fb:finance.exchange_rate.target_of_exchange ((lambda x (fb:finance.exchange_rate.source_of_exchange (var x))) fb:en.danish_krone))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:finance.exchange_rate.source_of_exchange fb:m.01j9nc . FILTER (?x1 != fb:m.01j9nc) . ?x1 fb:finance.exchange_rate.target_of_exchange ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "how much danish kroner is a us dollar worth", 
    "id": 387
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.fleet_foxes fb:music.artist.album ?x1 } } } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(count (!fb:music.artist.album fb:en.fleet_foxes))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.03qmrpl fb:music.artist.album ?x1 } } } LIMIT 9999", 
    "utterance": "how many albums has fleet foxes released", 
    "id": 321
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.independence_hall fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Philadelphia"
    ], 
    "targetFormula": "(!fb:location.location.containedby fb:en.independence_hall)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01_yh5 fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is independence hall located", 
    "id": 180
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.seabiscuit fb:biology.organism.height_meters ?x1 } LIMIT 9999", 
    "result": [
      "1.57"
    ], 
    "targetFormula": "(!fb:biology.organism.height_meters fb:en.seabiscuit)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01g14f fb:biology.organism.height_meters ?x1 } LIMIT 9999", 
    "utterance": "how tall was seabiscuit", 
    "id": 19
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.tostitos . FILTER (?x1 != fb:en.tostitos) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.tostitos))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.050s87 . FILTER (?x1 != fb:m.050s87) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when was tostitos introduced", 
    "id": 80
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:en.newscaster . FILTER (?x1 != fb:en.newscaster) . ?x1 fb:tv.tv_regular_personal_appearance.program fb:en.cbs_evening_news . FILTER (?x1 != fb:en.cbs_evening_news) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1948\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1949\"^^xsd:datetime)) . ?x1 fb:tv.tv_regular_personal_appearance.from ?x2 . FILTER (?x1 != \"1948\"^^xsd:datetime) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Douglas Edwards"
    ], 
    "targetFormula": "(!fb:tv.tv_regular_personal_appearance.person (and (and ((lambda x (fb:tv.tv_regular_personal_appearance.appearance_type (var x))) fb:en.newscaster) ((lambda x (fb:tv.tv_regular_personal_appearance.program (var x))) fb:en.cbs_evening_news)) ((lambda x (fb:tv.tv_regular_personal_appearance.from (var x))) (date 1948 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:tv.tv_regular_personal_appearance.appearance_type fb:m.025m070 . FILTER (?x1 != fb:m.025m070) . ?x1 fb:tv.tv_regular_personal_appearance.program fb:m.01bndp . FILTER (?x1 != fb:m.01bndp) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"1948\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"1949\"^^xsd:datetime)) . ?x1 fb:tv.tv_regular_personal_appearance.from ?x2 . FILTER (?x1 != \"1948\"^^xsd:datetime) . ?x1 fb:tv.tv_regular_personal_appearance.person ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was the newscaster in 1948 on cbs evening news", 
    "id": 520
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.royal_institute_of_british_architects fb:award.award_presenting_organization.awards_presented ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Stirling Prize"
    ], 
    "targetFormula": "(!fb:award.award_presenting_organization.awards_presented fb:en.royal_institute_of_british_architects)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0386gq fb:award.award_presenting_organization.awards_presented ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what award does the royal institute of british architects present", 
    "id": 621
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:exhibitions.exhibition_run.exhibition fb:en.armory_show . FILTER (?x1 != fb:en.armory_show) . ?x1 fb:exhibitions.exhibition_run.venue ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Art Institute of Chicago Building", 
      "69th Regiment Armory", 
      "Copley Society of Art"
    ], 
    "targetFormula": "(!fb:exhibitions.exhibition_run.venue ((lambda x (fb:exhibitions.exhibition_run.exhibition (var x))) fb:en.armory_show))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:exhibitions.exhibition_run.exhibition fb:m.01_ggr . FILTER (?x1 != fb:m.01_ggr) . ?x1 fb:exhibitions.exhibition_run.venue ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "where was the armory show exhibited", 
    "id": 204
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.j_r_r_tolkien fb:language.language_creator.languages_created ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:language.language_creator.languages_created fb:en.j_r_r_tolkien))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.041h0 fb:language.language_creator.languages_created ?x1 } } } LIMIT 9999", 
    "utterance": "how many languages has jrr tolkein created", 
    "id": 366
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.2_fast_2_furious fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "John Singleton"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.2_fast_2_furious)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.024lff fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed 2 fast 2 furious", 
    "id": 98
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fq7hj3 fb:projects.project.planned_completion_date ?x1 } LIMIT 9999", 
    "result": [
      "2013"
    ], 
    "targetFormula": "(!fb:projects.project.planned_completion_date fb:m.0fq7hj3)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fq7hj3 fb:projects.project.planned_completion_date ?x1 } LIMIT 9999", 
    "utterance": "when is the restoration of the rijksmuseum supposed to finish", 
    "id": 610
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.rolls-royce_merlin fb:engineering.piston_engine.capacity ?x1 } LIMIT 9999", 
    "result": [
      "27"
    ], 
    "targetFormula": "(!fb:engineering.piston_engine.capacity fb:en.rolls-royce_merlin)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.09qx4 fb:engineering.piston_engine.capacity ?x1 } LIMIT 9999", 
    "utterance": "what is the capacity of a rolls royce merlin", 
    "id": 432
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.bruce_almighty fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2003-05-23"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.bruce_almighty)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01jft4 fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when was bruce almighty released", 
    "id": 137
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.omarion_grandberry fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "result": [
      "1984-11-12"
    ], 
    "targetFormula": "(!fb:people.person.date_of_birth fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.019g40 fb:people.person.date_of_birth ?x1 } LIMIT 9999", 
    "utterance": "when was omarion born", 
    "id": 12
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.san_francisco fb:travel.travel_destination.guidebooks ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "San Francisco City Guide", 
      "Lonely Planet: California"
    ], 
    "targetFormula": "(!fb:travel.travel_destination.guidebooks fb:en.san_francisco)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d6lp fb:travel.travel_destination.guidebooks ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what guidebooks are there for san francisco", 
    "id": 390
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.africa fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [
      "30221532"
    ], 
    "targetFormula": "(!fb:location.location.area fb:en.africa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dg3n1 fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is africa 's area", 
    "id": 14
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_network_duration.program fb:en.gilligans_island . FILTER (?x1 != fb:en.gilligans_island) . ?x1 fb:tv.tv_network_duration.network ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "CBS"
    ], 
    "targetFormula": "(!fb:tv.tv_network_duration.network ((lambda x (fb:tv.tv_network_duration.program (var x))) fb:en.gilligans_island))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.tv_network_duration.program fb:m.0m0sm . FILTER (?x1 != fb:m.0m0sm) . ?x1 fb:tv.tv_network_duration.network ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "on what network was gilligan_s island first aired", 
    "id": 512
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mona_lisa fb:visual_art.artwork.artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Leonardo da Vinci"
    ], 
    "targetFormula": "(!fb:visual_art.artwork.artist fb:en.mona_lisa)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0jbg2 fb:visual_art.artwork.artist ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who painted the mona lisa", 
    "id": 45
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tempelhof_international_airport fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Berlin", 
      "Germany"
    ], 
    "targetFormula": "(!fb:location.location.containedby fb:en.tempelhof_international_airport)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01nxx6 fb:location.location.containedby ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where is the tempelhof international airport located", 
    "id": 553
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.illinois fb:location.location.time_zones ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Central Time Zone", 
      "UTC\u221206:00"
    ], 
    "targetFormula": "(!fb:location.location.time_zones fb:en.illinois)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03v0t fb:location.location.time_zones ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what time zone is illinois", 
    "id": 93
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.offense fb:en.driving_under_the_influence . FILTER (?x2 != fb:en.driving_under_the_influence) . ?x2 fb:celebrities.legal_entanglement.celebrity ?x1 } } } LIMIT 9999", 
    "result": [
      "14"
    ], 
    "targetFormula": "(count (!fb:celebrities.legal_entanglement.celebrity ((lambda x (fb:celebrities.legal_entanglement.offense (var x))) fb:en.driving_under_the_influence)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.offense fb:m.02k2cg . FILTER (?x2 != fb:m.02k2cg) . ?x2 fb:celebrities.legal_entanglement.celebrity ?x1 } } } LIMIT 9999", 
    "utterance": "how many celebrities have been charged with driving under the influence", 
    "id": 634
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_nomination.award fb:en.academy_award_for_best_director . FILTER (?x1 != fb:en.academy_award_for_best_director) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2011\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2012\"^^xsd:datetime)) . ?x1 fb:award.award_nomination.year ?x2 . FILTER (?x1 != \"2011\"^^xsd:datetime) . ?x1 fb:award.award_nomination.award_nominee ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "result": [
      "Martin Scorsese", 
      "Michel Hazanavicius", 
      "Woody Allen", 
      "Terrence Malick", 
      "Alexander Payne"
    ], 
    "targetFormula": "(!fb:award.award_nomination.award_nominee (and ((lambda x (fb:award.award_nomination.award (var x))) fb:en.academy_award_for_best_director) ((lambda x (fb:award.award_nomination.year (var x))) (date 2011 -1 -1))))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 ?x3name WHERE { ?x1 fb:award.award_nomination.award fb:m.0gs9p . FILTER (?x1 != fb:m.0gs9p) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2011\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2012\"^^xsd:datetime)) . ?x1 fb:award.award_nomination.year ?x2 . FILTER (?x1 != \"2011\"^^xsd:datetime) . ?x1 fb:award.award_nomination.award_nominee ?x3 . OPTIONAL { ?x3 fb:type.object.name ?x3name } } LIMIT 9999", 
    "utterance": "who was nominated for the academy award for best director in 2011", 
    "id": 620
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.a_prairie_home_companion fb:radio.radio_program.first_broadcast ?x1 } LIMIT 9999", 
    "result": [
      "1974-07-06"
    ], 
    "targetFormula": "(!fb:radio.radio_program.first_broadcast fb:en.a_prairie_home_companion)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0gly1 fb:radio.radio_program.first_broadcast ?x1 } LIMIT 9999", 
    "utterance": "when did a prairie home companion first air", 
    "id": 389
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.manhattan_project fb:projects.project.project_focus ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Atomic bombings of Hiroshima and Nagasaki", 
      "Nuclear weapon"
    ], 
    "targetFormula": "(!fb:projects.project.project_focus fb:en.manhattan_project)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04yp5 fb:projects.project.project_focus ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the manhattan project about", 
    "id": 230
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.adrienne_roy fb:comic_books.comic_book_colorist.comic_stories_colored ?x1 } } } LIMIT 9999", 
    "result": [
      "6"
    ], 
    "targetFormula": "(count (!fb:comic_books.comic_book_colorist.comic_stories_colored fb:en.adrienne_roy))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.09fw6v fb:comic_books.comic_book_colorist.comic_stories_colored ?x1 } } } LIMIT 9999", 
    "utterance": "how many comic stories has adrienne roy colored", 
    "id": 480
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.iowa fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:en.iowa) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "2818401", 
      "2791969", 
      "2891119", 
      "2858615", 
      "3062309", 
      "2931997", 
      "2929067", 
      "2953635", 
      "2934234", 
      "2907985", 
      "2850746", 
      "2941999", 
      "3032870", 
      "2888190", 
      "2902872", 
      "2829684", 
      "2999212", 
      "2781018", 
      "3049883", 
      "2768393", 
      "2880000", 
      "2770590", 
      "2964454", 
      "2917634", 
      "3016734", 
      "2797613", 
      "2867373", 
      "2767006", 
      "3074186", 
      "2382000", 
      "2439000", 
      "2301000", 
      "2756000", 
      "2880847", 
      "2742000", 
      "2227000", 
      "2217000", 
      "2428000", 
      "2543000", 
      "2708000", 
      "2223000", 
      "2249000", 
      "2305000", 
      "2475000", 
      "2679000", 
      "2729000", 
      "2495000", 
      "2625000", 
      "2747000", 
      "2509000", 
      "2214000", 
      "2220000", 
      "2366000", 
      "2441000", 
      "2494000", 
      "2746000", 
      "2918069", 
      "2425000", 
      "2228000", 
      "2450000", 
      "2629000", 
      "2825368", 
      "2915739", 
      "2460000", 
      "2537000", 
      "2334000", 
      "2703000", 
      "2805000", 
      "2222000", 
      "2279000", 
      "2578000", 
      "2626000", 
      "2212000", 
      "2903082", 
      "2338000", 
      "2420000", 
      "2432000", 
      "2750000", 
      "2400000", 
      "2407000", 
      "2482000", 
      "2510000", 
      "2467000", 
      "2308000", 
      "2803000", 
      "2867530", 
      "2913573", 
      "2231000", 
      "2211000", 
      "2379000", 
      "2427000", 
      "2489000", 
      "2498000", 
      "2520000", 
      "2860287", 
      "2863715", 
      "2224771", 
      "2404021", 
      "674913", 
      "2231853", 
      "192214", 
      "2621073", 
      "2538268", 
      "2470939", 
      "1194020", 
      "2757537", 
      "2824376", 
      "1624615", 
      "2913808", 
      "1912297", 
      "43112", 
      "2870547", 
      "2836972", 
      "2982644", 
      "2851705", 
      "2524000", 
      "2351000", 
      "2762000", 
      "2793000", 
      "2491000", 
      "2617000", 
      "2716000", 
      "2376000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number ((lambda x (!fb:location.statistical_region.population (var x))) fb:en.iowa))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.03s0w fb:location.statistical_region.population ?x1 . FILTER (?x1 != fb:m.03s0w) . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "what is the population in iowa", 
    "id": 115
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.hinduism fb:religion.religion.deities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Krishna", 
      "Murugan", 
      "Jagaddhatri", 
      "Devi", 
      "Durga", 
      "Guardians of the directions", 
      "Nandi", 
      "Radha", 
      "Ganesha", 
      "Lakshmi", 
      "Adimurti", 
      "Garuda", 
      "Hanuman", 
      "Indra", 
      "Varuna", 
      "Vayu", 
      "Saraswati", 
      "Khatushyam", 
      "Shakti", 
      "Agni", 
      "Balarama", 
      "Rohini", 
      "Kamadeva", 
      "Brahman", 
      "Prajapati", 
      "Jagannath", 
      "Kalki", 
      "Deva", 
      "N\u0101ga", 
      "Ayyappan", 
      "Vishnu", 
      "Pashupati", 
      "Rama", 
      "Vishvakarman", 
      "Aru\u1e47a", 
      "Dhara", 
      "Nirrta", 
      "Yama", 
      "Daksha", 
      "Shiva", 
      "Kali", 
      "Bhadra", 
      "Surya", 
      "Harihara", 
      "Anala", 
      "Radha Krishna", 
      "Apam Napat", 
      "Revanta", 
      "Bhaga", 
      "Maruts", 
      "Trimurti", 
      "B\u1e5bhaspati", 
      "Bhagavan", 
      "Mariamman", 
      "Lakshmana", 
      "Savitr", 
      "Ribhus", 
      "Nara-Narayana", 
      "Dhatri", 
      "Rishabha", 
      "Yama", 
      "Anila", 
      "Tvastar", 
      "Bhumiya", 
      "Mitravinda", 
      "Brahma"
    ], 
    "targetFormula": "(!fb:religion.religion.deities fb:en.hinduism)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03j6c fb:religion.religion.deities ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the deities of hinduism", 
    "id": 134
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tai_chi_chuan fb:martial_arts.martial_art.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Strike", 
      "Grappling", 
      "Internal"
    ], 
    "targetFormula": "(!fb:martial_arts.martial_art.category fb:en.tai_chi_chuan)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07k4r fb:martial_arts.martial_art.category ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what category of martial arts is tai chi chuan", 
    "id": 468
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:american_football.football_historical_roster_position.team fb:en.philadelphia_eagles . FILTER (?x1 != fb:en.philadelphia_eagles) . ?x1 fb:american_football.football_historical_roster_position.player fb:en.david_akers . FILTER (?x1 != fb:en.david_akers) . ?x1 fb:american_football.football_historical_roster_position.number ?x2 } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(!fb:american_football.football_historical_roster_position.number (and ( (lambda x (fb:american_football.football_historical_roster_position.team (var x))) fb:en.philadelphia_eagles) ( (lambda x (fb:american_football.football_historical_roster_position.player (var x))) fb:en.david_akers)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:american_football.football_historical_roster_position.team fb:m.05tg3 . FILTER (?x1 != fb:m.05tg3) . ?x1 fb:american_football.football_historical_roster_position.player fb:m.02ctg7 . FILTER (?x1 != fb:m.02ctg7) . ?x1 fb:american_football.football_historical_roster_position.number ?x2 } LIMIT 9999", 
    "utterance": "what number was david akers on the philadelphia eagles", 
    "id": 569
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.japanese_yen fb:finance.currency.prefix_symbol ?x1 } LIMIT 9999", 
    "result": [
      "\u00a5"
    ], 
    "targetFormula": "(!fb:finance.currency.prefix_symbol fb:en.japanese_yen)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.088n7 fb:finance.currency.prefix_symbol ?x1 } LIMIT 9999", 
    "utterance": "what is the symbol for yen", 
    "id": 59
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.powershot_tx1 fb:digicams.digital_camera.street_price ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "result": [
      "499.99"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.amount (!fb:digicams.digital_camera.street_price fb:en.powershot_tx1))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.03csvxk fb:digicams.digital_camera.street_price ?x1 . ?x1 fb:measurement_unit.dated_money_value.amount ?x2 } LIMIT 9999", 
    "utterance": "how much did a canon powershot tx1 cost when it was released", 
    "id": 604
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cs96 fb:meteorology.cloud.appearance ?x1 } LIMIT 9999", 
    "result": [
      "Thin, wisplike strands"
    ], 
    "targetFormula": "(!fb:meteorology.cloud.appearance fb:m.0cs96)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0cs96 fb:meteorology.cloud.appearance ?x1 } LIMIT 9999", 
    "utterance": "what do cirrus clouds look like", 
    "id": 125
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.oracle_corporation fb:computer.software_developer.software ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Java", 
      "NetBeans", 
      "OpenGrok", 
      "Solaris Operating System", 
      "Oracle Media Objects", 
      "MySQL", 
      "Berkeley DB", 
      "OpenOffice.org", 
      "Network Security Services", 
      "OpenOffice Draw", 
      "Oracle iPlanet Web Server", 
      "BEA WebLogic", 
      "Oracle Application Server", 
      "GlassFish", 
      "JavaFX", 
      "Oracle Application Express", 
      "TopLink", 
      "dbx", 
      "Sun Java System Web Proxy Server", 
      "OpenOffice Impress", 
      "VirtualBox", 
      "Apache OpenOffice Writer", 
      "OpenOffice Calc", 
      "InnoDB", 
      "Oracle Database", 
      "OC4J", 
      "Hyperion Planning", 
      "OpenOffice Base", 
      "StarOffice", 
      "OpenSolaris", 
      "MySQL Cluster", 
      "MyISAM", 
      "MySQL Enterprise", 
      "Oracle Data Mining", 
      "Oracle Spatial and Graph", 
      "Oracle Database", 
      "MySQL Workbench", 
      "JBuilder", 
      "Apache OpenOffice Math"
    ], 
    "targetFormula": "(!fb:computer.software_developer.software fb:en.oracle_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05njw fb:computer.software_developer.software ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what software has oracle designed", 
    "id": 151
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.sesame_street fb:tv.tv_program.spin_offs ?x1 } } } LIMIT 9999", 
    "result": [
      "19"
    ], 
    "targetFormula": "(count (!fb:tv.tv_program.spin_offs fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0cwrr fb:tv.tv_program.spin_offs ?x1 } } } LIMIT 9999", 
    "utterance": "how many spin offs does sesame street have", 
    "id": 362
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.niagara_falls fb:geography.waterfall.height ?x1 } LIMIT 9999", 
    "result": [
      "51"
    ], 
    "targetFormula": "(!fb:geography.waterfall.height fb:en.niagara_falls)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0dpk_ fb:geography.waterfall.height ?x1 } LIMIT 9999", 
    "utterance": "how high is niagara falls", 
    "id": 33
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.st_louis_cardinals fb:baseball.baseball_team.division ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "National League Central"
    ], 
    "targetFormula": "(!fb:baseball.baseball_team.division fb:en.st_louis_cardinals)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06x68 fb:baseball.baseball_team.division ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "in what division are the st. louis cardinals", 
    "id": 414
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.positron fb:physics.particle.spin ?x1 } LIMIT 9999", 
    "result": [
      "0.5"
    ], 
    "targetFormula": "(!fb:physics.particle.spin fb:en.positron)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.065sn fb:physics.particle.spin ?x1 } LIMIT 9999", 
    "utterance": "what is the spin of a positron", 
    "id": 107
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.internal_combustion_engine fb:engineering.engine.energy_source ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:engineering.engine.energy_source fb:en.internal_combustion_engine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.03tpm fb:engineering.engine.energy_source ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what fuel does an internal combustion engine use", 
    "id": 506
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.wal-mart fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:business.business_operation.industry fb:en.wal-mart))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0841v fb:business.business_operation.industry ?x1 } } } LIMIT 9999", 
    "utterance": "how many industries does walmart consist of", 
    "id": 406
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.school_district_of_philadelphia fb:education.school_district.schools ?x1 } } } LIMIT 9999", 
    "result": [
      "293"
    ], 
    "targetFormula": "(count (!fb:education.school_district.schools fb:en.school_district_of_philadelphia))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.074dxf fb:education.school_district.schools ?x1 } } } LIMIT 9999", 
    "utterance": "how many schools are in the school district of philadelphia", 
    "id": 601
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.earth fb:location.location.area ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:location.location.area fb:en.earth)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02j71 fb:location.location.area ?x1 } LIMIT 9999", 
    "utterance": "what is the earth 's area", 
    "id": 43
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.mexican_federal_highway_1 fb:transportation.road.length ?x1 } LIMIT 9999", 
    "result": [
      "1711"
    ], 
    "targetFormula": "(!fb:transportation.road.length fb:en.mexican_federal_highway_1)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07x1kd fb:transportation.road.length ?x1 } LIMIT 9999", 
    "utterance": "how long is the mexican federal highway 1", 
    "id": 350
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.hubble_space_telescope fb:spaceflight.satellite.dry_mass_kg ?x1 } LIMIT 9999", 
    "result": [
      "11110"
    ], 
    "targetFormula": "(!fb:spaceflight.satellite.dry_mass_kg fb:en.hubble_space_telescope)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0b0m2 fb:spaceflight.satellite.dry_mass_kg ?x1 } LIMIT 9999", 
    "utterance": "what is the dry mass of the hubble space telescope", 
    "id": 525
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09y2k2 fb:dining.cuisine.ingredients ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Marsala wine", 
      "Italian Integrale flour", 
      "Sage", 
      "Parmigiano-Reggiano", 
      "Ham", 
      "Tomato", 
      "Guanciale", 
      "Extra virgin olive oil", 
      "Pecorino Romano", 
      "Pasta"
    ], 
    "targetFormula": "(!fb:dining.cuisine.ingredients fb:m.09y2k2)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09y2k2 fb:dining.cuisine.ingredients ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what ingredients are in italian cuisine", 
    "id": 289
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.067y_k7 fb:book.written_work.author ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Julian Lloyd Webber"
    ], 
    "targetFormula": "(!fb:book.written_work.author fb:m.067y_k7)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.067y_k7 fb:book.written_work.author ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who wrote travels with my cello", 
    "id": 118
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:fashion.designer_label_association.label fb:en.bill_blass_limited . FILTER (?x1 != fb:en.bill_blass_limited) . ?x1 fb:fashion.designer_label_association.designer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Michael Bastian", 
      "Bill Blass", 
      "Peter Som", 
      "Jose Solis"
    ], 
    "targetFormula": "(!fb:fashion.designer_label_association.designer ((lambda x (fb:fashion.designer_label_association.label (var x))) fb:en.bill_blass_limited))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:fashion.designer_label_association.label fb:m.02qkgwj . FILTER (?x1 != fb:m.02qkgwj) . ?x1 fb:fashion.designer_label_association.designer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who designs for bill blass limited", 
    "id": 177
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.victoria_of_the_united_kingdom fb:royalty.chivalric_order_founder.orders_founded ?x1 } } } LIMIT 9999", 
    "result": [
      "3"
    ], 
    "targetFormula": "(count (!fb:royalty.chivalric_order_founder.orders_founded fb:en.victoria_of_the_united_kingdom))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0cw10 fb:royalty.chivalric_order_founder.orders_founded ?x1 } } } LIMIT 9999", 
    "utterance": "how many orders did queen victoria found", 
    "id": 333
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.sexual_orientation_phase.celebrity fb:en.britney_spears . FILTER (?x1 != fb:en.britney_spears) . ?x1 fb:celebrities.sexual_orientation_phase.sexual_orientation ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Heterosexuality"
    ], 
    "targetFormula": "(!fb:celebrities.sexual_orientation_phase.sexual_orientation ((lambda x (fb:celebrities.sexual_orientation_phase.celebrity (var x))) fb:en.britney_spears))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.sexual_orientation_phase.celebrity fb:m.015f7 . FILTER (?x1 != fb:m.015f7) . ?x1 fb:celebrities.sexual_orientation_phase.sexual_orientation ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what is britney spears' sexual orientation", 
    "id": 370
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_psychiatrist fb:tv.tv_series_episode.next_episode ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Waldorf Salad"
    ], 
    "targetFormula": "(!fb:tv.tv_series_episode.next_episode fb:en.the_psychiatrist)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0dtt0z fb:tv.tv_series_episode.next_episode ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what was the fawlty towers episode after the psychiatrist", 
    "id": 589
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.egypt fb:olympics.olympic_participating_country.olympics_participated_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "1936 Summer Olympics", 
      "2008 Summer Olympics", 
      "1952 Summer Olympics"
    ], 
    "targetFormula": "(!fb:olympics.olympic_participating_country.olympics_participated_in fb:en.egypt)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02k54 fb:olympics.olympic_participating_country.olympics_participated_in ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what olympics has egypt participated in", 
    "id": 287
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.swedish_krona fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "SEK"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.swedish_krona)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0485n fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the swedish krona", 
    "id": 403
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.roller_soaker fb:amusement_parks.ride.height_restriction ?x1 } LIMIT 9999", 
    "result": [
      "1.0668"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.height_restriction fb:en.roller_soaker)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0gppsv fb:amusement_parks.ride.height_restriction ?x1 } LIMIT 9999", 
    "utterance": "what is the height restriction on the roller soaker", 
    "id": 547
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.charlies_angels fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "result": [
      "2000-10-22"
    ], 
    "targetFormula": "(!fb:film.film.initial_release_date fb:en.charlies_angels)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01y9jr fb:film.film.initial_release_date ?x1 } LIMIT 9999", 
    "utterance": "when did charlie_s angels come out", 
    "id": 178
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_wind-up_bird_chronicle fb:book.written_work.original_language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Japanese Language"
    ], 
    "targetFormula": "(!fb:book.written_work.original_language fb:en.the_wind-up_bird_chronicle)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.051r3l fb:book.written_work.original_language ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the original language of the wind-up bird chronicle", 
    "id": 597
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.psychology fb:education.field_of_study.journals_in_this_discipline ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Journal of Abnormal Child Psychology", 
      "The Journal of Psychology", 
      "American Imago", 
      "Cultic Studies Review", 
      "Children, Youth and Environments", 
      "Journal of Neuroscience, Psychology, and Economics", 
      "Professional Psychology: Research and Practice", 
      "American Psychologist", 
      "Philosophy, Psychiatry, & Psychology", 
      "American Journal of Psychology", 
      "Journal of Vision", 
      "Work & Stress", 
      "Radical Psychology", 
      "Multivariate Behavioral Research", 
      "Journal of Autism and Developmental Disorders", 
      "Review of Philosophy and Psychology", 
      "Psychoanalytic Psychology", 
      "Psychological Medicine", 
      "Psychological Bulletin", 
      "Journal of Abnormal Psychology", 
      "Psychological Review", 
      "Journal of Occupational Health Psychology", 
      "Psychology of Addictive Behaviors", 
      "Developmental Psychobiology", 
      "Journal of Occupational and Organizational Psychology", 
      "African Journal for the Psychological Study of Social Issues", 
      "Journal of Personnel Psychology", 
      "Psychophysiology"
    ], 
    "targetFormula": "(!fb:education.field_of_study.journals_in_this_discipline fb:en.psychology)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.05qfh fb:education.field_of_study.journals_in_this_discipline ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some psychology journals", 
    "id": 154
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { ?x1 fb:award.ranking.list fb:en.fortune_500 . FILTER (?x1 != fb:en.fortune_500) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2010\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2011\"^^xsd:datetime)) . ?x1 fb:award.ranking.year ?x2 . FILTER (?x1 != \"2010\"^^xsd:datetime) . ?x1 fb:award.ranking.item fb:en.target_corporation . FILTER (?x1 != fb:en.target_corporation) . ?x1 fb:award.ranking.rank ?x3 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:award.ranking.rank (and (and ((lambda x (fb:award.ranking.list (var x))) fb:en.fortune_500) ((lambda x (fb:award.ranking.year (var x))) (date 2010 -1 -1))) ((lambda x (fb:award.ranking.item (var x))) fb:en.target_corporation)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { ?x1 fb:award.ranking.list fb:m.01pd60 . FILTER (?x1 != fb:m.01pd60) . FILTER (xsd:dateTime(?x2) >= xsd:dateTime(\"2010\"^^xsd:datetime)) . FILTER (xsd:dateTime(?x2) < xsd:dateTime(\"2011\"^^xsd:datetime)) . ?x1 fb:award.ranking.year ?x2 . FILTER (?x1 != \"2010\"^^xsd:datetime) . ?x1 fb:award.ranking.item fb:m.01b39j . FILTER (?x1 != fb:m.01b39j) . ?x1 fb:award.ranking.rank ?x3 } LIMIT 9999", 
    "utterance": "what was target 's rank in the fortune 500 in 2010", 
    "id": 523
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.macintosh fb:computer.computer.introduced ?x1 } LIMIT 9999", 
    "result": [
      "1984-01-24"
    ], 
    "targetFormula": "(!fb:computer.computer.introduced fb:en.macintosh)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0zd6 fb:computer.computer.introduced ?x1 } LIMIT 9999", 
    "utterance": "when was macintosh introduced", 
    "id": 96
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.frank_sinatra fb:base.academyawards.host_of_oscar_show.oscar_show_hosted ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:base.academyawards.host_of_oscar_show.oscar_show_hosted fb:en.frank_sinatra))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02_fj fb:base.academyawards.host_of_oscar_show.oscar_show_hosted ?x1 } } } LIMIT 9999", 
    "utterance": "how many oscar shows did frank sinatra host", 
    "id": 404
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.cpd_c00001_h2o fb:chemistry.chemical_compound.boiling_point ?x1 } LIMIT 9999", 
    "result": [
      "99.98"
    ], 
    "targetFormula": "(!fb:chemistry.chemical_compound.boiling_point fb:en.cpd_c00001_h2o)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0838f fb:chemistry.chemical_compound.boiling_point ?x1 } LIMIT 9999", 
    "utterance": "what is the boiling point of water", 
    "id": 188
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.polio_vaccine fb:medicine.vaccine.developed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jonas Salk", 
      "Albert Sabin"
    ], 
    "targetFormula": "(!fb:medicine.vaccine.developed_by fb:en.polio_vaccine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01b90_ fb:medicine.vaccine.developed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who developed the polio vaccine", 
    "id": 129
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:american_football.football_historical_roster_position.player fb:en.jim_thorpe . FILTER (?x2 != fb:en.jim_thorpe) . ?x2 fb:american_football.football_historical_roster_position.team ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:american_football.football_historical_roster_position.team ( (lambda x (fb:american_football.football_historical_roster_position.player (var x))) fb:en.jim_thorpe)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:american_football.football_historical_roster_position.player fb:m.0f2zc . FILTER (?x2 != fb:m.0f2zc) . ?x2 fb:american_football.football_historical_roster_position.team ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams did jim thorpe play for", 
    "id": 283
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.space_shuttle_discovery fb:spaceflight.spacecraft.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "North American Aviation"
    ], 
    "targetFormula": "(!fb:spaceflight.spacecraft.manufacturer fb:en.space_shuttle_discovery)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.06_t4 fb:spaceflight.spacecraft.manufacturer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who manufactured the space shuttle discovery", 
    "id": 421
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:location.citytown fb:freebase.type_profile.equivalent_topic ?x1 } } } LIMIT 9999", 
    "result": [
      "0"
    ], 
    "targetFormula": "(count (!fb:freebase.type_profile.equivalent_topic fb:location.citytown))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:location.citytown fb:freebase.type_profile.equivalent_topic ?x1 } } } LIMIT 9999", 
    "utterance": "how many topics are equivalent to city/town/village", 
    "id": 536
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kk92b fb:common.image.size ?x1 } LIMIT 9999", 
    "result": [
      "m.0kjkn6"
    ], 
    "targetFormula": "(!fb:common.image.size fb:m.0kk92b)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kk92b fb:common.image.size ?x1 } LIMIT 9999", 
    "utterance": "how tall is the you only live once image", 
    "id": 331
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:sports.sports_league_participation.league fb:en.uefa . FILTER (?x2 != fb:en.uefa) . ?x2 fb:sports.sports_league_participation.team ?x1 } } } LIMIT 9999", 
    "result": [
      "53"
    ], 
    "targetFormula": "(count (!fb:sports.sports_league_participation.team ((lambda x (fb:sports.sports_league_participation.league (var x))) fb:en.uefa)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:sports.sports_league_participation.league fb:m.07y9k . FILTER (?x2 != fb:m.07y9k) . ?x2 fb:sports.sports_league_participation.team ?x1 } } } LIMIT 9999", 
    "utterance": "how many teams participate in the uefa", 
    "id": 270
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:en.jack_albertson . FILTER (?x2 != fb:en.jack_albertson) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:tv.regular_tv_appearance.character ((lambda x (fb:tv.regular_tv_appearance.actor (var x))) fb:en.jack_albertson)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:tv.regular_tv_appearance.actor fb:m.0hw6_ . FILTER (?x2 != fb:m.0hw6_) . ?x2 fb:tv.regular_tv_appearance.character ?x1 } } } LIMIT 9999", 
    "utterance": "how many starring tv roles did jack albertson have", 
    "id": 527
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:opera.opera_character_voice.opera fb:en.tristan_und_isolde . FILTER (?x1 != fb:en.tristan_und_isolde) . ?x1 fb:opera.opera_character_voice.voice fb:en.crystal_clear_soprano . FILTER (?x1 != fb:en.crystal_clear_soprano) . ?x1 fb:opera.opera_character_voice.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Iseult", 
      "Brangane"
    ], 
    "targetFormula": "(!fb:opera.opera_character_voice.character (and ((lambda x (fb:opera.opera_character_voice.opera (var x))) fb:en.tristan_und_isolde) ((lambda x (fb:opera.opera_character_voice.voice (var x))) fb:en.crystal_clear_soprano)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:opera.opera_character_voice.opera fb:m.09jh5 . FILTER (?x1 != fb:m.09jh5) . ?x1 fb:opera.opera_character_voice.voice fb:m.0j210 . FILTER (?x1 != fb:m.0j210) . ?x1 fb:opera.opera_character_voice.character ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what characters sing soprano in tristan and isolde", 
    "id": 518
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.bmw fb:automotive.company.manufacturing_plants ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cowley Car Factory"
    ], 
    "targetFormula": "(!fb:automotive.company.manufacturing_plants fb:en.bmw)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.017yh fb:automotive.company.manufacturing_plants ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are bmw's manufacturing plants", 
    "id": 208
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.kirkstall_abbey fb:religion.monastery.religious_order ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cistercians"
    ], 
    "targetFormula": "(!fb:religion.monastery.religious_order fb:en.kirkstall_abbey)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0d00l fb:religion.monastery.religious_order ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what religious order belongs to kirkstall abbey", 
    "id": 489
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:en.mclean_hospital fb:medicine.hospital.beds ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "result": [
      "1"
    ], 
    "targetFormula": "(count (!fb:measurement_unit.dated_integer.number (!fb:medicine.hospital.beds fb:en.mclean_hospital)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { fb:m.09rfy fb:medicine.hospital.beds ?x2 . ?x2 fb:measurement_unit.dated_integer.number ?x1 } } } LIMIT 9999", 
    "utterance": "how many beds does mclean hospital have", 
    "id": 295
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.2006_winter_olympics fb:olympics.olympic_games.number_of_countries ?x1 } LIMIT 9999", 
    "result": [
      "80"
    ], 
    "targetFormula": "(!fb:olympics.olympic_games.number_of_countries fb:en.2006_winter_olympics)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0kbvv fb:olympics.olympic_games.number_of_countries ?x1 } LIMIT 9999", 
    "utterance": "how many countries participated in the 2006 winter olympics", 
    "id": 602
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lepton fb:physics.particle_family.particles ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Neutrino", 
      "Muon", 
      "Antimuon", 
      "Electron", 
      "Positron"
    ], 
    "targetFormula": "(!fb:physics.particle_family.particles fb:en.lepton)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gj2r fb:physics.particle_family.particles ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what particles are in the lepton family", 
    "id": 290
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.galileo_spacecraft fb:spaceflight.satellite.launch_date ?x1 } LIMIT 9999", 
    "result": [
      "1989-10-18"
    ], 
    "targetFormula": "(!fb:spaceflight.satellite.launch_date fb:en.galileo_spacecraft)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.03f7r fb:spaceflight.satellite.launch_date ?x1 } LIMIT 9999", 
    "utterance": "when was the galileo spacecraft launched", 
    "id": 314
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sdhc_card fb:digicams.camera_storage_type.compatible_cameras ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Ricoh GR Digital II", 
      "Panasonic Lumix DMC-GF1", 
      "Panasonic Lumix DMC-GF2", 
      "Panasonic Lumix DMC-GH2", 
      "Panasonic Lumix DMC-G2", 
      "Olympus PEN E-P3", 
      "Olympus E-PL3", 
      "Panasonic Lumix DMC-GF3", 
      "Canon Powershot SX1 IS", 
      "Samsung L201", 
      "Kodak EasyShare C1013", 
      "Nikon Coolpix S210", 
      "Samsung L77", 
      "Samsung L73", 
      "Samsung NV20", 
      "Samsung NV15", 
      "Pentax Optio A30", 
      "Nikon D40", 
      "Canon EOS-1D Mark III", 
      "Nikon D40x", 
      "Panasonic Lumix DMC-L10", 
      "Pentax K20D", 
      "Canon EOS 450D", 
      "Nikon D60", 
      "Samsung GX-10", 
      "Pentax Optio M40", 
      "Pentax K100D Super", 
      "Nikon Coolpix P5000", 
      "Nikon Coolpix P5100", 
      "Pentax K200D", 
      "Canon PowerShot A570 IS", 
      "Canon EOS 1000D", 
      "Nikon D90", 
      "Nikon Coolpix P6000", 
      "Canon PowerShot SD890 IS", 
      "Canon PowerShot A460", 
      "Canon Powershot A580", 
      "Canon PowerShot A560", 
      "Canon PowerShot SD1000", 
      "Canon PowerShot SD800 IS", 
      "Canon Powershot A1000 IS", 
      "Canon PowerShot SD950 IS", 
      "Canon Powershot E1", 
      "Canon Powershot SD1100 IS", 
      "Canon Powershot A590 IS", 
      "Canon PowerShot A450", 
      "Canon PowerShot A550", 
      "Canon PowerShot SD850 IS", 
      "Sigma SD15", 
      "Samsung GX-20", 
      "Pentax KM", 
      "Canon PowerShot SD990 IS", 
      "Canon PowerShot A650 IS", 
      "Canon Powershot G10", 
      "Canon PowerShot G9", 
      "Canon PowerShot SD770 IS", 
      "Leica M8.2", 
      "Leica M8", 
      "Nikon D80", 
      "Canon EOS 600D", 
      "Pentax K10D", 
      "Nikon D800", 
      "Samsung L730", 
      "Nikon Coolpix P60", 
      "Pentax Optio M50", 
      "Nikon Coolpix S200", 
      "Fujifilm FinePix F60fd", 
      "Samsung i8", 
      "Samsung L83T", 
      "Nikon Coolpix S50", 
      "Casio Exilim EX-V8", 
      "Ricoh Caplio R8", 
      "Panasonic Lumix DMC-FX55", 
      "Panasonic Lumix DMC-LX3", 
      "Casio Exilim EX-FH20", 
      "Panasonic Lumix DMC-LZ6", 
      "Ricoh Caplio R6", 
      "Panasonic Lumix DMC-LX2", 
      "Panasonic Lumix DMC-FX12", 
      "Panasonic LUMIX DMC-FS5", 
      "Fujifilm FinePix F100fd", 
      "Ricoh Caplio GX100", 
      "Nikon Coolpix S550", 
      "Casio Exilim EX-Z75", 
      "Casio Exilim EX-Z300", 
      "Pentax Optio Z10", 
      "Nikon Coolpix S610", 
      "Nikon Coolpix S610c", 
      "Panasonic Lumix DMC-FZ8", 
      "Panasonic LUMIX DMC-LS80", 
      "Nikon Coolpix S51", 
      "Kodak EasyShare Z8612 IS", 
      "Nikon Coolpix S52c", 
      "Samsung NV11", 
      "Samsung NV8", 
      "Kodak EasyShare M1073 IS", 
      "Casio Exilim EX-Z250", 
      "Samsung S1050", 
      "Panasonic Lumix DMC-FX07", 
      "Panasonic Lumix DMC-TZ2", 
      "Samsung NV40", 
      "Nikon Coolpix S500", 
      "Samsung NV9", 
      "Nikon Coolpix L15", 
      "Kodak EasyShare C913", 
      "Samsung S730", 
      "Nikon Coolpix S510", 
      "Samsung NV30", 
      "Samsung S830", 
      "Nikon Coolpix S50c", 
      "Nikon Coolpix L18", 
      "Nikon Coolpix S600", 
      "Samsung L830", 
      "Nikon Coolpix S520", 
      "Nikon Coolpix L16", 
      "Nikon Coolpix P50", 
      "Nikon Coolpix L14", 
      "Samsung L100", 
      "Nikon Coolpix S700", 
      "Samsung S630", 
      "Casio Exilim EX-Z1080", 
      "Samsung L210", 
      "Casio Exilim Pro EX-F1", 
      "Casio Exilim EX-Z200", 
      "Pentax Optio W60", 
      "Kodak EasyShare M1033", 
      "Samsung S1070", 
      "Samsung L310W", 
      "Samsung i100", 
      "Ricoh G600", 
      "Fujifilm FinePix F480 Zoom", 
      "Casio Exilim EX-Z100", 
      "Fujifilm FinePix J10", 
      "Fujifilm FinePix Z20fd", 
      "Fujifilm FinePix Z200FD", 
      "Fujifilm FinePix S2000HD", 
      "Kodak EasyShare Z1015 IS", 
      "Fujifilm FinePix Z100FD", 
      "Fujifilm FinePix J50", 
      "Kodak EasyShare M763", 
      "Kodak EasyShare V1273", 
      "Kodak EasyShare V1073", 
      "Kodak EasyShare M1063", 
      "Kodak EasyShare M1093 IS", 
      "Kodak EasyShare M863", 
      "Nikon Coolpix P80", 
      "Nikon Coolpix S560", 
      "Nikon Coolpix S710", 
      "Samsung L110", 
      "Leica M9", 
      "Panasonic Lumix DMC-FZ50", 
      "Samsung S1030", 
      "Panasonic Lumix DMC-G1", 
      "Sigma DP2", 
      "Fujifilm FinePix S100fs", 
      "Panasonic Lumix DMC-TZ3", 
      "Canon PowerShot S5 IS", 
      "Canon PowerShot TX1", 
      "Canon PowerShot SX100 IS", 
      "Canon PowerShot SD790 IS", 
      "Canon Powershot SX110 IS", 
      "Canon Powershot SX10 IS", 
      "Canon PowerShot SD870 IS", 
      "Canon PowerShot SD880 IS", 
      "Canon Powershot A2000 IS", 
      "Canon PowerShot SD750", 
      "Canon Powershot A470", 
      "Panasonic Lumix DMC-LS75", 
      "Pentax Optio E50", 
      "Samsung S85", 
      "Casio Exilim EX-Z1050", 
      "Panasonic Lumix DMC-TZ4", 
      "Samsung i85", 
      "Pentax Optio V10", 
      "Samsung NV4", 
      "Ricoh Caplio R7", 
      "Panasonic LUMIX DMC-FS3", 
      "Pentax Optio S7", 
      "Casio Exilim EX-S770", 
      "Pentax Optio S10", 
      "Panasonic LUMIX DMC-LZ8", 
      "Nikon Coolpix S51c", 
      "Casio Exilim EX-Z1200 SR", 
      "Casio Exilim EX-Z77", 
      "Panasonic Lumix DMC-FX3", 
      "Panasonic LUMIX DMC-FX35", 
      "Panasonic Lumix DMC-FX10", 
      "Panasonic Lumix DMC-LS60", 
      "Panasonic Lumix DMC-TZ5", 
      "Panasonic LUMIX DMC-LZ10", 
      "Pentax Optio S12", 
      "Samsung S850", 
      "Panasonic Lumix DMC-FX33", 
      "Samsung i7", 
      "Panasonic Lumix DMC-FX30", 
      "Samsung L700", 
      "Leica V-LUX 1", 
      "Casio Exilim EX-Z700", 
      "Panasonic LUMIX DMC-FS20", 
      "Panasonic Lumix DMC-LZ7", 
      "Samsung L74 Wide", 
      "Pentax Optio W30", 
      "Panasonic Lumix DMC-FX100", 
      "Panasonic Lumix DMC-FX50", 
      "Casio Exilim EX-Z70", 
      "Samsung S860", 
      "Panasonic Lumix DMC-FZ18", 
      "Casio Exilim EX-Z85", 
      "Casio Exilim EX-Z80", 
      "Leica D-LUX 4", 
      "Fujifilm FinePix S8100fd", 
      "Samsung i80", 
      "Samsung S760", 
      "Ricoh Caplio R10", 
      "Samsung NV24HD", 
      "Pentax Optio E60", 
      "Pentax Optio V20", 
      "Ricoh Caplio GX200", 
      "Pentax Optio A40", 
      "Pentax Optio M60", 
      "Panasonic Lumix DMC-TZ50", 
      "Panasonic Lumix DMC-FX500", 
      "Panasonic Lumix DMC-FX37", 
      "Panasonic Lumix DMC-FX150", 
      "Casio Exilim EX-Z9", 
      "Fujifilm FinePix J100", 
      "Fujifilm FinePix J150W", 
      "Kodak EasyShare Z1275", 
      "Fujifilm FinePix J120", 
      "Fujifilm FinePix S1000fd", 
      "Fujifilm FinePix J110W", 
      "Kodak EasyShare M893 IS", 
      "Kodak EasyShare Z1285", 
      "Kodak EasyShare Z1085 IS", 
      "Leica D-LUX 3", 
      "Nikon Coolpix S52", 
      "Leica C-LUX 3", 
      "Nikon Coolpix S60", 
      "Panasonic Lumix DMC-FZ28", 
      "Samsung TL34HD"
    ], 
    "targetFormula": "(!fb:digicams.camera_storage_type.compatible_cameras fb:en.sdhc_card)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0220vm1 fb:digicams.camera_storage_type.compatible_cameras ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what digital cameras take an sdhc card", 
    "id": 274
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.arabic_alphabet fb:language.language_writing_system.used_from ?x1 } LIMIT 9999", 
    "result": [
      "0400"
    ], 
    "targetFormula": "(!fb:language.language_writing_system.used_from fb:en.arabic_alphabet)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0xn6 fb:language.language_writing_system.used_from ?x1 } LIMIT 9999", 
    "utterance": "since when has the arabic alphabet been used", 
    "id": 425
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:rail.railway_operator_relationship.operator fb:en.london_overground . FILTER (?x1 != fb:en.london_overground) . ?x1 fb:rail.railway_operator_relationship.railway ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "North London Line", 
      "East London Line", 
      "West London Line", 
      "Gospel Oak to Barking Line"
    ], 
    "targetFormula": "(!fb:rail.railway_operator_relationship.railway ((lambda x (fb:rail.railway_operator_relationship.operator (var x))) fb:en.london_overground))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:rail.railway_operator_relationship.operator fb:m.0dfvhl . FILTER (?x1 != fb:m.0dfvhl) . ?x1 fb:rail.railway_operator_relationship.railway ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what lines does the london overground operate", 
    "id": 449
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.the_game_of_life fb:games.game.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Reuben Klamer"
    ], 
    "targetFormula": "(!fb:games.game.designer fb:en.the_game_of_life)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.025sm93 fb:games.game.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the game of life", 
    "id": 97
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.straight-4 fb:engineering.piston_configuration.engines ?x1 } } } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(count (!fb:engineering.piston_configuration.engines fb:en.straight-4))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.01chrk fb:engineering.piston_configuration.engines ?x1 } } } LIMIT 9999", 
    "utterance": "how many engines have a straight-4 piston configuration", 
    "id": 575
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.ford_model_t_engine fb:engineering.piston_engine.piston_configuration ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Straight-4"
    ], 
    "targetFormula": "(!fb:engineering.piston_engine.piston_configuration fb:en.ford_model_t_engine)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.046ql9 fb:engineering.piston_engine.piston_configuration ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the piston configuration of a ford model t engine", 
    "id": 587
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0280hsm fb:tv.tv_program.episode_running_time ?x1 } LIMIT 9999", 
    "result": [
      "11"
    ], 
    "targetFormula": "(!fb:tv.tv_program.episode_running_time fb:m.0280hsm)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0280hsm fb:tv.tv_program.episode_running_time ?x1 } LIMIT 9999", 
    "utterance": "how long are adventure time episodes", 
    "id": 212
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.first_generation_ford_mustang fb:automotive.generation.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lee Iacocca", 
      "Larry Shinoda"
    ], 
    "targetFormula": "(!fb:automotive.generation.designer fb:en.first_generation_ford_mustang)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02k_k6k fb:automotive.generation.designer ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the first generation ford mustang", 
    "id": 474
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.regular_tv_appearance.series fb:en.sesame_street . FILTER (?x1 != fb:en.sesame_street) . ?x1 fb:tv.regular_tv_appearance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Sonia Manzano", 
      "Jim Henson", 
      "Kevin Clash", 
      "Frank Oz", 
      "Leslie Carrara-Rudolph", 
      "Pam Arciero", 
      "Martin P. Robinson", 
      "Richard Hunt", 
      "Caroll Spinney", 
      "David Rudman", 
      "Roscoe Orman", 
      "Fran Brill", 
      "Dave Goelz", 
      "Joey Mazzarino", 
      "Emilio Delgado", 
      "Linda Bove", 
      "Jerry Nelson", 
      "Bob McGrath", 
      "Loretta Long", 
      "Eric Jacobson"
    ], 
    "targetFormula": "(!fb:tv.regular_tv_appearance.actor ((lambda x (fb:tv.regular_tv_appearance.series (var x))) fb:en.sesame_street))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:tv.regular_tv_appearance.series fb:m.0cwrr . FILTER (?x1 != fb:m.0cwrr) . ?x1 fb:tv.regular_tv_appearance.actor ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who are the main cast members of sesame street", 
    "id": 459
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.order_of_the_golden_fleece fb:royalty.order_of_chivalry.motto ?x1 } LIMIT 9999", 
    "result": [
      "Pretium Laborum Non Vile"
    ], 
    "targetFormula": "(!fb:royalty.order_of_chivalry.motto fb:en.order_of_the_golden_fleece)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02q5pd fb:royalty.order_of_chivalry.motto ?x1 } LIMIT 9999", 
    "utterance": "what is the motto of the order of the golden fleece", 
    "id": 546
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.lil_hardin_armstrong fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jazz"
    ], 
    "targetFormula": "(!fb:music.artist.genre fb:en.lil_hardin_armstrong)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01ggms fb:music.artist.genre ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what genre did lil hardin armstrong represent", 
    "id": 443
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.motorola fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:en.motorola) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 } LIMIT 9999", 
    "result": [
      "2008-12-31", 
      "2006-12-31", 
      "1960", 
      "2007", 
      "2000", 
      "1990", 
      "1970", 
      "1980", 
      "1955"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_money_value.valid_date ((lambda x (!fb:business.business_operation.revenue (var x))) fb:en.motorola))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.0537b fb:business.business_operation.revenue ?x1 . FILTER (?x1 != fb:m.0537b) . ?x1 fb:measurement_unit.dated_money_value.valid_date ?x2 } LIMIT 9999", 
    "utterance": "in what year did motorola have the most revenue", 
    "id": 482
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:en.magic_kingdom fb:amusement_parks.park.annual_visits ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "result": [
      "17000000"
    ], 
    "targetFormula": "(!fb:measurement_unit.dated_integer.number (!fb:amusement_parks.park.annual_visits fb:en.magic_kingdom))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { fb:m.02mv6p fb:amusement_parks.park.annual_visits ?x1 . ?x1 fb:measurement_unit.dated_integer.number ?x2 } LIMIT 9999", 
    "utterance": "how many visits does the magic kingdom get per year", 
    "id": 541
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:en.the_three_doctors fb:tv.tv_series_episode.producers ?x1 . ?x1 fb:tv.tv_producer_episode_credit.producer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Barry Letts"
    ], 
    "targetFormula": "(!fb:tv.tv_producer_episode_credit.producer (!fb:tv.tv_series_episode.producers fb:en.the_three_doctors))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { fb:m.0201f8 fb:tv.tv_series_episode.producers ?x1 . ?x1 fb:tv.tv_producer_episode_credit.producer ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "who produced the three doctors", 
    "id": 111
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.mississippi_river fb:geography.river.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Lake Itasca"
    ], 
    "targetFormula": "(!fb:geography.river.origin fb:en.mississippi_river)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.04yf_ fb:geography.river.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the origin of the mississippi river", 
    "id": 410
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbbrp . FILTER (?x1 != fb:m.04nbbrp) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "result": [
      "45"
    ], 
    "targetFormula": "(!fb:automotive.us_fuel_economy.highway_mpg ((lambda x (fb:automotive.us_fuel_economy.trim_level (var x))) fb:m.04nbbrp))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbbrp . FILTER (?x1 != fb:m.04nbbrp) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "utterance": "what is the highway fuel economy of a 2007 honda civic hybrid", 
    "id": 608
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.sesame_street fb:tv.tv_program.theme_song ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Can You Tell Me How to Get to Sesame Street?"
    ], 
    "targetFormula": "(!fb:tv.tv_program.theme_song fb:en.sesame_street)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0cwrr fb:tv.tv_program.theme_song ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the theme song of sesame street", 
    "id": 311
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.meet_the_parents fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jay Roach"
    ], 
    "targetFormula": "(!fb:film.film.directed_by fb:en.meet_the_parents)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.033fqh fb:film.film.directed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who directed meet the parents", 
    "id": 84
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.tamora_pierce fb:book.author.series_written_or_contributed_to ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Provost's Dog", 
      "Wild Magic/The Immortals", 
      "Daughter of the Lioness", 
      "The Song of the Lioness", 
      "The Circle Opens", 
      "Circle of Magic (Tamora Pierce)", 
      "Circle of Magic Universe", 
      "Protector of the Small", 
      "The Circle Opens Quartet", 
      "Protector of the Small", 
      "Beka Cooper/Provost's Dog", 
      "Circle Of Magic Quartet"
    ], 
    "targetFormula": "(!fb:book.author.series_written_or_contributed_to fb:en.tamora_pierce)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0gm5z fb:book.author.series_written_or_contributed_to ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what series did tamora pierce write", 
    "id": 199
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0flmt0 fb:amusement_parks.ride.opened ?x1 } LIMIT 9999", 
    "result": [
      "1999-04-17"
    ], 
    "targetFormula": "(!fb:amusement_parks.ride.opened fb:m.0flmt0)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0flmt0 fb:amusement_parks.ride.opened ?x1 } LIMIT 9999", 
    "utterance": "when did invertigo open", 
    "id": 15
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.fifth_amendment_to_the_united_states_constitution fb:law.constitutional_amendment.proposed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "James Madison"
    ], 
    "targetFormula": "(!fb:law.constitutional_amendment.proposed_by fb:en.fifth_amendment_to_the_united_states_constitution)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.07sjg fb:law.constitutional_amendment.proposed_by ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who proposed the fifth amendment", 
    "id": 145
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.leadbelly fb:influence.influence_node.influenced ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Garret Schuelke", 
      "Bob Dylan", 
      "Van Morrison", 
      "Woody Guthrie"
    ], 
    "targetFormula": "(!fb:influence.influence_node.influenced fb:en.leadbelly)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01wxlnl fb:influence.influence_node.influenced ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what artists are influenced by lead belly", 
    "id": 345
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.airspeed_oxford fb:aviation.aircraft_model.maiden_flight ?x1 } LIMIT 9999", 
    "result": [
      "1937-06-19"
    ], 
    "targetFormula": "(!fb:aviation.aircraft_model.maiden_flight fb:en.airspeed_oxford)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02r0bv fb:aviation.aircraft_model.maiden_flight ?x1 } LIMIT 9999", 
    "utterance": "when was the airspeed oxford first flown", 
    "id": 324
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.tryptophan fb:biology.amino_acid.single_letter_abbreviation ?x1 } LIMIT 9999", 
    "result": [
      "W"
    ], 
    "targetFormula": "(!fb:biology.amino_acid.single_letter_abbreviation fb:en.tryptophan)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0fzjh fb:biology.amino_acid.single_letter_abbreviation ?x1 } LIMIT 9999", 
    "utterance": "what is the single letter abreviation for tryptophan", 
    "id": 550
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:food.beer fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:freebase.type_profile.instance_count fb:food.beer)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:food.beer fb:freebase.type_profile.instance_count ?x1 } LIMIT 9999", 
    "utterance": "how many beers are there on freebase", 
    "id": 235
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0glzm0h fb:rail.locomotive.locomotive_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Victorian Railways H class"
    ], 
    "targetFormula": "(!fb:rail.locomotive.locomotive_class fb:m.0glzm0h)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0glzm0h fb:rail.locomotive.locomotive_class ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what class of train was heavy harry", 
    "id": 197
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:food.beer_containment.beer fb:en.pilsner_urquell . FILTER (?x1 != fb:en.pilsner_urquell) . ?x1 fb:food.beer_containment.size ?x2 } LIMIT 9999", 
    "result": [
      "330", 
      "500"
    ], 
    "targetFormula": "(!fb:food.beer_containment.size ((lambda x (fb:food.beer_containment.beer (var x))) fb:en.pilsner_urquell))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:food.beer_containment.beer fb:m.031n3s . FILTER (?x1 != fb:m.031n3s) . ?x1 fb:food.beer_containment.size ?x2 } LIMIT 9999", 
    "utterance": "what sizes does pilsner urquell come in", 
    "id": 288
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.iphone fb:computer.computer.key_designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Jonathan Ive"
    ], 
    "targetFormula": "(!fb:computer.computer.key_designers fb:en.iphone)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.027lnzs fb:computer.computer.key_designers ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "who designed the iphone", 
    "id": 18
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.target_corporation fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1902"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.target_corporation)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01b39j fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was target founded", 
    "id": 23
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:en.ritz_cracker . FILTER (?x1 != fb:en.ritz_cracker) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "result": [], 
    "targetFormula": "(!fb:business.company_brand_relationship.from_date ((lambda x (fb:business.company_brand_relationship.brand (var x))) fb:en.ritz_cracker))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:business.company_brand_relationship.brand fb:m.01kkd6 . FILTER (?x1 != fb:m.01kkd6) . ?x1 fb:business.company_brand_relationship.from_date ?x2 } LIMIT 9999", 
    "utterance": "when were ritz crackers introduced", 
    "id": 167
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.subjects fb:en.antarctica } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (fb:film.film.subjects fb:en.antarctica))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { ?x1 fb:film.film.subjects fb:m.0jfx } } } LIMIT 9999", 
    "utterance": "how many films are there on antarctica", 
    "id": 278
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.omarion_grandberry fb:music.artist.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Los Angeles", 
      "Florida"
    ], 
    "targetFormula": "(!fb:music.artist.origin fb:en.omarion_grandberry)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.019g40 fb:music.artist.origin ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "where did omarion 's musical career begin", 
    "id": 340
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.elk_mountain_ski_area fb:skiing.ski_area.top_elevation ?x1 } LIMIT 9999", 
    "result": [
      "821.1312"
    ], 
    "targetFormula": "(!fb:skiing.ski_area.top_elevation fb:en.elk_mountain_ski_area)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.02pl3l5 fb:skiing.ski_area.top_elevation ?x1 } LIMIT 9999", 
    "utterance": "what is the highest elevation at the elk mountain ski area", 
    "id": 594
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.san_francisco_international_airport fb:aviation.airport.number_of_runways ?x1 } LIMIT 9999", 
    "result": [
      "4"
    ], 
    "targetFormula": "(!fb:aviation.airport.number_of_runways fb:en.san_francisco_international_airport)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.01l4xk fb:aviation.airport.number_of_runways ?x1 } LIMIT 9999", 
    "utterance": "how many runways does the san francisco international airport have", 
    "id": 623
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.canadian_dollar fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "result": [
      "CAD"
    ], 
    "targetFormula": "(!fb:finance.currency.currency_code fb:en.canadian_dollar)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.0ptk_ fb:finance.currency.currency_code ?x1 } LIMIT 9999", 
    "utterance": "what is currency code for the canadian dollar", 
    "id": 454
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.road_bicycle fb:bicycles.bicycle_type.bicycle_models_of_this_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Avanti Cadent 3.0 2009", 
      "Avanti Giro 2009", 
      "Panasonic DX3000", 
      "Avanti Cadent 1.0 2009", 
      "Avanti Cadent 2.0 2009", 
      "Avanti Cadent Team 2009", 
      "Avanti Corsa 2009", 
      "Avanti Monza", 
      "Avanti Prima", 
      "Avanti Quantum 1.0", 
      "Avanti Quantum 2.0 2009", 
      "Avanti Quantum 3.0", 
      "Avanti Quantum Team 2009", 
      "Avanti Sprint 2009", 
      "Giant CRX Four 2008", 
      "Giant CRX Four 2007", 
      "Giant CRX Four 2009"
    ], 
    "targetFormula": "(!fb:bicycles.bicycle_type.bicycle_models_of_this_type fb:en.road_bicycle)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.09rgp fb:bicycles.bicycle_type.bicycle_models_of_this_type ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some examples of a road bike", 
    "id": 248
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.stroke fb:medicine.disease.parent_disease ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Cardiovascular disease", 
      "Nervous system disease", 
      "Central nervous system disease"
    ], 
    "targetFormula": "(!fb:medicine.disease.parent_disease fb:en.stroke)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.02y0js fb:medicine.disease.parent_disease ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what is the parent disease of a stroke", 
    "id": 271
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.coal fb:geology.rock_type.sub_types ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Sub-bituminous coal", 
      "Lignite", 
      "Anthracite", 
      "Cannel coal", 
      "Bituminous coal"
    ], 
    "targetFormula": "(!fb:geology.rock_type.sub_types fb:en.coal)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.01sy7 fb:geology.rock_type.sub_types ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are the sub-types of coal", 
    "id": 100
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.collector fb:en.barry_halper . FILTER (?x2 != fb:en.barry_halper) . ?x2 fb:interests.collection.category ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:interests.collection.category ((lambda x (fb:interests.collection.collector (var x))) fb:en.barry_halper)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:interests.collection.collector fb:m.03c_7_w . FILTER (?x2 != fb:m.03c_7_w) . ?x2 fb:interests.collection.category ?x1 } } } LIMIT 9999", 
    "utterance": "how many collections did barry halper have", 
    "id": 367
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbpg5 . FILTER (?x1 != fb:m.04nbpg5) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "result": [
      "32"
    ], 
    "targetFormula": "(!fb:automotive.us_fuel_economy.highway_mpg ((lambda x (fb:automotive.us_fuel_economy.trim_level (var x))) fb:m.04nbpg5))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:automotive.us_fuel_economy.trim_level fb:m.04nbpg5 . FILTER (?x1 != fb:m.04nbpg5) . ?x1 fb:automotive.us_fuel_economy.highway_mpg ?x2 } LIMIT 9999", 
    "utterance": "what is the fuel economy of a 2008 hyundai accent gls sedan in the city", 
    "id": 633
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.substance_abuse_problem.celebrity fb:en.robert_downey_jr . FILTER (?x1 != fb:en.robert_downey_jr) . ?x1 fb:celebrities.substance_abuse_problem.substance ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "result": [
      "Heroin", 
      "Methamphetamine", 
      "Diazepam", 
      "Alcoholic beverage", 
      "Cocaine"
    ], 
    "targetFormula": "(!fb:celebrities.substance_abuse_problem.substance ((lambda x (fb:celebrities.substance_abuse_problem.celebrity (var x))) fb:en.robert_downey_jr))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 ?x2name WHERE { ?x1 fb:celebrities.substance_abuse_problem.celebrity fb:m.016z2j . FILTER (?x1 != fb:m.016z2j) . ?x1 fb:celebrities.substance_abuse_problem.substance ?x2 . OPTIONAL { ?x2 fb:type.object.name ?x2name } } LIMIT 9999", 
    "utterance": "what substancs has robert downey jr abused", 
    "id": 384
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.united_nations fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1945-10-24"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.united_nations)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.07t65 fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was the united nations founded", 
    "id": 196
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.australian_dollar fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "result": [
      "8"
    ], 
    "targetFormula": "(count (!fb:finance.currency.countries_used fb:en.australian_dollar))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.0kz1h fb:finance.currency.countries_used ?x1 } } } LIMIT 9999", 
    "utterance": "how many countries use the australian dollar", 
    "id": 426
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.final_fantasy fb:cvg.game_series.games_in_series ?x1 } } } LIMIT 9999", 
    "result": [
      "56"
    ], 
    "targetFormula": "(count (!fb:cvg.game_series.games_in_series fb:en.final_fantasy))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.02ywx fb:cvg.game_series.games_in_series ?x1 } } } LIMIT 9999", 
    "utterance": "how many games are in the final fantasy series", 
    "id": 469
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.celebrity fb:en.lindsay_lohan . FILTER (?x2 != fb:en.lindsay_lohan) . ?x2 fb:celebrities.legal_entanglement.location ?x1 } } } LIMIT 9999", 
    "result": [
      "2"
    ], 
    "targetFormula": "(count (!fb:celebrities.legal_entanglement.location ((lambda x (fb:celebrities.legal_entanglement.celebrity (var x))) fb:en.lindsay_lohan)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x3 WHERE { { SELECT DISTINCT count(?x1) AS ?x3 WHERE { ?x2 fb:celebrities.legal_entanglement.celebrity fb:m.01pgzn_ . FILTER (?x2 != fb:m.01pgzn_) . ?x2 fb:celebrities.legal_entanglement.location ?x1 } } } LIMIT 9999", 
    "utterance": "how many legal offences has lindsey lohan committed", 
    "id": 533
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:en.germany fb:food.beer_country_region.beers_from_here ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "result": [
      "Augustiner Dunkel", 
      "Kloster Andechs Andechser Doppelbock Dunkel", 
      "Krombacher Pils", 
      "Aktien Brauerei Kaufbeuren Jubilaums Pils", 
      "Oderland Frankfurter Premium Export", 
      "Kaiserdom-Privatbrauerei Weizenland Weissbier Kristallklar", 
      "Pinkus M\u00fcller Organic", 
      "Schneider & Sohn Weissen Edel-Weisse", 
      "Hacker-Pschorr Weisse", 
      "Dortmunder Actien Brauerei Diat Pils", 
      "Br\u00e4u im Moos Hefe-Weizen", 
      "Henninger Kaiser Premium Bier", 
      "Frankenheim Alt", 
      "Bitburger Premium Beer", 
      "Oschen Brau Ulm Gold Oschen", 
      "Rother Brau Oko Ur Weizen", 
      "Darmstadter", 
      "Weihenstephaner Festbier", 
      "Jever Pilsener", 
      "Bier-Company Turn", 
      "Sailerbr\u00e4u Franz Josef Urig-Schwarz", 
      "Goldhand Vertriebsellschaftges Felsgold Pils", 
      "Kronenbrauerei Karl Karlskrone Premium Pilsner", 
      "Kauzen Pils", 
      "Sch\u00f6fferhofer Dunkles Hefeweizen", 
      "Erdinger Weissbier Dunkel", 
      "Hannen Alt", 
      "Bayer-Br\u00e4u Rothenfelser Raubritter", 
      "Br\u00e4u im Moos Dunkle Weisse", 
      "Hofmann Dunkles Landbier", 
      "Spaten Pils", 
      "Schlappeseppel", 
      "Weltenburger Kloster Asam-Bock", 
      "Weltenburger Kloster Urtyp Hell", 
      "Spaten M\u00fcnchner Hell", 
      "Riedenburger Weisse", 
      "Allgauer Brauhaus St. Magnus Heller Bock", 
      "Tegernseer Special", 
      "Weltenburger Kloster Winter-Traum", 
      "Schneider Weisse Original", 
      "Lidl Neckarsulm Grafenwalder Strong Beer", 
      "Schwaben Br\u00e4u Meister Pils", 
      "Clausthaler", 
      "Brauerei L\u00fcbz L\u00fcbzer Urkraft", 
      "K\u00f6stritzer Schwarzbier", 
      "Gutmann Dunkles Hefeweizen", 
      "Privatbrauerei H\u00f6ss Weisser Hirsch Allg\u00e4uer Weizen", 
      "Thurn & Taxis Postmeister Doppel Bock", 
      "Spaten Franziskaner Hefe-Weissbier", 
      "Thurn & Taxis Roggen", 
      "L\u00f6wenbr\u00e4u Premium Pils Feinherb", 
      "Fassa Gold Pils", 
      "Kaiserdom-Privatbrauerei Weizenland Weissbier Hefetr\u00fcb", 
      "Herrnbr\u00e4u Schneewalter Winterweisse", 
      "Br\u00e4u im Moos Export Hell", 
      "Leikeim Premium", 
      "Krombacher Rhenania Alt", 
      "Beck & Co. Beck's Oktoberfest", 
      "Bergquell-Brauerei Loebau Lausitzer Porter", 
      "Bamberger Weisse Bock", 
      "Mittenwald Jager Dunkel", 
      "Berliner Kindl Original Weisse Schankbier", 
      "Schmucker Hefe-Weizen", 
      "Augustiner Helles", 
      "Radeberger Pilsner", 
      "Pearce Boltens Landbier", 
      "Hof Hefe Weissbier (Sainsbury's)", 
      "Riedenburger Organic Lager", 
      "Paulaner Original M\u00fcnchner Premium Lager", 
      "Burgerbr\u00e4u Bamberg Pils", 
      "Dortmunder Union Export", 
      "L\u00f6wenWeisse Hefe-Weissbier", 
      "Privatbrauerei H\u00f6ss Doppel Hirsch Allg\u00e4uer Doppelbock", 
      "Brinkhoffs No. 1", 
      "Neumarkter Lammsbr\u00e4u Dunkel", 
      "Ritter St Georgen Brauerei Keller Bier", 
      "Hofbrauhaus Freising Huber Weisses Original", 
      "Arcobrau (Co-op) Wheat Beer", 
      "Aldersbacher Ursprung Export Hell", 
      "Bucher \u00d6ko-Pilsner", 
      "Heller-Trum Aecht Schlenkerla Rauchbier M\u00e4rzen", 
      "Aldersbacher Kloster Weisse Hell", 
      "Erdinger Schneeweisse - Das Winterbier", 
      "Hofbrauhaus M\u00fcnchen SchwarzeWeisse", 
      "Hopf Dunkel Weisse", 
      "Ritter St. Georgen Brauerei Helles Vollbier", 
      "Erdinger Pikantus Dunkler Weizenbock", 
      "Altenburger Premium", 
      "Ayinger Altbairisch Dunkel", 
      "Beck & Co. Beck's Vier", 
      "Privatbrauerei H\u00f6ss Dunkler Hirsch Allg\u00e4uer Weizen", 
      "Dortmunder Union Siegel Pils", 
      "Rheinische B\u00fcrgerbr\u00e4u B\u00fcrger K\u00f6lsch", 
      "Sch\u00f6fferhofer Hefeweizen", 
      "Burgerbra\u00fc Augsburg AG Musicus Dunkler Weizenbock", 
      "Augustiner Maximator", 
      "Augustiner Edelstoff", 
      "Augustiner Vollbier", 
      "Tucher Helles Hefe Weizen", 
      "Gatzweiler Gatz Alt", 
      "Bergische L\u00f6wen Sion K\u00f6lsch", 
      "Fuerstenberg Premium Lager", 
      "Eichbaum Premium Pils", 
      "Paderborner Isenbeck Brauerei Isenbeck Premium Dark", 
      "Waldhaus Diplom Pils", 
      "Flensburger Pilsener", 
      "Veltins Pilsener", 
      "Oettinger Original Dunkles Hefeweizen Naturtr\u00fcb", 
      "Brauerei Schl\u00f6sser Maternus Premium Pilsener", 
      "Schwaben Brau Pilsner", 
      "Anon (Sainsbury's) Diat Pils", 
      "Berliner Kindl Bock Dunkel", 
      "Erdinger Weizen Crystal Clear", 
      "Erdinger Weissbier", 
      "Erdinger Octoberfest", 
      "G\u00f6ller Dunkel", 
      "Schlossbrauerei Reckendorf Recken Edel-Pils", 
      "Privatbrauerei H\u00f6ss Holzar-Bier", 
      "Warsteiner Premium Verum", 
      "Privatbrauerei Franz Joseph Sailer Altenmunster Premium", 
      "Privatbrauerei H\u00f6ss Allg\u00e4uer \u00d6ko Bier", 
      "Maisel's Weisse", 
      "Boltens Ur-Alt", 
      "Rothaus Pils", 
      "Stumpf Keiler Weissbier Hell", 
      "Einbecker Mai-Ur-Bock", 
      "Licher Pilsner", 
      "Anon (Waitrose) Hefe-Weiss Bier", 
      "Oschenfurter Kauzen Helles", 
      "Unertl Gourmet Weisse", 
      "Reissdorf K\u00f6lsch", 
      "Schussenrieder Schwarzbier", 
      "Dortmunder Premium Lager", 
      "Z\u00f6tler Privat-Braurei Hefe-weizen", 
      "Einbecker Ur-Bock Dunkel", 
      "Hacker-Pschorr Hefe Weisse", 
      "Schwanen Brauerei Steinhauser Wheat Beer", 
      "Mittenwalder Josefi Bock", 
      "Heller-Trum Aecht Schlenkerla Rauchbier Weizen", 
      "Gaffel K\u00f6lsch", 
      "Brauerei Gebr. Roehrl Straubinger Blauweiss", 
      "Pyraser Angewirts Weizen", 
      "Ayinger Winter Bock", 
      "Ayinger Celebrator", 
      "Kaiserdom Privatbrauerei Pilsener", 
      "Ayinger Ur-Weisse", 
      "Ayinger Jahrundert", 
      "Aktien Brauerei St. Martin Dunkler Doppelbock", 
      "Dupetit Natural Products Cannabia", 
      "Lammsbrau Neumarkter Urstoff", 
      "Hasenbrau AG Augsburg Scheyern Kloster Doppelbock", 
      "Hacklberg Hefeweizen", 
      "Gessner Premium Pils", 
      "Ayinger Brau-Weisse", 
      "Finkbr\u00e4u Hefe Weissbier", 
      "Boltens Ur-Weizen", 
      "Hofbrauhaus M\u00fcnchen M\u00fcnchner Fest-Bier", 
      "Mauritius Zwickauer Bock Dunkel", 
      "Schmucker Doppel-Bock Dunkel", 
      "Oettinger Hefeweissbier Naturtr\u00fcb", 
      "Berliner Kindl M\u00e4rkischer Landmann Schwarzbier", 
      "Beck & Co. Beck's Light", 
      "Schlossbrauerei Kaltenberg K\u00f6nig Ludwig Dunkel", 
      "Friedrich Dull Krautheimer Urtyp Dunkel", 
      "Unertl M\u00fchldorfer Weissbier", 
      "Alpirsbacher Klosterbrau Pils", 
      "Oettinger Pils", 
      "Lauterbacher Bayrischer Hiasl (Weizen)", 
      "Kneitinger Dunkel Export", 
      "Binding R\u00f6mer Pils", 
      "Herforder Pils", 
      "Apoldaer Maibock", 
      "Spaten Octoberfest", 
      "Oettinger Alt", 
      "Krombacher Radler", 
      "Stumpf Keiler Weissbier Dunkel", 
      "Hasseroder Premium Pils", 
      "Private Landbrauerei Sch\u00f6nram Original Altbayrisch Dunkel", 
      "Kloster Andechs Andechser Dunkel", 
      "Gilde Brewery Bergadler Premium Pils", 
      "Kronenbrauerei \u00d6koKrone Organic Pilsner", 
      "Dortmunder Union Original", 
      "Erzquell Pils", 
      "Kulmbacher M\u00f6nchshof Maingold Landbier", 
      "Heller-Trum Aecht Schlenkerla Rauchbier Urbock", 
      "Kloster Andechs Andechser Bergbock Hell", 
      "Warbacher Hefe Weissbier", 
      "Maisel's Weisse Dunkel", 
      "Augustiner Weissbier", 
      "Arcobrau Festbier", 
      "Brauerei L\u00fcbz L\u00fcbzer Pils", 
      "Wernesgruener Pils Legende", 
      "Weihenstephaner Pilsner", 
      "Schlossbrauerei Kaltenberg Pils", 
      "Schlossbrauerei Kaltenberg Konigl Festtaggs Bier", 
      "Schlossbrauerei Kaltenberg Hell", 
      "Schlossbrauerei Kaltenberg Prizregent Luitpold Weissbier Hell", 
      "Schlossbrauerei Kaltenberg K\u00f6nig Ludwig Weissbier", 
      "Berliner Schultheiss Brauerei Original Berliner Weisse Schankbier", 
      "L\u00f6wenbr\u00e4u Premium", 
      "Berliner Kindl Original Weisse mit Schuss: Himbeere", 
      "Paulaner Salvator", 
      "Denninghoff Giessner Pils", 
      "Denninghoff Weiss", 
      "Denninghoff Giessner Export Pils", 
      "Tegernseer Heller Bock", 
      "Erste Kulmbacher Actienbrauerei EKU 28", 
      "Eichbaum Ureich Premium Pils", 
      "Ritter St. Georgen Brauerei Schwarz Bock", 
      "Beck & Co. Beck's Dark", 
      "Schneider & Sohn Aventinus Weizen-Eisbock", 
      "Weihenstephaner Hefe Weissbier", 
      "Weihenstephaner Hefeweissbier Dunkel", 
      "Binding Export", 
      "Bayer-Br\u00e4u Schwarzes R\u00f6slein", 
      "Weihenstephaner Kristall Weissbier", 
      "Weihenstephaner Tradition Bayrisch Dunkel", 
      "Beck & Co. Beck's Gold", 
      "Tegernseer Dunkel Export", 
      "Rothaus Tannen Z\u00e4pfle", 
      "Oechsner Schwarzbier", 
      "Oettinger Winterbier", 
      "Traun Heinz Von Stein Bio Lagerbier", 
      "Lammsbrau Neumarkter Weisse", 
      "Karg Weissbier", 
      "Binding Kutscher Alt", 
      "Ettaler Currator Doppelbock", 
      "Binding Diat Pils", 
      "Erzquell Brauerei Bielstein Zunft K\u00f6lsch", 
      "Ritter St. Georgen Brauerei Weisser Franke", 
      "Fuerstenberg Premium Pilsener", 
      "Schneider & Sohn Aventinus", 
      "Kloster Andechs Hell", 
      "Anon (Waitrose) Hefe-Weiss Dunkel", 
      "Spaten Franziskaner Weissbier Kristallklar", 
      "Paulaner Roggen", 
      "Berliner Schultheiss Brauerei Lager Schwarz", 
      "Sch\u00f6fferhofer Kristallweizen", 
      "Spaten Franziskaner Hefe-Weissbier Dunkel", 
      "Schlossbrauerei Grunbach Grunbacher Altweiser Gold", 
      "Hacker-Pschorr Edelhell", 
      "Unertl Weissbier", 
      "Spaten Premium Bock", 
      "Beck & Co. Beck's", 
      "Schweiger Helles Export", 
      "Hacker-Pschorr Anno 1417 Naturtr\u00fcbes Kellerbier", 
      "Schneider Weisse Weizen Hell", 
      "Holsten Duckstein", 
      "Darmstadter Privatbrauerei Wilhelm Rummel Weissbier Hefe Hell", 
      "Kloster Andechs Andechser Spezial Hell", 
      "Hacker-Pschorr Original Oktoberfest", 
      "Malzm\u00fchlen K\u00f6lsch", 
      "Schl\u00fcssel Original Schl\u00fcssel", 
      "Spaten Optimator", 
      "Berliner Burgerbrau Bernauer Schwarzbier", 
      "K\u00fcppers K\u00f6lsch", 
      "Spaten Premium Lager", 
      "Tegernsee Quirinus Donkler Doppelbock", 
      "Holsten Pils", 
      "Bender Brauerei Arnstein Herzog von Franken", 
      "Riedenburger Michaeli Dunkel Hefeweizen", 
      "H\u00f6vels Original Bitterbier", 
      "Br\u00e4u im Moos Dunkel", 
      "Beck & Co. St. Pauli Girl Lager", 
      "Holsten Export", 
      "Erbacher Premium Pils", 
      "Landskron Pupen-Schultzes Schwarzbier", 
      "P J Fruh Fruh K\u00f6lsch", 
      "Privatbrauerei Franz Joseph Sailer Altenmunster Rauchenfelser Steinbier", 
      "Berliner Kindl Original Weisse mit Schuss: Waldmeister", 
      "Landskron Wurzig-Frisch Hell", 
      "Landskron Extra-Hell", 
      "Sailerbr\u00e4u Altenm\u00fcnster Brauer Bier", 
      "Maisel's RedLight Super Premium Beer"
    ], 
    "targetFormula": "(!fb:food.beer_country_region.beers_from_here fb:en.germany)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 ?x1name WHERE { fb:m.0345h fb:food.beer_country_region.beers_from_here ?x1 . OPTIONAL { ?x1 fb:type.object.name ?x1name } } LIMIT 9999", 
    "utterance": "what are some german beers", 
    "id": 55
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:en.j_c_penney fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "result": [
      "1902"
    ], 
    "targetFormula": "(!fb:organization.organization.date_founded fb:en.j_c_penney)", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x1 WHERE { fb:m.026h1w fb:organization.organization.date_founded ?x1 } LIMIT 9999", 
    "utterance": "when was jcpenney founded", 
    "id": 37
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:en.leonardo_da_vinci fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?x1 } } } LIMIT 9999", 
    "result": [
      "10"
    ], 
    "targetFormula": "(count (!fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject fb:en.leonardo_da_vinci))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { { SELECT DISTINCT count(?x1) AS ?x2 WHERE { fb:m.04lg6 fb:exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?x1 } } } LIMIT 9999", 
    "utterance": "how many exhibitions have there been about leonardo da vinci", 
    "id": 607
  }, 
  {
    "targetSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:location.location_symbol_relationship.administrative_division fb:en.utah . FILTER (?x1 != fb:en.utah) . ?x1 fb:location.location_symbol_relationship.Kind_of_symbol fb:en.state_bird . FILTER (?x1 != fb:en.state_bird) . ?x1 fb:location.location_symbol_relationship.symbol fb:en.california_gull . FILTER (?x1 != fb:en.california_gull) . ?x1 fb:location.location_symbol_relationship.date_adopted ?x2 } LIMIT 9999", 
    "result": [
      "1955"
    ], 
    "targetFormula": "(!fb:location.location_symbol_relationship.date_adopted (and (and ((lambda x (fb:location.location_symbol_relationship.administrative_division (var x))) fb:en.utah) ((lambda x (fb:location.location_symbol_relationship.Kind_of_symbol (var x))) fb:en.state_bird)) ((lambda x (fb:location.location_symbol_relationship.symbol (var x))) fb:en.california_gull)))", 
    "targetOrigSparql": "PREFIX fb: <http://rdf.freebase.com/ns/> SELECT DISTINCT ?x2 WHERE { ?x1 fb:location.location_symbol_relationship.administrative_division fb:m.07srw . FILTER (?x1 != fb:m.07srw) . ?x1 fb:location.location_symbol_relationship.Kind_of_symbol fb:m.04627hw . FILTER (?x1 != fb:m.04627hw) . ?x1 fb:location.location_symbol_relationship.symbol fb:m.037lsy . FILTER (?x1 != fb:m.037lsy) . ?x1 fb:location.location_symbol_relationship.date_adopted ?x2 } LIMIT 9999", 
    "utterance": "since when has the california gull been the state bird of utah", 
    "id": 613
  }
]